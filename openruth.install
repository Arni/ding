<?php
/**
 * @file
 * Installation and update hooks for Openruth.
 */

/**
 * Implements hook_enable().
 *
 * Adds a profile2 type to use as this providers user profile.
 */
function openruth_enable() {
  $profile_type = new ProfileType(
    array(
      'type' => 'provider_openruth',
      'label' => t('Profile for OpenRuth'),
      'userCategory' => TRUE,
      'userView' => TRUE,
    )
  );
  $profile_type->save();
}

/**
 * Implements hook_requirements().
 */
function openruth_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  if ($phase == 'runtime') {
    $requirements['openruth'] = array(
      'title' => $t('Openruth'),
      'value' => $t('Openruth configured'),
      'severity' => REQUIREMENT_OK,
    );
    if (!variable_get('openruth_wsdl_url', FALSE) || !variable_get('openruth_agency_id', FALSE)) {
      $requirements['openruth']['value'] = $t('Openruth not configured');
      $requirements['openruth']['description'] = $t('Openruth is not properly configured, please visit <a href="@link">the settings page</a>.', array('@link' => url('admin/config/ding/provider/openruth')));
      $requirements['openruth']['severity'] = REQUIREMENT_ERROR;
    }
  }

  return $requirements;
}

/**
 * Change most fields in the profile to virtual fields.
 */
function openruth_update_7000() {
  return db_update('field_config')
    ->fields(array(
      'storage_type' => 'virtual_field',
      'storage_module' => 'virtual_field',
    ))
    ->condition('field_name', '%alma%', 'LIKE')
    ->condition('field_name', 'field_openruth_interest_period', '!=')
    ->condition('field_name', 'field_openruth_preferred_branch', '!=')
    ->execute();
}