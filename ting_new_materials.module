<?php

/**
 * @file
 * Enables listing the newest materials .
 */
include_once 'ting_new_materials.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_new_materials_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_theme().
 */
function ting_new_materials_theme($existing, $type, $theme, $path) {
  return array(
    'ting_new_materials' => array(
      'variables' => array('title' => NULL, 'number_of_results' => NULL, 'results' => NULL),
      'template'  => 'ting-new-materials',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Gets the post from the Data well.
 *
 * @param type $entity
 *  New materials entity content node.
 * @return null
 */
function ting_new_materials_get_new_materials_posts($entity) {

  $page = pager_find_page();
  $num_per_page = variable_get('ting_new_materials_number_per_page', 10);

  $query = ting_new_materials_build_search_query($entity);
  $searchResult = ting_new_materials_do_search($query, $page, $num_per_page);

  if ($searchResult->numTotalObjects > 0) {
    $rendered_results = ting_new_materials_render_collection($searchResult->collections);
    pager_default_initialize($searchResult->numTotalObjects, $num_per_page);
  }
  else {
    // There are 3 possible outcomes: Hits, 0 hits because there aren't any
    // materials or 0-hits because there no materials i this period.
    $query = ting_new_materials_build_search_query($entity, FALSE);
    $searchResult = ting_new_materials_do_search($query, $page, $num_per_page);

    if ($searchResult->numTotalObjects > 0) {
      // We flag that there are materials but not in this period
      $rendered_results = array('noresultsthisperiod' => TRUE);
    }
    else {
      $rendered_results = NULL;
    }
  }
  return $rendered_results;
}

/**
 * Builds a search query string against the Data Well.
 *
 * @param type $entity
 *  A new materials entity content type.
 * @param type $limit_query
 *  If TRUE the search query will be limited to the number of months given in
 *  the entity. Default TRUE.
 * @return string
 *  Ting data well search string.
 */
function ting_new_materials_build_search_query($entity, $limit_query = TRUE) {
  // Get search query from the entity.
  $items = field_get_items('node', $entity, 'field_ting_new_materials_search');
  $query = $items[0]['value'];

  // Check if limit expression should be added.
  if ($limit_query) {
    // Get the limit (number of months 1 to 12).
    $items = field_get_items('node', $entity, 'field_ting_new_materials_limit');
    $limit = $items[0]['value'];

    // Add the limit to the query.
    $query .= ting_new_materials_make_limit_query($limit);
  }
  $query = '(' . $query . ')';

  return $query;
}

/**
 * Limit a search query expression to a specified number of months.
 *
 * @param int $limit
 *  The number of months back to limit the results.  Min 1 and max 12 month. 0
 *  means unlimited.
 * @return string $query
 *  The limit by month search query expression.
 */
function ting_new_materials_make_limit_query($limit = 0) {
  $query = "";

  if ($limit > 0) {
    // Get current date (defaults to now).
    $date = new DateTime();
    $query = ' AND sort.acquisitionDate=(' . $date->format('Ym') . '*';
    for ($i = 1; $i <= $limit; $i++) {
      $date->sub(date_interval_create_from_date_string('1 month'));
      $query .= ' OR ' . $date->format('Ym') . '*';
    }
    $query .= ')';
  }

  return $query;
}


/**
 * Renders a results object as a collection. We only search for single objects
 * so every collection automatically becomes an object.
 *
 * @param array $collections
 *  Array of collection object from the search.
 * @return array $results
 *  Array of rendered objects.
 */
function ting_new_materials_render_collection($collections) {
  $results = array();
  foreach ($collections as &$collection) {
    $build = ting_collection_view($collection, 'teaser');
    $uri = entity_uri('ting_collection', $collection);
    $results[] = array(
      'link' => url($uri['path'], $uri['options']),
      'type' => '',
      'title' => $collection->title,
      'user' => '',
      'date' => '',
      'snippet' => drupal_render($build),
    );
  }
  return $results;
}

/**
 * Performs a query against the Data Well and returns the objects.
 *
 * @param string @query
 *  The query string.
 * @param $page int
 *  The page number.
 * @return TingClientSearchResult
 *  The search result.
 *
 */
function ting_new_materials_do_search($query, $page = 0, $num_per_page = 10) {
  // Load the ting client.
  module_load_include('client.inc', 'ting');

  // Build search options and ensure that they are sorted corretly.
  $options = array();
  $options['sort'] = 'acquisitionDate_descending';
  $options['enrich'] = TRUE;
  $options['collectionType'] = 'manifestation';

  // Search the data well.
  $search_result = array();
  try {
    $search_result = ting_do_search($query, $page + 1, $num_per_page, $options);
  } catch (TingClientException $e) {
    watchdog('ting_new_materials', 'Failed to get objects from the Data well: “@message”', array('@message' => $e->getMessage(), WATCHDOG_ERROR));
  }

  return $search_result;
}
