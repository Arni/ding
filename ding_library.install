<?php
/**
 * @file
 *
 */

/**
 * Implements hook_install().
 */
function ding_library_install() {
  // Disable default OG member rules.
  db_update('rules_config')
    ->fields(array('active' => 0))
    ->condition(db_or()
    ->condition('name', 'rules_og_member_active')
    ->condition('name', 'rules_og_member_pending')
    ->condition('name', 'rules_og_group_content_notification'))
    ->execute();
}

/**
 * Implements hook_enable().
 */
function ding_library_enable() {
  $path = array(
    'source' => 'libraries',
    'language' => 'da',
  );

  // Create Danish alias for libraries if needed.
  if (!path_load($path)) {
    $path['alias'] = 'biblioteker';
    path_save($path);
  }
}

/**
 * Update blocks.
 */
function ding_library_update_7001() {
  $default_theme = variable_get('theme_default', 'bartik');

  // Delete menu_block menu, not needed anymore.
  db_delete('block')
    ->condition('module', 'menu_block')
    ->condition('delta', 'ding_content-main-lvl1')
    ->condition('theme', $default_theme)
    ->execute();

  // Delete any left over library_menus.
  db_delete('block')
    ->condition('module', 'ding_library')
    ->condition('delta', 'library_menu')
    ->condition('theme', $default_theme)
    ->execute();

  // Add the new ding_menu.
  db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache', 'title'))->values(array(
      'module' => 'ding_library',
      'delta' => 'ding_menu',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 1,
      'region' => 'header',
      'pages' => '',
      'cache' => -1,
      'title' => '<none>',
    )
  )->execute();
  return t('Updated menu block.');
}

/**
 * Disable default OG member rules.
 */
function ding_library_update_7002() {
  db_update('rules_config')
    ->fields(array('active' => 0))
    ->condition(db_or()
    ->condition('name', 'rules_og_member_active')
    ->condition('name', 'rules_og_member_pending')
    ->condition('name', 'rules_og_group_content_notification'))
    ->execute();
}

/**
 * Set OG user on library nodes to user 1.
 */
function ding_library_update_7003() {
  $query = db_select('og', 'og');
  $query->join('node', 'n', 'n.nid = og.etid');
  $query->fields('og', array('etid'));
  $query->addField('n', 'uid');
  $rows = $query->execute();
  foreach ($rows as $row) {
    db_insert('og_membership')
      ->fields(array(
        'type' => 'og_membership_type_default',
        'etid' => $row->uid,
        'entity_type' => 'user',
        'gid' => $row->etid,
        'state' => 1,
        'created' => time(),
        'group_type' => 'node',
        'field_name' => 'og_user_node',
        'language' => 'und',
      ))
      ->execute();
  }
}
