<?php

/**
 * @file
 * Control Panel for the DDB CMS system.
 *
 * DDB CMS is a Drupal based frontend in use by Danish public libraries.
 */

define('DDB_MSG_ERROR_NO_WEB_SERVICE', 'Cannot communicate with the DDB Webservice.');



/**
 * This function returns an instance of the ddbService class, utilizing
 * Drupals caching functionality.
 */

function ddb() {
  $result = &drupal_static(__FUNCTION__);
  if (!isset($result)) $result = new ddbService();
  return $result;
}


/**
 * Standard Drupal module setup
 */

function ddb_cp_menu() {
  $items['admin/ddb_cp'] = array(
    'title' => 'DDB',
    'description' => 'Configure and manage the DDB installation.',
    'page callback' => 'ddb_cp_menu_content',
    'access arguments' => array('administer ddb'),
    'file' => 'ddb_cp_admin.inc',
  );

  $items['admin/ddb_cp/config'] = array(
    'title' => 'Configuration',
    'description' => 'Configure this DDB instance.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ddb_cp_menu_configuration'),
    'access arguments' => array('administer ddb_cp'),
    'file' => 'ddb_cp_admin.inc',
  );

  if (ddb()->model() == 'webmaster') {
     $items['admin/ddb_cp/development'] = array(
      'title' => 'Development',
      'description' => 'Manage development of this DDB instance.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ddb_cp_menu_development'),
      'access arguments' => array('administer ddb_cp'),
      'file' => 'ddb_cp_admin.inc',
    );
  }

  $items['admin/ddb_cp/test/xml'] = array(
    'page callback' => 'ddb_cp_get_test_result',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['ajax/ddb_cp/status'] = array(
    'page callback' => 'ddb_cp_ajax_status',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['ajax/ddb_cp/test/execute'] = array(
    'page callback' => 'ddb_cp_ajax_test_execute',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['ajax/ddb_cp/recreate'] = array(
    'page callback' => 'ddb_cp_ajax_recreate',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['ajax/ddb_cp/test/result'] = array(
    'page callback' => 'ddb_cp_ajax_test_result',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}


function ddb_cp_permission() {
  return array(
    'administer ddb_cp' => array(
      'title' => t('Administer this DDB instance'),
    ),
  );
}


/**
 * Form callback routines
 */

function ddb_cp_get_test_result($site = NULL, $number = NULL) {
  $site_types = array('dev', 'prod', 'stg');
  
  if (in_array($site, $site_types)) {
    return _ddb_cp_save_test_result($site, $number);
  }
  else {
    return MENU_NOT_FOUND;
  }
}


function ddb_cp_create_dev_submit($form, &$form_state) {
  if (ddb()->execute('Create developer site', array('SITE' => ddb()->names['prod'], 'TEMPLATE' => $form_state['input']['platform']))) {
    drupal_set_message(t('A job to create a new developer site has been scheduled.'));
  }
  else {
    drupal_set_message(t(DDB_MSG_ERROR_NO_WEB_SERVICE), 'error');
  }
  
  drupal_rebuild_form('ddb_cp_menu_development', $form_state);
}


function ddb_cp_create_stg_submit($form, &$form_state) {
  if (ddb()->execute('Create staging site', array('SITE' => ddb()->names['prod']))) {
    drupal_set_message(t('A job to create a new staging site has been scheduled.'));
  }
  else {
    drupal_set_message(t(DDB_MSG_ERROR_NO_WEB_SERVICE), 'error');
  }

  drupal_rebuild_form('ddb_cp_menu_development', $form_state);
}


function ddb_cp_update_prod_submit($form, &$form_state) {
  if (ddb()->execute('Update production site', array('SITE' => ddb()->names['prod']))) {
    drupal_set_message(t('A job to update the production site has been scheduled.'));
  }
  else {
    drupal_set_message(t(DDB_MSG_ERROR_NO_WEB_SERVICE), 'error');
  }
  
  drupal_rebuild_form('ddb_cp_menu_development', $form_state);
}


/**
 * Ajax routines
 */

function ddb_cp_ajax_recreate($site) {
  if (isset($site)) {
    switch ($site) {
      case 'dev':
        $status = ddb()->status()['stg'];
        
        if ($status['status'] == 'running' || $status['status'] == 'building' || $status['status'] == 'disabled') {
          ddb()->execute('Delete staging site', array('SITE' => ddb()->names['prod']));
        }
        
        ddb()->execute('Delete developer site', array('SITE' => ddb()->names['prod']));
        break;
      case 'stg':
        ddb()->execute('Recreate staging site', array('SITE' => ddb()->names['prod']));
        break;
    }    
  }
}


function ddb_cp_ajax_status() {
  $result = array();
  foreach (ddb()->status() as $type => $status) {
    $result['#' . $type . '-site-status'] = _ddb_cp_get_site_status_message($type, $status);
    if (($type == 'dev') || ($type == 'stg')) $result['#' . $type . '-test-status'] = _ddb_cp_get_test_status_message($type, $status);
  } 
  return drupal_json_output($result);
}


function ddb_cp_ajax_test_execute($site) {
  if (isset($site)) {
    ddb()->execute(ddb()->names[$site] . ' test');
  }
}


function ddb_cp_ajax_test_result($site) {
  $site_types = array('dev', 'prod', 'stg');
  
  if (in_array($site, $site_types)) {
    return drupal_json_output(_ddb_cp_get_test_result($site));
  }
  else {
    return MENU_NOT_FOUND;
  }
}


/*
 * Utility routines
 */

function _ddb_cp_save_test_result($site = NULL, $number = NULL) {
  if (isset($site)) {
    if ($xml = ddb()->test_report(ddb()->names[$site], $number)) {
      drupal_add_http_header('Content-Type', 'text/xml; charset=utf-8');
      if (isset($number)) {
        drupal_add_http_header('Content-Disposition', 'attachment; filename="Testreport ' . ddb()->names[$site] . ' build ' . $number . '.xml"');
      }
      else {
        drupal_add_http_header('Content-Disposition', 'attachment; filename="Testreport ' . ddb()->names[$site] . '.xml"');
      }
      print '<?xml version="1.0" encoding="UTF-8"?>';
      print $xml;
      drupal_exit();
    }
    else {
      drupal_set_message(t('Error fetching testreport'), 'error');
    }
  }
}


function _ddb_cp_get_site_status_message($type, $status) {
  $prefix = '<div id="' . $type . '-site-status" class="site-status-unknown">';
  $message = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/grey.gif"/> ' . t('The site status is unknown.');
  $platform = '';
  $timestamp = '';
  
  switch ($status['status']) {
    case 'unknown':
      $prefix = '<div id="' . $type . '-site-status" class="site-status-unknown">';
      $message = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/grey.gif"/> ' . t('The site status is unknown.');
      break;
    case 'running':
      $prefix = '<div id="' . $type . '-site-status" class="site-status-running">';
      $message = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/green.gif"/> ' . t('The site is up and running.');
      $timestamp = '<tr><th>' . t('Creation time') . ':</th><td>' . date('j/n Y G:i', $status['timestamp']) . '</td></tr>';
      $platform = '<tr><th>' . t('Platform') . ':</th><td>' . $status['platform']['name'] . '</td></tr>';
      break;
    case 'building':
      $prefix = '<div id="' . $type . '-site-status" class="site-status-building">';
      $message = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/green_anime.gif"/> ' . t('The site is being created.');
      break;
    case 'disabled':
      $prefix = '<div id="' . $type . '-site-status" class="site-status-disabled">';
      $message = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/yellow.gif"/> ' . t('The site is disabled.');
      $timestamp = '<tr><th>' . t('Creation time') . ':</th><td>' . date('j/n Y G:i', $status['timestamp']) . '</td></tr>';
      $platform = '<tr><th>' . t('Platform') . ':</th><td>' . $status['platform']['name'] . '</td></tr>';
      break;
    case 'not_exist':
      $prefix = '<div id="' . $type . '-site-status" class="site-status-not-exist">';
      $message = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/grey.gif"/> ' . t('The site does not exist.');
      break;
  }
    
  return $prefix . $message . '<table>' . $timestamp . $platform . '</table></div>';
}


function _ddb_cp_get_test_result($site = NULL) {
  $result = '<div>Test result not available.</div>';
  
  if (isset($site)) {
    $buildnumber = NULL;
    $buildurl = NULL;
    
    if ($data = ddb()->test_result(ddb()->names[$site])) {
      $xml = simplexml_load_string($data);
      $node = $xml->xpath('/freeStyleBuild/number');
      if (isset($node)) {
        $buildnumber = $node[0]->__toString();
      }
      $node = $xml->xpath('/freeStyleBuild/url');
      if (isset($node)) {
        $buildurl = $node[0]->__toString();
      }
    }
    
    $result = '<div id="' . $site . '-test-buttons"><img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/16x16/reload.png" alt="Passed"/> <a id="reload-' . $site . '-test-report" href="#">Reload</a>&nbsp;&nbsp;<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/16x16/disk.png" alt="Passed"/> <a href="/admin/ddb_cp/test/xml/' . $site . '/' . $buildnumber . '">Save</a></div>';
    $result .= '<p>' . _ddb_cp_get_test_status_summary(ddb()->status()[$site]) . '</p>';
    
    if ($data = ddb()->test_report(ddb()->names[$site])) {
      $test = array();
      $xml = simplexml_load_string($data);
      
      foreach ($xml->xpath('/testResult/suite/case') as $node) {
        $scratch = explode('.', $node->className->__toString());
        $test[$scratch[0]][$scratch[1]][$node->name->__toString()] = array('status' => $node->status->__toString(), 'lines' => $node->stdout->__toString());
        if (isset($node->errorStackTrace) && $node->errorStackTrace != '') {
          $test[$scratch[0]][$scratch[1]][$node->name->__toString()]['lines'] = $node->errorDetails->__toString() . ': ' . $node->errorStackTrace->__toString();
        }
      }
    }
    
    $failed = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/16x16/failed.png" alt="' . t('Failed') . '"/>';
    $passed = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/16x16/passed.png" alt="' . t('Passed') . '"/>';
    
    foreach ($test as $key => $suite) {
      $failures = 0;
      
      foreach ($suite as $case) {
        foreach ($case as $step) {
          if ($step['status'] == 'FAILED' || $step['status'] == 'REGRESSION') $failures++;
        }
      }

      if ($failures > 0) {
        $result .= '<div class="' . $site . '-test-suite collapsed">' . $failed . ' <a href="#">' . $key . '</a>';
      }
      else {
        $result .= '<div class="' . $site . '-test-suite collapsed">' . $passed . ' <a href="#">' . $key . '</a>';
      }      
      
      foreach ($suite as $suite_k => $case) {
        $failures = 0;
        
        foreach ($case as $step) {
          if ($step['status'] == 'FAILED' || $step['status'] == 'REGRESSION') $failures++;
        }
      
        if ($failures > 0) {
          $result .= '<div class="' . $site . '-test-case collapsed">' . $failed . ' <a href="#">' . $suite_k . '</a>';
        }
        else {
          $result .= '<div class="' . $site . '-test-case collapsed">' . $passed . ' <a href="#">' . $suite_k . '</a>';
        }      
      
        foreach ($case as $case_k => $step) {
          if ($step['status'] == 'FAILED' || $step['status'] == 'REGRESSION') {
            $result .= '<div class="' . $site . '-test-step collapsed">' . $failed . ' <a href="#">' . $case_k . '</a>';
          }
          else {
            $result .= '<div class="' . $site . '-test-step collapsed">' . $passed . ' <a href="#">' . $case_k . '</a>';
          }

          $result .= '<div class="' . $site . '-stdout"><pre>' . $step['lines'] . '</pre></div></div>';
        }
        
        $result .= '</div>';
      }
        
      $result .= '</div>';
    }  
  }
  
  return $result;
}


function _ddb_cp_get_test_status_message($type, $status) {
  $prefix = '<div id="' . $type . '-test-status" class="test-status-unknown">';
  $ball = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/grey.gif"/>';
  $timestamp = '';

  switch ($status['test']['status']) {
    case 'unknown':
      $prefix = '<div id="' . $type . '-test-status" class="test-status-unknown">';
      $ball = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/grey.gif"/>';
      break;
    case 'blue':
      $prefix = '<div id="' . $type . '-test-status" class="test-status-ok test-ready">';
      $ball = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/green.gif"/>';
      if ($status['test']['timestamp']) $timestamp = '<table><tr><th>' . t('Test time') . ':</th><td>' . date('j/n Y G:i', $status['test']['timestamp']) . '</td></tr></table>';
      break;
    case 'blue_anime':
      $prefix = '<div id="' . $type . '-test-status" class="test-status-ok test-running">';
      $ball = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/green_anime.gif"/>';
      if ($status['test']['timestamp']) $timestamp = '<table><tr><th>' . t('Test time') . ':</th><td>' . date('j/n Y G:i', $status['test']['timestamp']) . '</td></tr></table>';
      break;
    case 'yellow':
      $prefix = '<div id="' . $type . '-test-status" class="test-status-warn test-ready">';
      $ball = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/yellow.gif"/>';
      if ($status['test']['timestamp']) $timestamp = '<table><tr><th>' . t('Test time') . ':</th><td>' . date('j/n Y G:i', $status['test']['timestamp']) . '</td></tr></table>';
      break;
    case 'yellow_anime':
      $prefix = '<div id="' . $type . '-test-status" class="test-status-warn test-running">';
      $ball = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/yellow_anime.gif"/>';
      if ($status['test']['timestamp']) $timestamp = '<table><tr><th>' . t('Test time') . ':</th><td>' . date('j/n Y G:i', $status['test']['timestamp']) . '</td></tr></table>';
      break;
    case 'red':
      $prefix = '<div id="' . $type . '-test-status" class="test-status-fail test-ready">';
      $ball = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/red.gif"/>';
      if ($status['test']['timestamp']) $timestamp = '<table><tr><th>' . t('Test time') . ':</th><td>' . date('j/n Y G:i', $status['test']['timestamp']) . '</td></tr></table>';
      break;
    case 'red_anime':
      $prefix = '<div id="' . $type . '-test-status" class="test-status-fail test-running">';
      $ball = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/red_anime.gif"/>';
      if ($status['test']['timestamp']) $timestamp = '<table><tr><th>' . t('Test time') . ':</th><td>' . date('j/n Y G:i', $status['test']['timestamp']) . '</td></tr></table>';
      break;
    case 'notbuilt':
      $prefix = '<div id="' . $type . '-test-status" class="test-status-notbuild test-ready">';
      $ball = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/grey.gif"/>';
      break;
    case 'notbuilt_anime':
      $prefix = '<div id="' . $type . '-test-status" class="test-status-notbuilt test-running">';
      $ball = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/grey_anime.gif"/>';
      break;
    case 'aborted':
      $prefix = '<div id="' . $type . '-test-status" class="test-status-aborted test-ready">';
      $ball = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/grey.gif"/>';
      if ($status['test']['timestamp']) $timestamp = '<table><tr><th>' . t('Test time') . ':</th><td>' . date('j/n Y G:i', $status['test']['timestamp']) . '</td></tr></table>';
      break;
    case 'aborted_anime':
      $prefix = '<div id="' . $type . '-test-status" class="test-status-aborted test-running">';
      $ball = '<img src="/' . drupal_get_path('module', 'ddb_cp') . '/images/32x32/grey_anime.gif"/>';
      if ($status['test']['timestamp']) $timestamp = '<table><tr><th>' . t('Test time') . ':</th><td>' . date('j/n Y G:i', $status['test']['timestamp']) . '</td></tr></table>';
      break;
  }
  
  return $prefix . $ball . ' Last test: ' . _ddb_cp_get_test_status_summary($status) . $timestamp . '</div>';
}


function _ddb_cp_get_test_status_summary($status) {
  $result = t('Test summary not available.');
  
  if (isset($status['test']) && isset($status['test']['last'])) {
    if ($status['test']['last']['status'] == 'ABORTED') {
      $result = 'Build ' . $status['test']['last']['number'] . ' - Cancelled.';
    }
    elseif ($status['test']['last']['status'] == 'FAILURE') {
      $result = 'Build ' . $status['test']['last']['number'] . ' - Failed.';
    }
    elseif ((!$status['test'] == NULL) && (!$status['test']['last'] == NULL) && (!$status['test']['last']['status'] == NULL)) {
      $result = 'Build ' . $status['test']['last']['number'] . ' - ' . $status['test']['last']['total'] . ' total, ' . $status['test']['last']['failed'] . ' failed, ' . $status['test']['last']['skipped'] . ' skipped.';
    }
  }
  
  return $result;
}


function _ddb_cp_object_to_array($obj) {
  $_arr = is_object($obj) ? get_object_vars($obj) : $obj;
  foreach ($_arr as $key => $val) {
    $val = (is_array($val) || is_object($val)) ? _ddb_cp_object_to_array($val) : $val;
    $arr[$key] = $val;
  }
  return $arr;
} 
