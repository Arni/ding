<?php

/**
 * @file
 * FBS provider module.
 */

// Load Field module hooks. Wrapping in function exists, so we'll still be
// able to load this file in tests.
if (function_exists('module_load_include')) {
  module_load_include('inc', 'fbs', 'fbs.field');
}

/**
 * Implements hook_init().
 *
 * Register autoloader for our (non-Drupal) classes.
 */
function fbs_init() {
  require_once "vendor/autoload.php";
}

/**
 * Implements hook_ding_provider().
 */
function fbs_ding_provider() {
  $path = drupal_get_path('module', 'fbs');

  return array(
    'title' => 'FBS provider',
    'settings' => 'fbs_settings_form',
    'provides' => array(
      'availability' => array(
        'prefix' => 'availability',
        'file' => $path . '/includes/fbs.availability.inc',
      ),
      'debt' => array(
        'prefix' => 'debt',
        'file' => $path . '/includes/fbs.debt.inc',
      ),
      'loan' => array(
        'prefix' => 'loan',
        'file' => $path . '/includes/fbs.loan.inc',
      ),
      'reservation' => array(
        'prefix' => 'reservation',
        'file' => $path . '/includes/fbs.reservation.inc',
      ),
      'user' => array(
        'prefix' => 'user',
        'file' => $path . '/includes/fbs.user.inc',
      ),
      // 'wayf' => array(
      //   'prefix' => 'wayf',
      //   'file' => $path . '/includes/fbs.wayf.inc',
      // ),
    ),
  );
}

/**
 * Return patron id for user.
 */
function fbs_patron_id($account = NULL) {
  global $user;
  if (!$account) {
    $account = $user;
  }

  if (isset($account->fbs_patron_id)) {
    return $account->fbs_patron_id;
  }

  $creds = ding_user_get_creds($user);
  return $creds['patronId'];
  // throw DingProviderAuthException if no user is logged in.
  return NULL;
}
/**
 * Get the service object.
 *
 * Parameters is for injecting in tests. Don't use.
 */
function fbs_service($agency_id = NULL, $endpoint = NULL, $client = NULL, $mapper = NULL, $reset = FALSE) {
  // No drupal_static. We want to be callable from tests.
  static $service;
  if (!$service || $reset) {
    $agency_id = !is_null($agency_id) ? $agency_id : variable_get('fbs_agency', '');
    $endpoint = !is_null($endpoint) ? $endpoint : variable_get('fbs_endpoint', '');
    if ($endpoint && preg_match('{localtest}', $endpoint)) {
      $client = new FakeHttpClient();
    }

    // Ensure exactly one trailing slash.
    $endpoint = rtrim($endpoint, '/') . '/';
    $service = new FBS($agency_id, $endpoint, $client, $mapper);
  }
  return $service;
}

/**
 * Provider settings form.
 */
function fbs_settings_form() {
  $form = array();

  $form['fbs'] = array(
    '#type' => 'fieldset',
    '#title' => t('FBS service settings'),
    '#tree' => FALSE,
  );

  $form['fbs']['fbs_endpoint'] = array(
    '#type' => 'textfield',
    '#title' => t('FBS endpoint URL'),
    '#description' => t('The URL for the FBS REST service, usually something like https://et.cicero-fbs.com/rest'),
    '#required' => TRUE,
    '#default_value' => variable_get('fbs_endpoint', ''),
  );

  $form['fbs']['fbs_agency'] = array(
    '#type' => 'textfield',
    '#title' => t('ISIL'),
    '#description' => t('ISIL code of the library, for example DK-810015.'),
    '#default_value' => variable_get('fbs_agency', ''),
  );

  // $form['fbs']['fbs_enable_reservation_deletion'] = array(
  //   '#type' => 'checkbox',
  //   '#title' => t('Enable reservation deletion'),
  //   '#default_value' => variable_get('fbs_enable_reservation_deletion', FALSE),
  //   '#description' => t('Allow users to delete their reservations as well as ready for pickup ones.'),
  // );

  // $form['fbs']['fbs_enable_logging'] = array(
  //   '#type' => 'checkbox',
  //   '#title' => t('Enable logging'),
  //   '#default_value' => variable_get('fbs_enable_logging', FALSE),
  //   '#description' => t('Logs requests to the OpenRuth webservice. Sensitive information such as CPR number and PIN code is stripped from the requests.'),
  // );

  return system_settings_form($form);
}

/**
 * Submit function. Trim values.
 */
function fbs_settings_form_submit($form, &$form_state) {
  foreach ($form_state['values'] as $name => $value) {
    $form_state['values'][$name] = trim($value);
  }
  system_settings_form_submit($form, $form_state);
}

/**
 * Implements hook_profile2_presave().
 */
function fbs_profile2_presave($entity) {
  global $user;
  if ($entity->type != 'provider_fbs') {
    return;
  }
  if (isset($entity->is_new) && $entity->is_new) {
    // Profile is being created, return.
    return;
  }

  if ($entity->uid != $user->uid) {
    // Profile is not the current user's. We can't get the existing values, so
    // we wont try to update.
  }
  $patron = ding_user_get_creds($user);
  $wrapper = entity_metadata_wrapper('profile2', $entity);

  $changes = array();
  if ($wrapper->field_fbs_phone->value() != $patron['phone']) {
    $changes['phoneNumber'] = $wrapper->field_fbs_phone->value();
  }

  if (!empty($changes)) {
    $update = new FBS\Model\UpdatePatronRequest();
    $patron_settings = new FBS\Model\PatronSettings();
    foreach ($changes as $key => $val) {
      $patron_settings->{$key} = $val;
    }
    $update->patron = $patron_settings;
    $res = fbs_service()->Patron->update(fbs_service()->agencyId, $patron['patronId'], $update);
    $result['creds'] = _fbs_creds($res->patron);
    ding_user_save_creds($result);
  }
}

/**
 * Create creds from Patron.
 */
function _fbs_creds(FBS\Model\Patron $patron) {
  return array(
    'patronId' => $patron->patronId,
    'name' => $patron->name,
    'phone' => $patron->phoneNumber,
  );
}
