<?php
/**
 * @file
 * Code for the Ding groups feature.
 */

include_once 'ding_groups.features.inc';

/**
 * Implements hook_og_context_negotiation_info().
 *
 * Enabled ding groups to find group context panel pages where the group node is
 * loaded as argument. E.g. temaer/%gid/nyheder.
 */
function ding_groups_og_context_negotiation_info() {
  $providers = array();

  $providers['ding-groups-panels'] = array(
    'name' => t('Ding groups'),
    'description' => t("Determine context in panels node."),
    'callback' => 'ding_groups_og_context_handler',
  );

  return $providers;
}

/**
 * Callback for OG context negotiation that tries to find ding group node.
 *
 * This is based on the current menu item (path) and that it is a panel.
 *
 * @return array
 *   Node ids.
 */
function ding_groups_og_context_handler() {
  $nids = array();

  $item = menu_get_item();
  if (isset($item['page_arguments'][1]->data->type) && $item['page_arguments'][1]->data->type == 'ding_group') {
    $nids[] = $item['page_arguments'][1]->data->nid;
  }

  return array(
    'node' => $nids,
  );
}

/**
 * Implements hook_node_insert().
 *
 * Create alias for group news and events.
 */
function ding_groups_node_insert($node) {
  if ($node->type == 'ding_group') {
    ding_groups_node_update($node);
  }
}

/**
 * Implements hook_node_update().
 *
 * Create new alias for group news and events, if the nodes alias have changed.
 */
function ding_groups_node_update($node) {
  if ($node->type == 'ding_group') {
    $alias = 'node/' . $node->nid;

    // Find node pattern from path auto.
    module_load_include('inc', 'pathauto');
    $pattern = pathauto_pattern_load_by_entity('node', 'ding_group');
    if ($pattern) {
      // Create node alias using token replace.
      $alias = token_replace($pattern, array('node' => $node), array(
        'sanitize' => FALSE,
        'clear' => TRUE,
        'callback' => 'pathauto_clean_token_values',
        'language' => (object) array('language' => LANGUAGE_NONE),
        'pathauto' => TRUE,
      ));
    }

    // Update/create alias for the current ding groups news and events.
    foreach (array('nyheder', 'arrangementer') as $slug) {
      if (!path_load(array('alias' => $alias . '/' . $slug))) {
        $source = 'temaer/' . $node->nid . '/' . $slug;
        $existing_alias = _pathauto_existing_alias_data($source, LANGUAGE_NONE);
        $path = array(
          'source' => $source,
          'alias' => $alias . '/' . $slug,
          'language' => LANGUAGE_NONE,
        );

        // Set the alias or update it.
        _pathauto_set_alias($path, $existing_alias);
      }

      // Create alias for news and event terms.
      if ($slug == 'nyheder') {
        $vocabulary = taxonomy_vocabulary_machine_name_load('news_category');
      }
      else {
        $vocabulary = taxonomy_vocabulary_machine_name_load('event_category');
      }
      $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
      ding_base_updated_taxonomy_aliases($node, 'temaer', $terms, array($slug));
    }
  }
}

/**
 * Implements hook_node_delete().
 *
 * Delete alias for group news and events.
 */
function ding_groups_node_delete($node) {
  if ($node->type == 'ding_group') {
    module_load_include('inc', 'pathauto');
    pathauto_path_delete_all('temaer/' . $node->nid);
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 *
 * Ensures that URL alias for news and events are create for groups.
 */
function ding_groups_taxonomy_term_insert($term) {
  ding_groups_taxonomy_term_update($term);
}

/**
 * Implements hook_taxonomy_term_update().
 *
 * Ensures that URL alias are updated for groups news and events.
 */
function ding_groups_taxonomy_term_update($term) {
  if ($term->vocabulary_machine_name == 'news_category' || $term->vocabulary_machine_name == 'event_category') {
    // Load all ding_groups nodes. Entity cache should help on the performance.
    $nodes = node_load_multiple(array(), array('type' => 'ding_group'));

    $type = 'arrangementer';
    if ($term->vocabulary_machine_name == 'news_category') {
      $type = 'nyheder';
    }

    foreach ($nodes as $node) {
      ding_base_updated_taxonomy_aliases($node, 'temaer', array($term), array($type));
    }
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 *
 * Delete alias for group news and events.
 */
function hook_taxonomy_term_delete($term) {
  if ($term->vocabulary_machine_name == 'news_category' || $term->vocabulary_machine_name == 'event_category') {
    // Load all ding_groups nodes. Entity cache should help on the performance.
    $nodes = node_load_multiple(array(), array('type' => 'ding_group'));

    $type = 'arrangementer';
    if ($term->vocabulary_machine_name == 'news_category') {
      $type = 'nyheder';
    }
    module_load_include('inc', 'pathauto');

    foreach ($nodes as $node) {
      pathauto_path_delete_all('temaer/' . $node->nid . '/' . $type . '/' . $term->tid);
    }
  }
}
