  <?php

/**
 * @file
 *
 * Install file for Ting field search.
 */

/**
 * Implements hook_enable().
 */
function ting_field_search_enable() {
  // We'll do this in hook_modules_enabled() in the module file.
  // See comments there for more details.
  // ting_field_search_install_backend();
}

/**
 * Implements hook_disable().
 */
function ting_field_search_disable() {
  // We need to do this on disable, since our class wont be available anymore.
  if (ting_field_search_get_status()) {
    variable_del('cache_class_cache_ting');
  }
}

/**
 * Implements hook_schema().
 */
function ting_field_search_schema() {
  $schema['ting_field_search_profile'] = array(
    'description' => 'Holds the definitions of the installed search profiles.',
    'fields' => array(
      'pid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The primary identifier for a profile.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The machine name of the profile.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Profile title: Displayed to users of the site.',
      ),
      'profile' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'VIP Profile: The name of the profile as in http://vip.dbc.dk/',
      ),
      'query' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Additional CQL-code to append when using this profile',
      ),
      'config' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'Serialized profile configuration that do not warrant a single column.',
      ),
      'weight' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Profile weight: Used to order profiles in UI.',
      ),
    ),
    //'primary key' => array('name'),
    'primary key' => array('pid'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  // For performance reasons keep facet settings in a seperate table.
  // TODO: Consider moving these settings to the new config field.
  $schema['ting_field_search_facet'] = array(
    'description' => 'Holds facet settings for each profile.',
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Facet name: Name of the facet (e.g. facet.type).',
      ),
      'pid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => 'Foreign key: ID of the associated profile.',
        'default' => 0,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Facet title: The title of the facet, as shown to users in UI',
      ),
      'sorting' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'default',
        'description' => 'Facet sorting. Sorting of the terms in the facet.',
      ),
      'weight' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Facet weight: Used to order facets in the UI.'
      ),
    ),
    'primary key' => array('name', 'pid'),
    'foreign keys' => array(
      'profile' => array(
        'table' => 'ting_field_search_profile',
        'columns' => array('profile' => 'pid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function ting_field_search_requirements($phase) {
  $requirements = array();

  if ($phase != 'runtime') {
    return $requirements;
  }

  if (!ting_field_search_get_status()) {
    $requirements['ting_field_search'] = array(
      'title' => t('Ting field search'),
      'value' => t('Ting field search is NOT installed correctly and will
        not work proberly. Please go to <a href="@install">Installation</a> to
        correct this.', array(
          '@install' => url('admin/config/ting-field-search/install', array(
            'query' => drupal_get_destination()
          )),
        )
      ),
      'severity' => REQUIREMENT_ERROR,
    );
  }

  return $requirements;
}

/**
 * Helper function to load profiles in update functions.
 * For schema version 7000 -> ...
 */
function _ting_field_search_load_profiles_7000() {
  return db_select('ting_field_search_profile', 'tp')
    ->fields('tp')
    ->execute()
    ->fetchAllAssoc('name');
}

/**
 * Adds the new config field to the profile table.
 * Adds new serial primary key to profile table.
 * Update foreign key in facet table to point to the new profile primary key.
 */
function ting_field_search_update_7000() {
  // We need to migrate existing data, so fetch the profiles now.
  $profiles = _ting_field_search_load_profiles_7000();

  // The fields to be migrated to the new config field.
  $migrate_fields = array(
    'active',
    'exposed',
    'alter_links',
    'use_facets',
    'term_count',
    'facet_count',
  );
  $migrate_data = array();
  foreach ($profiles as $name => $profile) {
    $profile = (array) $profile;
    $config = array_intersect_key($profile , array_flip($migrate_fields));
    $migrate_data[$name] = $config;
  }

  // Now that we got the data; drop the fields.
  foreach ($migrate_fields as $field) {
    db_drop_field('ting_field_search_profile', $field);
  }

  // Add the config field and migrate existing data, if any.
  $config_field = array(
    'type' => 'blob',
    'size' => 'big',
    'serialize' => TRUE,
    'not null' => FALSE,
    'description' => 'Serialized profile configuration that do not warrant a single column.',
  );
  db_add_field('ting_field_search_profile', 'config', $config_field);
  foreach ($migrate_data as $name => $config) {
    db_merge('ting_field_search_profile')
      ->key(array(
        'name' => $name,
      ))
      ->fields(array(
        'config' => serialize($config),
      ))
      ->execute();
  }
  $config_field['not null'] = TRUE;
  db_change_field('ting_field_search_profile', 'config', 'config', $config_field);

  // Add new serial primary key (Profile ID).
  db_drop_primary_key('ting_field_search_profile');
  $pid = array(
    'type' => 'serial',
    'not null' => TRUE,
    'unsigned' => TRUE,
    'description' => 'The primary identifier for a profile.'
  );
  db_add_field('ting_field_search_profile', 'pid', $pid, array(
    'primary key' => array('pid'),
  ));

  // We'll still keep the machine-name as unique key, because we use it as
  // parameter in the URL and it will be necesarry for adding exportability.
  db_add_unique_key('ting_field_search_profile', 'name', array('name'));

  // By using the new profile ID as link between profiles and facet settings
  // we allow for updating of profile machine-name without too much hassle.
  db_add_field('ting_field_search_facet', 'pid', array(
    'type' => 'int',
    'not null' => TRUE,
    'unsigned' => TRUE,
    'default' => 0,
    'description' => 'Foreign key: ID of the associated profile.',
  ));
  // Load the profiles a new, so that we get the newly generated ID's.
  $profiles = _ting_field_search_load_profiles_7000();
  foreach ($profiles as $name => $profile) {
    db_update('ting_field_search_facet')
      ->fields(array('pid' => $profile->pid))
      ->condition('profile', $name)
      ->execute();
  }
  db_drop_primary_key('ting_field_search_facet');
  db_drop_field('ting_field_search_facet', 'profile');
  db_add_primary_key('ting_field_search_facet', array('name', 'pid'));
}
