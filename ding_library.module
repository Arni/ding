<?php
/**
 * @file
 * Code for the Ding library feature.
 */

/**
 * Implements hook_enable().
 */
function ding_library_enable() {
  $path = array(
    'source' => 'libraries',
    'language' => 'da',
  );
  if (!path_load($path)) {
    $path['alias'] = 'biblioteker';
    path_save($path);
  }
}



/**
 * Implements hook_block_info().
 */
function ding_library_block_info() {
  return array(
    'library_address' => array(
      'info' => 'Library address',
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'library_menu' => array(
      'info' => 'Library menu',
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_configure().
 */
function ding_library_block_configure($delta = '') {
  $form = array();
  $libraries = array(
    '' => t('None selected'),
  );
  if ($delta == 'library_address') {
    $query = db_select('node', 'n')
      ->fields('n', array('nid', 'title'))
      ->condition('type', 'ding_library')
      ->orderBy('title', 'ASC');

    foreach ($query->execute() as $row) {
      $libraries[$row->nid] = $row->title;
    }

    $form['library_nid'] = array(
      '#type' => 'select',
      '#title' => t('Library'),
      '#default_value' => variable_get('ding_library_address_nid', NULL),
      '#options' => $libraries,
      '#description' => t('The library whose address to display.'),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save
 */
function ding_library_block_save($delta = '', $edit = array()) {
  if ($delta == 'library_address') {
    variable_set('ding_library_address_nid', $edit['library_nid']);
  }
}

/**
* Implements hook_block_view().
 */
function ding_library_block_view($delta = '') {
  $block = array();
  $node = NULL;
  if ($delta == 'library_address' && (($nid = variable_get('ding_library_address_nid', '')) && ($node = node_load($nid)) || user_access('administer blocks'))) {
    $block['subject'] = t('Address');
    $block['content'] = array(
      '#theme' => 'ding_library_address',
      '#node' => $node,
    );
  }
  if ($delta == 'library_menu' && $node = node_load(arg(1))) {
    if ($node->type == 'ding_library') {
      $block['subject'] = check_plain($node->title);
      // Get default config.
      $config = menu_block_get_config();
      // Set menu level to 3.
      $config['level'] = 3;
      $data = menu_tree_build($config);
      // Add library front page link to menu.
      if (!empty($data['content']['#content'])) {
        foreach ($data['content']['#content'] as $menu) {
          if (is_array($menu) && !empty($menu['#href'])) {
            $data['content']['#content'] = array(0 => $menu) + $data['content']['#content'];
            $data['content']['#content'][0] = $menu;
            $data['content']['#content'][0]['#href'] = 'node/' . $node->nid;
            $data['content']['#content'][0]['#title'] = t('Front page');
          }
        }
    }
      $block['content'] = $data['content'];
    }
  }
  return $block;
}

/**
* Implements hook_theme().
 */
function ding_library_theme() {
  return array(
    'ding_library_address' => array(
      'render element' => 'element',
      'template' => 'ding-library-address'
    ),
  );
}

/**
 * Preprocessor.
 */
function template_preprocess_ding_library_address(&$vars) {
  $node = $vars['element']['#node'];

  // Ensure empty strings as default.
  $vars += array(
    'name' => '',
    'address' => '',
    'city' => '',
    'phone' => '',
    'fax' => '',
    'mail' => '',
  );

  if ($node) {
    $languages = field_language('node', $node);
    $vars['name'] = check_plain($node->title);
    if (!empty($node->ding_library_address[$languages['ding_library_address']][0]) && ($address = $node->ding_library_address[$languages['ding_library_address']][0])) {
      $vars['address'] = check_plain($address['thoroughfare']);
      if ($address['premise']) {
        $vars['address'] .= ', ' . $address['premise'];
      }
      $vars['city'] = join(' ', array(check_plain($address['postal_code']), check_plain($address['locality'])));
    }

    if (!empty($node->ding_library_phone[$languages['ding_library_phone']][0]) &&
      ($phone = $node->ding_library_phone[$languages['ding_library_phone']][0]['safe_value'])) {
      $vars['phone'] = t('Phone: @phone_number', array('@phone_number' => $phone));
    }

    if (!empty($node->ding_library_email[$languages['ding_library_email']][0]) &&
      ($mail = $node->ding_library_email[$languages['ding_library_email']][0])) {
      $vars['mail'] = l($mail['email'], 'mailto:' . $mail['email']);
    }
  }
  else {
    $vars['name'] = t('Please select a library to display address information for at the <a href="!link">block configuration page</a>.', array('!link' => url('admin/structure/block/manage/ding_library/library_address/configure')));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_library_form_ding_library_node_form_alter(&$form, &$form_state) {
  if (isset($form['ding_library_slug'][$form['#node']->language])) {
    $form['ding_library_slug'][$form['#node']->language][0]['#element_validate'][] = 'ding_library_slug_validate';
  }
  elseif (isset($form['ding_library_slug']['und'])) {
    $form['ding_library_slug']['und'][0]['#element_validate'][] = 'ding_library_slug_validate';
  }
}

/**
 * Implements hook_ctools_plugin_directory -
 */
function ding_library_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Custom validate handler for the slug field.
 *
 * Don't allow charecters that aren't URL friendly, such as # , etc.
 */
function ding_library_slug_validate(&$form, &$form_state) {
  // Try to get the slug value.
  if (isset($form_state['values']['ding_library_slug'][$form_state['node']->language])) {
    $slug = $form_state['values']['ding_library_slug'][$form_state['node']->language][0]['value'];
  }
  elseif (isset($form_state['values']['ding_library_slug']['und'])) {
    $slug = $form_state['values']['ding_library_slug']['und'][0]['value'];
  }

  // If we found the slug do the actual validation.
  if (!empty($slug)) {
    if (!(preg_match('/^[a-z0-9_\-]+$/', $slug))) {
      form_set_error(implode('][', $form['#parents']), t('Illeagal charecters detected, only small letters (a-z), numbers (0-9), dashes (-) and underscores (_) allowed'));
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function ding_library_views_data_alter(&$data) {
  foreach (field_info_fields() as $name => $field) {
    $name = 'field_data_' . $name;
    if ($field['type'] == 'group') {
      foreach ($data[$name] as $column => $views_data) {
        if (strpos($column, 'gid') !== FALSE) {
          $data[$name]['ding_library_nid'] = $views_data;
          unset($data[$name]['ding_library_nid']['filter']);
          unset($data[$name]['ding_library_nid']['sort']);
          $data[$name]['ding_library_nid']['title'] = str_replace('gid', 'nid', $data[$name]['ding_library_nid']['title']);
          $data[$name]['ding_library_nid']['title short'] = str_replace('gid', 'nid', $data[$name]['ding_library_nid']['title short']);
          $data[$name]['ding_library_nid']['argument']['handler'] = 'ding_library_nid_to_gid_argument';
        }
      }
    }
  }
}

include_once('ding_library.features.inc');
