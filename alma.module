<?php

/**
 * @file
 *
 */

define('ALMA_AUTH_BLOCKED', '4e5531951f55ab8f6895684999c69c2');

/**
 * Get list of pickup branches.
 */
function alma_reservation_pickup_branches($account = NULL) {
  // Cache alma pickup branches - they are not likely to change
  static $alma_pickup_branches;
  if (!isset($alma_pickup_branches)) {
    if ($cache = cache_get('alma_pickup_branches')) {
      $alma_pickup_branches = $cache->data;
    }
    else {
      $alma_pickup_branches = alma_client_invoke('get_reservation_branches');
      cache_set('alma_pickup_branches', $alma_pickup_branches, 'cache');
    }
  }
  return $alma_pickup_branches;
}

/**
 * Get a list of allowed interest periods.
 */
function alma_get_interest_periods() {
  $field_info = field_info_field('field_alma_interest_period');
  $interest_periods = isset($field_info['settings']['allowed_values']) ? $field_info['settings']['allowed_values'] : FALSE;

  return $interest_periods;
}

/**
 * Implements hook_requirements().
 */
function alma_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time.
  $t = get_t();

  if (!function_exists('simplexml_load_string')) {
    $requirements['simplexml'] = array(
      'title' => 'SimpleXML',
      'description' => $t('The Alma module requires SimpleXML to function. Please install and/or enable SimpleXML in your PHP configuration.'),
      'severity' => REQUIREMENT_ERROR,
    );
  }

  return $requirements;
}

/**
 * Implements hook_ding_provider().
 */
function alma_ding_provider() {
  $path = drupal_get_path('module', 'alma');

  return array(
    'title' => 'Alma provider',
    'settings' => 'alma_settings_form',
    'provides' => array(
      'availability' => array(
        'prefix' => 'availability',
        'file' => $path . '/includes/alma.availability.inc',
      ),
      'debt' => array(
        'prefix' => 'debt',
        'file' => $path . '/includes/alma.debt.inc',
      ),
      'loan' => array(
        'prefix' => 'loan',
        'file' => $path . '/includes/alma.loan.inc',
      ),
      'reservation' => array(
        'prefix' => 'reservation',
        'file' => $path . '/includes/alma.reservation.inc',
      ),
      'user' => array(
        'prefix' => 'user',
        'file' => $path . '/includes/alma.user.inc',
      ),
    ),
  );
}

/**
 * Form callback for provider module settings.
 *
 * This is a regular form callback.
 */
function alma_settings_form() {
  $form = array();

  $form['alma'] = array(
    '#type' => 'fieldset',
    '#title' => t('Alma service settings'),
    '#tree' => FALSE,
  );

  $form['alma']['alma_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Alma base URL'),
    '#description' => t('Base URL for Alma service.'),
    '#required' => TRUE,
    '#default_value' => variable_get('alma_base_url', ''),
  );

  $form['alma']['alma_pincode_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Length of the pin code'),
    '#default_value' => variable_get('alma_pincode_length', '4'),
    '#description' => t('The different libraries uses different pin code lenght (defaults to four).'),
  );

  $form['alma']['alma_enable_reservation_deletion'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable reservation deletion'),
    '#default_value' => variable_get('alma_enable_reservation_deletion', FALSE),
    '#description' => t('Allow users to delete their reservations as well as ready for pickup ones.'),
  );

  $form['alma']['alma_enable_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable logging'),
    '#default_value' => variable_get('alma_enable_logging', FALSE),
    '#description' => t('Logs requests to the Alma webservice. Sensitive information such as CPR number and PIN code is stripped from the requests.'),
  );

  return system_settings_form($form);
}

/**
 * Return a fully instantiated AlmaClient instance.
 */
function alma_client() {
  // This is basically a singleton. We also wait until right before
  // instantiating to include our required classes. That seems like a
  // decent performance tradeoff instead of loading everything on every
  // page load.
  static $client;
  if (!isset($client)) {
    try {
      $client = new AlmaClient(variable_get('alma_base_url', ''));
    }
    catch (Exception $e) {
      watchdog('alma', 'Constructor error: “@message”', array('@message' => $e->getMessage(), WATCHDOG_ERROR));
      return NULL;
    }

  }
  return $client;
}

/**
 * Calls the Alma backend, possibly caching the result.
 *
 * @param $method
 *   The desired method.
 * @param ...
 *   Arguments to the method.
 *
 * @return mixed
 *   NULL on error, or the result of the method call.
 */
function alma_client_invoke($method) {
  $args = func_get_args();
  array_shift($args); // Lose the method.
  $client = alma_client();

  try {
    $result = call_user_func_array(array($client, $method), $args);
  }
  catch (Exception $e) {
    watchdog('alma', '@method error: “@message”', array('@method' => $method, '@message' => $e->getMessage()), WATCHDOG_ERROR);
    throw $e;
  }

  return $result;
}

/**
 * Get the complete organisation info from Alma.
 *
 * Includes branches, departments, locations, sublocations and collections. The
 * information is cache until the cache is cleared or the reset parameter is
 * TRUE.
 *
 * @param boolean $reset
 * Optional. If TRUE reset the cached data and reload.
 * @return array
 * Array of the different organisational unit, each an array of their
 * member units.
 */
function alma_get_organisation($reset = FALSE) {
  // Return data from cache if available.
  static $organisation;
  if (!$organisation || $reset) {
    if (($cache = cache_get('alma_organisation')) && !empty($cache->data) && !$reset) {
      $organisation = $cache->data;
    }
    else {
      $organisation = array(
        'branch' => alma_client_invoke('get_branches'),
        'department' => alma_client_invoke('get_departments'),
        'location' => alma_client_invoke('get_locations'),
        'sublocation' => alma_client_invoke('get_sublocations'),
        'collection' => alma_client_invoke('get_collections'),
        'reservation' =>  alma_reservation_pickup_branches(), //alma_client_invoke('get_reservation_branches'),
      );

      // Cache output for 24 hours if we got all the data correctly.
      if ($organisation['branch'] && $organisation['department'] &&
          $organisation['location'] && $organisation['sublocation'] &&
          $organisation['collection'] && $organisation['reservation']) {
        cache_set('alma_organisation', $organisation, 'cache');
      }
    }
  }

  return $organisation;
}

/**
 * Callback function to get OpenRuth user information
 */
function _alma_user_info($creds = NULL) {
  // Get patron informations from ALMA.
  $status = alma_get_patron($creds);

  // Build basic information array, with patron information.
  $info = array(
    'firstname' => $status->name,
    'lastname' => '',
    'email' => $status->email,
    'address' => $status->address,
    'postal' => $status->postal,
    'city' => $status->city,
    'mobile' => $status->mobiles,
    'agency' => $status->branchName,
  );

  return $info;
}

/**
 * Implements hook_profile2_presave().
 *
 * Updates changes add to the profile when its saved.
 */
function alma_profile2_presave($entity) {
  // Check if the profile is just being created and is an alma_provider profile.
  // If it's being created the fields are not yet loaded and can't be saved back
  // to the provider.
  $try_to_save = ($entity->created == $entity->changed) ? FALSE : TRUE;
  if ($entity->type == 'provider_alma' && $try_to_save) {
    $changes = array();

    // Use a metadata wrapper to access the data.
    $wrapper_original = entity_metadata_wrapper('profile2', $entity->original);
    $wrapper = entity_metadata_wrapper('profile2', $entity);

    // Reservation pause
    $value = $wrapper->field_alma_reservation_pause->value();
    $start = is_null($value['value']) ? '' : $value['value'];
    $start = str_replace('T00:00:00', '', $start);
    $stop = is_null($value['value2']) ? '' : $value['value2'];
    $stop = str_replace('T00:00:00', '', $stop);

    $value = $wrapper_original->field_alma_reservation_pause->value();
    $org_start = is_null($value['value']) ? '' : $value['value'];
    $org_start = str_replace('T00:00:00', '', $org_start);
    $org_stop = is_null($value['value2']) ? '' : $value['value2'];
    $org_stop = str_replace('T00:00:00', '', $org_stop);

    if ($start != $org_start || $stop != $org_stop) {
      $changes['reservation_pause_start'] = $start;
      $changes['reservation_pause_stop'] = $stop;

      // Set absent id.
      $wrapper->field_alma_absent_id->value();
      $changes['absent_id'] = is_null($value) ? '' : $value;
    }

    // Get preferred branch (patronBranch)
    $value = $wrapper->field_alma_preferred_branch->value();
    if (!is_null($value)) {
      if ($value != $wrapper_original->field_alma_preferred_branch->value()) {
        $changes['preferred_branch'] = $value;
      }
    }

    // Mobile phone.
    $value = $wrapper->field_alma_mobile_phone->value();
    if (!is_null($wrapper_original->field_alma_mobile_phone->value())) {
      // Update mobile phone number.
      $value = is_null($value) ? 'DELETE' : $value;
      if ($value != $wrapper_original->field_alma_mobile_phone->value()) {
        $changes['mobile'] = $value;

        // Get phone id.
        $changes['phone_id'] = $wrapper->field_alma_phone_id->value();
      }
    }
    else if (!is_null($value) && is_null($wrapper_original->field_alma_mobile_phone->value())) {
      $changes['mobile'] = $value;
    }

    // Get the mail.
    $value = $wrapper->field_alma_mail->value();
    if (!is_null($value)) {
        $changes['mail'] = $value;
    }

    // Update provider
    if (!empty($changes)) {
      alma_update_provider($changes, $entity);
    }
  }
}

function alma_update_provider($changes, $entity) {
  $error_message = t('Error communicating with library system. ');

  try {
    $creds = ding_user_get_creds($entity);
  }
  catch (Exception $e) {
    // Re-throw ??
    throw $e;
  }

  // Mobile phone; add, change, delete.
  if (isset($changes['phone_id'])) {
    if ($changes['mobile'] == 'DELETE') {
      // Delete mobile.
      try {
        $res = alma_client_invoke('remove_phone_number', $creds['name'], $creds['pass'], $changes['phone_id']);
      }
      catch (Exception $e) {
        watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
      }

      if (empty($res)) {
        $error_message .= t('phone not deleted');
        drupal_set_message($error_message, 'warning');
      }
    }
    else {
      // Update mobile.
      try {
        $res = alma_client_invoke('change_phone_number', $creds['name'], $creds['pass'], $changes['phone_id'], $changes['mobile']);
      }
      catch (Exception $e) {
        watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
      }

      if (!$res) {
        $error_message .= t('mobile not updated');
        drupal_set_message($error_message, 'warning');
      }
    }
  }
  elseif (isset($changes['mobile'])) {
    // Add mobile.
    try {
      $res = alma_client_invoke('add_phone_number', $creds['name'], $creds['pass'], $changes['mobile']);
    }
    catch (Exception $e) {
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    if (!$res) {
      $error_message .= t('mobile not added');
      drupal_set_message($error_message, 'warning');
    }
  }

  // Update reservation pause (absentPeriod).
  if (!empty( $changes['absent_id']) &&
      !empty($changes['reservation_pause_start']) &&
      !empty( $changes['reservation_pause_stop'])) {

    try {
      $res =  alma_client_invoke('change_absent_period', $creds['name'], $creds['pass'], $changes['absent_id'], $changes['reservation_pause_start'], $changes['reservation_pause_stop']);
    }
    catch (Exception $e) {
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    if (empty($res)) {
      $error_message .= t('reservation pause not updated');
      drupal_set_message($error_message, 'warning');
    }
  }
  // Add reservation pause
  elseif (!empty($changes['reservation_pause_start']) && !empty($changes['reservation_pause_stop'])) {
    try {
      $res = alma_client_invoke('add_absent_period', $creds['name'], $creds['pass'], $changes['reservation_pause_start'], $changes['reservation_pause_stop']);
    }
    catch (Exception $e) {
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    if (empty($res)) {
      $error_message .= t('reservation pause not added');
      drupal_set_message($error_message, 'warning');
    }
  }
  // Delete reservation pause.
  elseif (!empty($changes['absent_id'])) {
    try {
      $res = alma_client_invoke('remove_absent_period', $creds['name'], $creds['pass'], $changes['absent_id']);
    }
    catch (Exception $e) {
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
  }

  // Update preferred branch (patronBranch).
  if (!empty($changes['preferred_branch'])) {
    try {
      $res = alma_client_invoke('change_patron_preferences', $creds['name'], $creds['pass'], $changes['preferred_branch']);
    }
    catch (Exception $e) {
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    if (empty($res)) {
      $error_message .= t('pickup branch not saved');
      drupal_set_message($error_message, 'warning');
    }
  }

  // Update email (remeber to update the drupal user account).
  if (!empty($changes['mail'])) {
    global $user;

    // Update or add mail to alma
    try {
      // Add email
      if (empty($user->mail) && !empty($changes['mail'])) {
        $res = alma_client_invoke('add_email_address', $creds['name'], $creds['pass'], $changes['mail']);
      }
      // Change email
      elseif (isset($user->mail) && !empty($changes['mail'])) {
        $res = alma_client_invoke('change_email_address', $creds['name'], $creds['pass'], $user->mail, $changes['mail']);
      }
    }
    catch (Exception $e) {
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }

    if (empty($res)) {
      $error_message .= t('mail was not saved');
      drupal_set_message($error_message, 'warning');
    }
    else {
      // Update drupal user account mail.
      $user->mail = $changes['mail'];
      user_save($user);
    }
  }
}

/**
 * Get patron data from Alma.
 *
 * @param array $creds
 *   Array with 'name' and 'pass' keys, used to authenticate user with Alma.
 * @param boolean $reset
 *   Reset static caching for this function.
 * @return stdClass
 *   Patron object.
 */
function alma_get_patron($creds = NULL, $reset = FALSE, $as_array = FALSE) {
  if (is_null($creds)) {
    // Get creds, which may throw an exception that login is required.
    global $user;
    $creds = ding_user_get_creds($user);
  }

  static $patron;
  if (!$patron || $reset) {
    $info = alma_client_invoke('get_patron_info', $creds['name'], $creds['pass'], TRUE);
    $organisation = alma_get_organisation();
    $patron = array(
      'name' => $info['user_name'],
      'email' => isset($info['mails'][0]) ? $info['mails'][0]['mail'] : '',
      'address' => isset($info['addresses'][0]) ? $info['addresses'][0]['street'] : '',
      'postal' => isset($info['addresses'][0]) ? $info['addresses'][0]['postal_code'] : '',
      'city' => isset($info['addresses'][0]) ? $info['addresses'][0]['city'] : '',
      'mobiles' => isset($info['phones']) ? $info['phones'] : '',
      'branch' => $info['preferences']['patron_branch'],
      'branchName' => $organisation['branch'][$info['preferences']['patron_branch']],
      'absentPeriods' => isset($info['absent_periods']) ? $info['absent_periods'] : '',
    );
  }
  if ($as_array) {
    return $patron;
  }

  return (object)$patron;
}

/**
 * Replace entity for the reservation in the case object in not in Ting anymore
 * or the reservation is an remote reservation.
 *
 * @param $item
 *   Provider reservation object.
 * @return
 *   Ting entity object, filled with data from provider service.
 */
function alma_replace_entity($item) {
  $faust_number = explode(':', $item->ding_entity_id);
  $faust_number = $faust_number[1];
  $alma_object = alma_client_invoke('catalogue_record_detail', $faust_number);

  if ($alma_object['request_status'] == 'ok' && isset($alma_object['records'][$faust_number])) {
    $source = $alma_object['records'][$faust_number];
    $pseudo_ting_object = new TingEntity();
    $pseudo_ting_object->tid = $faust_number;
    $pseudo_ting_object->localId = $faust_number;
    $pseudo_ting_object->ding_entity_id = $item->ding_entity_id;
    $pseudo_ting_object->reply = new TingClientObject();
    $pseudo_ting_object->reply->record['dc:title']['dkdcplus:full'] = array($source['titles'][0]);
    $pseudo_ting_object->reply->record['dc:type']['dkdcplus:BibDK-Type'] = array($source['media_class']);
    // @todo
    // Author from provider.
    $pseudo_ting_object->reply->record['dc:creator']['dkdcplus:aut'] = array('');
    $pseudo_ting_object->reply->record['dc:date'][''] = array($source['publication_year']);
    $pseudo_ting_object->ting_title = array(LANGUAGE_NONE => array(array('id' => $item->ding_entity_id)));
    $pseudo_ting_object->ting_type = array(LANGUAGE_NONE => array(array('id' => $item->ding_entity_id)));
    $pseudo_ting_object->ting_author = array(LANGUAGE_NONE => array(array('id' => $item->ding_entity_id)));
    $pseudo_ting_object->ting_cover = array(LANGUAGE_NONE => array(array('local_id' => $faust_number)));
    $pseudo_ting_object->ding_entity_type = 'ding_entity';
    $pseudo_ting_object->provider_id = $faust_number;

    return $pseudo_ting_object;
  }

  return FALSE;
}

/**
 * Implements hook_profile2_load().
 *
 * When every a profile2 profile is load this hook it called and as we are using
 * virtual fields the content has to be field in from Alma just in time. So this
 * seams to be the right place and at the same time ensure that the information
 * is not stored locally.
 *
 * Note: that the interest period is store locally in the database as alma do
 *       not have the ability to store it. So that field is not fill in here.
 *
 */
function alma_profile2_load($entities) {
  foreach ($entities as $id => &$entity) {
    if ($entity->type == 'provider_alma') {

      // User static cache to ensure that alma is not asked more than once.
      $patron = &drupal_static(__FUNCTION__);
      if (!isset($patron)) {
        // Get information from alma about the current user.
        global $user;
        try {
          $creds = ding_user_get_creds($user);
        }
        catch (DingProviderAuthException $e) {
          // The user was not logged in, hence we can't fill out the profile.
          return;
        }

        // Get uers information from alma.
        $patron = alma_get_patron($creds);
      }

      // Use a metadata wrapper to access the data.
      $wrapper = entity_metadata_wrapper('profile2', $entity);

      // Reservation pause.
      $wrapper->field_alma_reservation_pause->set(array(
        'value' => '',
        'value2' => '',
      ));
      if (isset($patron->absentPeriods[0]['from_date']) && isset($patron->absentPeriods[0]['to_date'])) {
        $wrapper->field_alma_reservation_pause->set(array(
          'value' => $patron->absentPeriods[0]['from_date'] . ' 00:00:00',
          'value2' => $patron->absentPeriods[0]['to_date'] . ' 00:00:00',
        ));
        $wrapper->field_alma_absent_id->set($patron->absentPeriods[0]['id']);
      }

      // Full name.
      $wrapper->field_alma_full_name->set($patron->name);

      // Set full address.
      $wrapper->field_alma_street_name->set($patron->address);
      $wrapper->field_alma_postal_code->set($patron->postal);
      $wrapper->field_alma_city->set($patron->city);

      // Preferred_branch.
      $wrapper->field_alma_preferred_branch->set($patron->branch);

      // Mobile; also here alma supports multiple phones - again we pick the first
      $wrapper->field_alma_mobile_phone->set(isset($patron->mobiles[0]['phone']) ? $patron->mobiles[0]['phone'] : '');
      $wrapper->field_alma_phone_id->set(isset($patron->mobiles[0]['id']) ? $patron->mobiles[0]['id'] : NULL);

      // Mail address.
      $wrapper->field_alma_mail->set($patron->email);
    }
  }
}