<?php
// $Id: field.test,v 1.47 2010/12/15 04:13:48 webchick Exp $

/**
 * @file
 * Unit test file for Ding provider.
 */

class DingProviderTestCase extends DrupalWebTestCase {

  function setUp($modules) {
    $this->profile = 'ding2';
    if (!in_array('ding_provider', $modules)) {
      $modules[] = 'ding_provider';
    }
    parent::setUp($modules);
  }

}

class DingAvailabilityProviderTestCase extends DingProviderTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Ding availability provider',
      'description' => 'Test Ding availability provider functionality.',
      'group' => 'Ding! provider',
    );
  }

  function setUp() {
    parent::setUp(array('dp_example'));
  }

  function testAvailabilityProvider() {
    $res = ding_provider_invoke('availability', 'items', array(21, 12));
    $this->assertTrue(is_array($res), t('Availability provider returns an array for items.'));
    $this->assertTrue($res[12]['available'], t('Returns available for 12.'));
    $this->assertFalse($res[21]['available'], t('Returns not available for 21.'));
    $this->assertFalse($res[12]['reservable'], t('Returns not reservable for 12.'));
    $this->assertTrue($res[21]['reservable'], t('Returns reservable  for 21.'));

    $res = ding_provider_invoke('availability', 'holdings', array(121, 212));
    $this->assertTrue(is_array($res), t('Availability provider returns an array for holdings.'));
    $this->assertTrue(is_array($res[212]['holdings']), t('Holdings is an array.'));
    $this->assertTrue(is_array($res[121]['holdings']), t('Holdings is an array.'));

    $this->assertEqual($res[212]['holdings'], array('Andeby bibliotek', 'Gåserød bibliotek'), t('Correct holdings'));
    $this->assertEqual($res[121]['holdings'], array(), t('Correct holdings'));

    $this->assertTrue($res[212]['available'], t('Returns available for 212.'));
    $this->assertFalse($res[121]['available'], t('Returns not available for 121.'));
    $this->assertFalse($res[212]['reservable'], t('Returns not reservable for 212.'));
    $this->assertTrue($res[121]['reservable'], t('Returns reservable  for 121.'));

  }
}

class DingUserProviderTestCase extends DingProviderTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Ding user provider',
      'description' => 'Test Ding user provider functionality.',
      'group' => 'Ding! provider',
    );
  }

  function setUp() {
    parent::setUp(array('dp_example'));
  }

  function testUserProvider() {
    $res = ding_provider_invoke('user', 'authenticate', 'twain', 'wain');
    $this->assertTrue($res['success'], t('Authentication works.'));
    $this->assertEqual($res['creds'], array('name' => 'twain', 'pass' => 'wain'), t('Creds are set properly.'));
    $this->assertEqual($res['user'], array('display_name' => 'Twain'), t('User properties are set properly.'));

    $this->assertTrue(ding_provider_invoke('user', 'is_authenticated', $res['creds']), t('is_authenticated returns TRUE'));


    $res = ding_provider_invoke('user', 'authenticate', 'twain', 'ain');
    $this->assertFalse($res['success'], t('Wrong password fails.'));
    $this->assertEqual($res, array('success' => FALSE), t('No other data.'));

    $res = ding_provider_invoke('user', 'authenticate', 'blockedtwain', 'wain');
    $this->assertFalse($res['success'], t('Blocked user cannot log in.'));
    $this->assertEqual($res['messages'], array(t("Sorry, you're blocked")), t('No other data.'));
  }
}
