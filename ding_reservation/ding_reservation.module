<?php

/**
 * Implementation of hook_menu().
 */
function ding_reservation_menu() {
  $items = array();

  $items['ding/reservation/%'] = array(
    'title' => 'Reserve item',
    'page callback' => 'ding_reservation_page_reserve_item',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'file' => 'ding_reservation.pages.inc',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_ting_object_buttons().
 */
function ding_reservation_ting_object_buttons($object) {
  if (!empty($object->localId)) {
    // Leave out cart buttons for some record types.
    if (in_array($object->type, array('Tidsskrift', 'Artikel', 'Netdokument', 'Lydbog (online)'))) {
      return;
    }
    
    drupal_add_js(drupal_get_path('module', 'ding_reservation') . '/ding_reservation.buttons.js');
    return l(t('Reserve now'), 'ding/reservation/' . $object->localId, array('attributes' => array('class' => 'reserve-now')));
  }	
}

/**
 * Implementation of hook_requirements().
 */
function ding_reservation_requirements($phase) {
  $ret = array();
  
  if ($phase == 'runtime') {
    // Check whether any modules will support reservations.
    $reservation_hooks = array( 'ding_library_user_create_reservation' => t('creating'), 
                                'ding_library_user_update_reservation' => t('updating'), 
                                'ding_library_user_delete_reservation' => t('deleting'),
                                'ding_library_user_get_reservations' => t('listing'),
                                'ding_library_user_has_reservation' => t('checking for'));

    $supported_actions = array();
    $missing_actions = array();
    foreach ($reservation_hooks as $hook => $action_text) {
      if (count(module_implements($hook)) > 0) {
        $supported_actions[] = $action_text;
      } else {
        $missing_actions[] = $action_text;
      }
    }
    
    if (sizeof($missing_actions) > 0) {
      // Not all hooks are supported. Report a warning.
      $warning = array();
      $warning['title'] = t('Ding reservation');
      $warning['severity'] = REQUIREMENT_WARNING;
      $warning['value'] = t('Supported actions: @actions', array('@actions' => implode(', ', $supported_actions)));
      $warning['description'] = t('No enabled modules support @actions reservations.', array('@actions' => implode(', ', $missing_actions)));

      $ret[] = $warning;
    }
  }
  
  return $ret;
}

function ding_reservation_form_ding_cart_confirm_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'ding_reservation_form_ding_cart_confirm_form_submit';
}

function ding_reservation_form_ding_cart_confirm_form_submit($form, &$form_state) {
  switch ($form_state['values']['action']) {
     case 'reserve':
       $creds = ding_library_user_get_credentials($form_state['values']['account'], FALSE);
         $has_creds = FALSE;
         foreach ($creds as $cred) {
           $has_creds |= $cred;
         }
  
       if ($has_creds) {
         $reservation = module_invoke_all('ding_library_user_create_reservation', $creds, array(
           'id' => $form_state['values']['object']->localId,
           'pickup_branch' => $form_state['values']['account']->preferred_branch,
         ));
         if ($reservation) {
           drupal_set_message(t('@item is now on your reservation list.', array('@item' => $form_state['values']['object']->title)));
         }
         else {
           drupal_set_message(t('Reservation of @item failed.', array('@item' => $form_state['values']['object']->title)));
         }
       }
       break;
   }
  
   $form_state['redirect'] = $form_state['values']['dest_url'];
}

/**
 * Implements hook_form_alter
 */
function ding_reservation_form_ding_cart_forms_cart_details_alter(&$form, &$form_state) {
  
  $interest_period = (isset($account->interest_period) && $account->interest_period > 10) ? $account->interest_period : DING_LIBRARY_USER_DEFAULT_INTEREST_PERIOD;

  $form['expiry'] = array(
    '#type'            => 'date_popup',
    '#title'           => t('Not interested after'),
    '#date_format'     => DATE_FORMAT_DATE,
    '#date_year_range' => '-0:+2',
    '#default_value'   => date('Y-m-d', $_SERVER['REQUEST_TIME'] + $interest_period * 86400),
  );
  
  $form['pickup_branch'] = array(
    '#type'          => 'select',
    '#title'         => t('Pickup branch'),
    '#options'       => module_invoke_all('ding_library_get_reservation_branches'),
    '#default_value' => $account->preferred_branch,
  );

  $form['remove'] = array(
    '#type'       => 'submit',
    '#value'      => t('Remove selected'),
    '#attributes' => array('class' => 'remove-button'),
  );

  $form['reserve'] = array(
    '#type'       => 'submit',
    '#value'      => t('Reserve selected'),
    '#attributes' => array('class' => 'reserve-button'),
  );
  $form['#submit'][] = 'ding_reservation_form_ding_cart_forms_cart_details_submit';
}

/**
 * Custom submit handler
 */
function ding_reservation_form_ding_cart_forms_cart_details_submit($form, &$form_state) {
  switch ($form_state['clicked_button']['#parents'][0]) {
    case 'reserve':
      $creds = ding_library_user_get_credentials($form_state['values']['account']);
    
      foreach ($form_state['values']['selected_items'] as $local_id) {
        $reservation = module_invoke_all('ding_library_user_create_reservation', $creds, array('id' => $local_id, 'valid_to' => $form_state['values']['expiry']), $form_state['values']['pickup_branch']);
    
        // If reservation was successful, remove the item from the cart.
        if (in_array(TRUE, $reservation)) {
          db_query("DELETE FROM {ding_cart} WHERE uid = %d AND local_id = '%s';", array(
            ':uid' => $form_state['values']['account']->uid,
            ':local_id' => $local_id,
          ));
        }
        else {
          drupal_set_message(t('Reservation of “@title” failed. It may be on your reservation list already.', array('@title' => $form['cart_data']['#value'][$local_id]['title'])), 'error');
        }
      }
      break;
  }
}
