<?php

/**
 * Implementation of hook_menu().
 */
function ding_reservation_menu() {
  $items = array();

  $items['ding/reservation/%'] = array(
    'title' => 'Reserve item',
    'page callback' => 'ding_reservation_page_reserve_item',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'file' => 'ding_reservation.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_ting_object_buttons().
 */
function ding_reservation_ting_object_buttons($object) {
  if (!empty($object->localId)) {
    // Leave out reserve buttons for some record types.
    if (in_array($object->type, array('Tidsskrift', 'Artikel', 'Netdokument', 'Lydbog (online)'))) {
      return;
    }

    drupal_add_js(drupal_get_path('module', 'ding_reservation') . '/ding_reservation.buttons.js');
    return l(t('Reserve now'), 'ding/reservation/' . $object->localId, array('attributes' => array('class' => 'reserve-now')));
  }
}

/**
 * Implementation of hook_requirements().
 */
function ding_reservation_requirements($phase) {
  $requrements = array();
  if ($phase == 'runtime') {
    $reservation_provider = ding_provider_description('reservation');

    $requrements['ding_reservation'] = array(
      'title' => t('Ding reservation'),
      'severity' => $reservation_provider ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
      'value' => $reservation_provider,
      'description' => $reservation_provider ? t('OK'): t('No reservation provider active.'),
    );
  }

  return $requrements;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ding_reservation_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_theme().
 */
function ding_reservation_theme($existing, $type, $theme, $path) {
  return array(
    'ding_reservation_list_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'ding_reservation.theme.inc',
    ),
  );
}

/**
 * Reservation details form.
 *
 * @todo Way too much logic in the theme function. Move some of it here.
 */
function ding_reservation_list_form($form_state, $account, $records) {
  // TODO: Move this variable.
  $cancel_fetchable = (boolean) variable_get('ding_library_user_cancel_fetchable_reservable', TRUE);
  $form = array();

  $form['account'] = array(
    '#type' => 'value',
    '#value' => $account,
  );

  $form['reservations'] = array(
    '#type' => 'value',
    '#grouped' => array(),
    '#value' => array(),
  );

  foreach ($records as $reservation) {
    $form['reservations']['#value'][$reservation['id']] = $reservation;
    $form['reservations']['#grouped'][$reservation['status']][$reservation['id']] = $reservation;

    if ($reservation['status'] == 'active' || ($cancel_fetchable && $reservation['status'] == 'fetchable')) {
      $options[$reservation['id']] = '';
    }
  }

  $form['selected'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
  );

  return $form;
}

/**
 * Implements hook_form_alter
 */
function ding_reservation_form_ding_cart_forms_cart_details_alter(&$form, &$form_state) {

  $interest_period = (isset($account->interest_period) && $account->interest_period > 10) ? $account->interest_period : DING_LIBRARY_USER_DEFAULT_INTEREST_PERIOD;

  $form['expiry'] = array(
    '#type' => 'date_popup',
    '#title' => t('Not interested after'),
    '#date_format' => DATE_FORMAT_DATE,
    '#date_year_range' => '-0:+2',
    '#default_value' => date('Y-m-d', $_SERVER['REQUEST_TIME'] + $interest_period * 86400),
  );

  $form['pickup_branch'] = array(
    '#type' => 'select',
    '#title' => t('Pickup branch'),
    '#options' => module_invoke_all('ding_library_get_reservation_branches'),
    '#default_value' => $account->preferred_branch,
  );

  $form['reserve'] = array(
    '#type' => 'submit',
    '#value' => t('Reserve selected'),
    '#attributes' => array('class' => 'reserve-button'),
    '#op' => 'reserve',
  );

  $form['#submit'][] = 'ding_reservation_form_ding_cart_forms_cart_details_submit';
}

/**
 * Custom submit handler
 */
function ding_reservation_form_ding_cart_forms_cart_details_submit($form, &$form_state) {
  switch ($form_state['clicked_button']['#op']) {
    case 'reserve':
      foreach ($form_state['values']['selected_items'] as $local_id) {
        $reservation = ding_provider_invoke('reservation', 'create', $form_state['values']['account'], $local_id, array('valid_to' => $form_state['values']['expiry'], 'pickup_branch' => $form_state['values']['pickup_branch']));

        // If reservation was successful, remove the item from the cart.
        if ($reservation and $reservation != DING_PROVIDER_AUTH_REQUIRED) {
          db_query("DELETE FROM {ding_cart} WHERE uid = %d AND local_id = '%s';", $form_state['values']['account']->uid, $local_id);
        }
        else {
          drupal_set_message(t('Reservation of “@title” failed. It may be on your reservation list already.', array('@title' => $form['cart_data']['#value'][$local_id]['title'])), 'error');
        }
      }
      break;
  }
}
