<?php
/**
 * @file
 * Ding user handling module.
 */

/**
 * Default seconds to cache user credentials before wiping them.
 */
define('DING_USER_DEFAULT_CREDS_LIFETIME', 99999900);

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function ding_user_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 *
 * If you do this, CTools will pick up default panels pages in
 * <modulename>.pages_default.inc
 */
function ding_user_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_menu().
 */
function ding_user_menu() {
  $items = array();

  $items['user/%user/authenticate'] = array(
    'title' => 'Authenticate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_user_authenticate_form'),
    'access callback' => 'ding_user_access',
    'access arguments' => array(1),
    'file' => 'ding_user.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ding_user_menu_alter(&$items) {
  // Hook in authentication handling to the regular user edit page.
  // But don't if page_manager overrides it.
  if (!module_exists('page_manager') || variable_get('page_manager_user_edit_disabled', TRUE)) {
    if (isset($items['user/%user/edit']) && $items['user/%user/edit']['page callback'] == 'drupal_get_form') {
      /**
       * @TODO: Are there any sites not running panels and will this work with
       *        profile2 ?
       */
      $items['user/%user/edit']['page callback'] = 'ding_provider_get_form';
    }
  }

  $items['user/%user/view']['title'] = t('User profile');
  $items['user/%user/edit']['title'] = t('Edit user profile');
  $items['user/%pm_arg/status']['title'] = t('User status');
}


/**
 * Implements hook_page_manager_contexts_alter().
 *
 * This is actually a Panels everywhere hook. In future it may be renamed:
 * hook_panels_everywhere_contexts_alter()
 *
 * Panels everywhere puts a extra form tag around the whole page on some pages.
 * This is wrong because there already is a form tag which creates an illegal html markup
 * with nested form tag.
 *
 * This happens because Panels Everwhere reuses code from panels. Because there exist a form in
 * contexts the function function panels_render_display() puts an extra form around the code.
 *
 * The code unsets the form_id in panels everywhere module order to supress the superfluous form tag
 * See Panels module: function panels_render_display()
 *
 */
function ding_user_page_manager_contexts_alter(&$contexts, $placeholders) {
  foreach ($contexts as $id => $context) {
    if (!empty($context->form_id)) {
      unset($context->form_id);
    }
  }
}


/**
 * Implements hook_entity_info_alter().
 *
 * Add new view mode used mainly to display the reservation lists in the users
 * profile (not profile2).
 */
function ding_user_entity_info_alter(&$entity_info) {
  $ding_entity_info = ding_entity_info('ding_entity');
  // Entity might not be defined yet (is the case in the installer).
  if (isset($entity_info[$ding_entity_info['entity_type']]['view modes'])) {
    // Add a user_list display mode for addon modules to use.
    $entity_info[$ding_entity_info['entity_type']]['view modes'] += array(
      'user_list' => array(
        'label' => t('User lists'),
        'custom settings' => TRUE,
      ),
    );
  }
}

/**
 * Access callback.
 *
 * Allows access if the account is the same as the logged in user.
 */
function ding_user_access($account) {
  return ($GLOBALS['user']->uid == $account->uid) && user_is_logged_in();
}

/**
 * Implements hook_cron().
 */
function ding_user_cron() {
  // Clear out expired credentials.
  cache_clear_all(NULL, 'cache_ding_user_credentials');
}

/**
 * Implements hook_form_alter().
 *
 * Modify user login form to use our backend and changes the form fields types
 * to password.
 */
function ding_user_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      $form['name']['#type'] = 'password';
      // Add our own validation handler, after the default Drupal login
      // validator.
      $pos = array_search('user_login_authenticate_validate', $form['#validate']);
      if ($pos === FALSE) {
        // Not found, insert as next to last.
        $pos = sizeof($form['#validate']) - 1;
      }
      else {
        // After, not before.
        $pos += 1;
      }
      array_splice($form['#validate'], $pos, 0, 'ding_user_user_login_validate');

    // Falling through on purpose.
    case 'ding_user_authenticate_form':
      if (isset($form_state['ajaxify'])) {
        $form['actions']['submit']['#ajax'] = array(
          'callback' => 'ding_user_authenticate_form_callback',
          'wrapper' => drupal_html_id($form_id),
        );
      }
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add pincode fields to the provider profile(s), so the users can change their
 * library pincode.
 */
function ding_user_form_profile2_form_alter(&$form, &$form_state) {
  global $user;
  if (ding_user_is_provider_user($user)) {
    // Check that it's the provider profile we are looking at.
    $provider = _ding_provider_get_provider('user');
    $provider_profile_type = 'provider_' . $provider['module'];
    if ($form_state['profile2']->type == $provider_profile_type) {
      // Add pincode change field. Defaults to 4 chars, as that seems the common
      // option, providers may form_alter this.
      $form['pincode'] = array(
        '#type' => 'password_confirm',
        '#size' => 5,
        '#maxlength' => 5,
        '#process' => array(
          'form_process_password_confirm',
          // Not adding user_form_process_password_confirm here, as it only adds
          // the strength checker, which we don't want.
          'ding_user_form_process_password_confirm',
        ),
        '#description' => t('To change the current pincode, enter the new pincode in both fields.'),
      );

      // Add submit handler to change the pincode as it's not part of the profile
      // fields.
      $form['#submit'][] = 'ding_user_profile_update_submit';
    }
  }
}

/**
 * Password confirm element process.
 *
 * Add in handling of #maxlength and change the titles of the fields.
 */
function ding_user_form_process_password_confirm($element) {
  if (!empty($element['#maxlength'])) {
    $element['pass1']['#maxlength'] = $element['pass2']['#maxlength'] = $element['#maxlength'];
    // Unset #maxlength, or _form_validate will attempt to check the length of
    // this element, whose value will be an array.
    unset($element['#maxlength']);
  }

  // Fixup the titles.
  $element['pass1']['#title'] = t('Pincode');
  $element['pass2']['#title'] = t('Confirm pincode');

  return $element;
}

/**
 * Updates the users pincode as part of the profile update. It's done in this
 * submit function as the pincode is not part of provider profile and this
 * esures that it never in any way get stored in the DB.
 *
 * Furthermore the pincode fields are injected into the profile form in the form
 * alter above as there is not password field available, that would not store it
 * in the database.
 *
 * @global type $user
 * @param type $form
 * @param type $form_state
 */
function ding_user_profile_update_submit(&$form, &$form_state) {
  $pincode = isset($form_state['values']['pincode']) ? $form_state['values']['pincode'] : '';
  // If pincode is not empty, it's changed.
  if (!empty($pincode)) {
    global $user;
    try {
      $update_res = ding_provider_invoke('user', 'account_update', $user, array('pass' => $pincode));
      if (!empty($update_res['creds'])) {
        // Updated drupal credational
        ding_user_save_creds($update_res, $user);
        /**
         * @TODO: This have to be removed and moved to a session update.
         */
      }
    }
    catch (Exception $execption) {
      // If update_account fails, we're in trouble, as we're too far in to
      // set form errors. So we'll just tell the user that it couldn't be, and
      // not save the fields.
      drupal_set_message(t("There was a problem communicating with library system. Please contact the site administrator."), 'error');
      watchdog_exception('ding_user', $execption);
      drupal_set_message(t("New pincode not saved."), 'error');
    }
  }
}

/**
 * Create the profile type for the given provider.
 *
 * This is a fallback in case the provider didn't create one.
 */
function ding_user_create_profile_type($provider) {
  $provider_profile_type = 'provider_' . $provider['module'];
  $profile_type = new ProfileType(
    array(
      'type' => $provider_profile_type,
      'label' => t('Provider profile for ' . $provider['title']),
      'userCategory' => TRUE,
      'userView' => TRUE,
    )
  );
  $profile_type->save();
  return $profile_type;
}

/**
 * Get the provider profile for the given user.
 */
function ding_user_provider_profile($account) {
  $provider = _ding_provider_get_provider('user');
  $provider_profile_type = 'provider_' . $provider['module'];

  return profile2_load_by_user($account, $provider_profile_type);
}

/**
 * Implements hook_user_logout().
 *
 * Lets user stays on page, after logout.
 */
function ding_user_user_logout($account) {
  // Ensure the credentials is removed from cache.
  cache_clear_all(session_name() . '-' . $account->uid, 'cache_ding_user_credentials');
  // ... both HTTP and HTTPS.
  cache_clear_all(substr(session_name(), 1) . '-' . $account->uid, 'cache_ding_user_credentials');
}

/**
 * Implements hook_username_alter().
 *
 * @TODO: This do not work with the display name moved into the profile2
 *        provider profile. Maybe change it to use real name module ?
 *        Look at ding_user_update_user().
 *
 * @TODO: This is called 6-7 times on the admin edit user page ?
 *
 * Use display_name.
 */
function ding_user_username_alter(&$name, $account) {
  if (isset($account->data)) {
    if (is_string($account->data)) {
      $data = unserialize($account->data);
    }
    else {
      $data = $account->data;
    }

    if (!empty($data) && isset($data['display_name'])) {
      $name = $data['display_name'];
    }
  }
}

/**
 * Implements hook_ding_provider_user().
 */
function ding_user_ding_provider_user() {
  return array(
    'user' => array(
      'required' => TRUE,
      'install time setup' => TRUE,
    ),
  );
}

/**
 * Return the page to redirect user to in order to authenticate/log
 * in. Used by ding_provider.
 */
function ding_user_auth_page() {
  global $user;
  if (user_is_logged_in()) {
    return 'user/' . $user->uid . '/authenticate';
  }
  return 'user/login';
}

/**
 * Return a local hash for the given name.
 *
 * As logins may be CPR numbers, which is really sensitive information, we use
 * a hash of the name and the Drupal private key as authname.
 */
function ding_user_default_authname($name) {
  // If another password.inc is in use, that doesn't define
  // _password_base64_encode(), we'll fail horribly. We'll probably need to
  // define our own base64 function, but we'll cross that bridge when we reach
  // it.
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  /**
   * A sha512 is 64 bytes, which becomes 128 hexadecimal chars, which is
   * exactly the size of the authname field in the database. So we ask hash
   * for binary data and lets _password_base64_encode base64 encode it to 86
   * characters, leaving enough room for our suffix.
   */
  $hash = hash('sha512', drupal_get_private_key() . $name, TRUE);
  return _password_base64_encode($hash, drupal_strlen($hash)) . '@ding_user';
}

/**
 * Custom validator for the login form.
 *
 * Handles authentication with provider, and setting up a profile2 for the
 * user/provider.
 */
function ding_user_user_login_validate($form, &$form_state) {
  // If $form_state['uid'] is set and has a true value, Drupal already found a
  // user, so we don't bother. Also, we require name and pass.
  if (isset($form_state['uid']) && $form_state['uid'] || empty($form_state['values']['name']) || empty($form_state['values']['pass'])) {
    // Normal Drupal user have been logged in.
    return;
  }
  try {
    // Try loggin the user into the provider.
    $auth_res = ding_provider_invoke('user', 'authenticate', $form_state['values']['name'], $form_state['values']['pass']);
    if (!is_array($auth_res) || !isset($auth_res['success'])) {
      watchdog('ding_user', 'Provider returned invalid result: @res', array('@res' => print_r($auth_res, TRUE)), WATCHDOG_DEBUG);
      return;
    }

    if ($auth_res['success']) {
      if (isset($auth_res['authname']) && !empty($auth_res['authname'])) {
        // If provider supplied an authname, use it.
        $auth_name = $auth_res['authname'];
      }
      else {
        // Else use a standard authname.
        $auth_name = ding_user_default_authname($form_state['values']['name']);
      }

      $account = _ding_user_create_account($auth_name, $auth_res);

      // Save credentials for later. Do it early as the provider might expect
      // them in a hook_profile2_presave hook trigged by us saving a new
      // profile, or themselves in the profile_init callback.
      /**
       * @TODO: this stores the info in clear text... FIX IT.
       */
      ding_user_save_creds($auth_res, $account);

      // Log user in.
      $form_state['uid'] = $account->uid;
      // We're not calling user_login_submit like user_external_login_register
      // does, it's already the submit handler.
      /**
       *  @TODO: Do we still need this ?
       */
      if (ding_provider_implements('user', 'authenticate_finalize')) {
        ding_provider_invoke('user', 'authenticate_finalize', $account);
      }
    }
    else {
      if (isset($auth_res['messages'])) {
        foreach ($auth_res['messages'] as $message) {
          $type = 'warning';
          if (is_array($message)) {
            list($message, $type) = $message;
          }
          drupal_set_message(check_plain($message), $type);
        }
      }
    }
  } catch (DingProviderException $e) {
    // Exception thrown, log error and carry on.
    watchdog('ding_user', 'Provider exception, message: @message', array('@message' => $e->getMessage()), WATCHDOG_ERROR);
  }
}

/**
 * Create a provider account for drupal. Username will be a hashvalue of authname.
 * This account will be coupled with the provider user via the authmap table
 **/
function _ding_user_create_account($auth_name, $auth_res) {
  // We'd like to use user_external_login_register(), but it saves the user
  // and invokes hook_user_login before we have a chance to mess with it. So
  // we do what it would do.
  $account = user_external_load($auth_name);
  if (!$account) {
    // Register this new user.
    $userinfo = array(
      // Name is only 60 chars, and authname is longer. Use a shorter SHAE1
      // hash.
      'name' => hash('sha1', $auth_name),
      'pass' => user_password(),
      'init' => $auth_name,
      'status' => 1,
      'access' => REQUEST_TIME,
      'mail' => '',
    );

    if (isset($auth_res['user'])) {
      $userinfo = array_merge($userinfo, $auth_res['user']);
    }

    $account = user_save(drupal_anonymous_user(), $userinfo);
    // Terminate if an error occurred during user_save().
    if (!$account) {
      drupal_set_message(t("Error saving user account."), 'error');
      return;
    }
    user_set_authmaps($account, array("authname_ding_user" => $auth_name));
  }
  else {
    ding_user_update_user($auth_res, $account);
  }
  return $account;
}

/**
 * Implements hook_profile2_access().
 *
 * Only allows logged in users to see profile2 tabs and only there own tabs and
 * also only if the user is logged in through a ding provider.
 *
 */
function ding_user_profile2_access($op, $profile = NULL, $account = NULL) {
  if (user_is_logged_in() && ($GLOBALS['user']->uid === $profile->uid)) {
    if (empty($profile) || ding_user_is_provider_user($profile)) {
      // This disables the tabs in the user profile and as we never want the
      // user to user the path... but only the panels extension. This will be
      // okay for now.
      return FALSE;
    }
    else {
      $provider = _ding_provider_get_provider('user');
      $provider_profile_type = 'provider_' . $provider['module'];
      if ($provider_profile_type == $profile->type) {
        // Don't show provider profile to no provider user eiter.
        return FALSE;
      }
      // Show all other profiles.
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Create a profile2 provider profile for the account, if one do not exists.
 *
 * @param entity $account
 *  Drupal user account object.
 * @return entity $profile
 *  The newly create profile or the existing one.
 */
function _ding_user_create_profile2($account) {
  $profile = ding_user_provider_profile($account);
  if (!$profile) {
    $provider = _ding_provider_get_provider('user');
    $provider_profile_type = 'provider_' . $provider['module'];

    /**
     * @TODO: Move this into the install/fetures file of the provider.
     */
    // Check that we have a profile type for this provider.
    if (!$profile_type = profile2_type_load($provider_profile_type)) {
      // Create new type, if provider haven't.
      $profile_type = ding_user_create_profile_type($provider);
    }

    // Create a profile for current user.
    $profile = new Profile(
      array(
        'user' => $account,
        'type' => $profile_type,
      )
    );

    // Bind this profile to the user.
    $profile->save();
  }
  return $profile;
}

/**
 * Implements hook_forms().
 *
 * Enables the profile2 form panels pane to generate a form for a profile2
 * enity. The code is largely taken from the profile2 page module, but we only
 * which this part of the module.
 */
function ding_user_forms($form_id, $args) {
  // For efficiency, only act if the third argument is 'profile2'.
  if (isset($args[2]) && is_string($args[2]) && $args[2] == 'profile2') {
    // Reuse profile2 page extension code.
    include_once drupal_get_path('module', 'profile2') . '/contrib/profile2_page.inc';

    $info = entity_get_info('profile2');
    // Translate bundle form ids to the base form id 'profile2_form'.
    $forms = array();
    foreach ($info['bundles'] as $bundle => $bundle_info) {
      $forms['profile2_edit_' . $bundle . '_form']['callback'] = 'profile2_form';
      $forms['profile2_edit_' . $bundle . '_form']['wrapper callback'] = 'entity_ui_form_defaults';
    }
    return $forms;
  }
}

/**
 * Ajax command to authenticate. Used by ding_provider.
 */
function ajax_command_ding_user_authenticate($extra_data) {
  global $user, $language;
  // @todo add support for user/login here.
  module_load_include('inc', 'ding_user', 'ding_user.pages');
  if ($user->uid) {
    $title = t('Authenticate');
    $form_id = 'ding_user_authenticate_form';
  }
  else {
    $title = t('Login');
    $form_id = 'user_login';
  }

  // Change default ajax action to default login form's if https is enabled.
  if (variable_get('https', FALSE)) {
    $form = drupal_get_form('user_login');
    $url = parse_url($_SERVER['HTTP_REFERER']);
    $path_start = strpos($_SERVER['HTTP_REFERER'], '/', strlen($url['scheme']) + 3);
    $referer = substr($_SERVER['HTTP_REFERER'], $path_start + 1);
    // Filter out any language prefixes as it will be automatically added to the URL again.
    if (!empty($language->language) && preg_match('/' . $language->prefix . '/', $referer) > 0) {
      $referer = preg_replace('/' . $language->prefix . '\//', '', $referer);
    }
    $form['#action'] = 'https://' . $_SERVER['SERVER_NAME'] . url('user/login') . '?destination=' . $referer;
  }
  else {
    $form_state = array(
      'ajaxify' => TRUE,
    );
    $form = drupal_build_form($form_id, $form_state);
  }

  $login_form = drupal_render($form);
  return ajax_command_ding_popup('ding_user', $title, $login_form, array('resubmit' => TRUE, 'extra_data' => $extra_data));
}

/**
 * Ajax callback.
 */
function ding_user_authenticate_form_callback($form, &$form_state) {
  switch ($form['form_id']['#value']) {
    case 'ding_user_authenticate_form':
      $success = $form_state['authentication_success'];
      break;
    case 'user_login':
      $success = !empty($form_state['uid']);
      break;
  }

  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );
  if ($success) {
    // Close dialog if successful.
    $response['#commands'][] = ajax_command_ding_popup_close('ding_user');
  }
  else {
    // Else redisplay form and messages.
    $html = theme('status_messages') . drupal_render($form);
    $response['#commands'][] = ajax_command_ding_popup('ding_user', t('Authenticate'), $html);
  }

  return $response;
}

/**
 * Return cached creds for a user.
 *
 * Throws DingProviderAuthException if not authenticated.
 *
 * @param $account The user to get creds for.
 */
function ding_user_get_creds($account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }
  if ($cache = cache_get(session_name() . '-' . $account->uid, 'cache_ding_user_credentials')) {
    // Check that the credentials is valid.
    // note: Only the Alma provider implements 'is_authenticated', and it simply checks if login and password is set.
    // So: If the user is cached, $cache->data is returned in any case.
    if (ding_provider_implements('user', 'is_authenticated')) {
      if (ding_provider_invoke('user', 'is_authenticated', $cache->data)) {
        return $cache->data;
      }
    }
    else {
      return $cache->data;
    }
  }

  $roles = array_values($GLOBALS['user']->roles);

  // Log out user who are authenticated but has no other roles (i.e. ding user)
  if (user_is_logged_in() && sizeof($roles) == 1 && $roles[0] == 'authenticated user') {
    // unless we're using persistent login, and they have a persistent login cookie.
    if (module_exists('ding_persistent_login') && $creds = ding_persistent_login_get_creds($account->uid)) {
      return $creds;
    }

    if (isset($account->data['password']) && $account->data['password'] == 'reset') {
      unset($account->data['password']);
      $creds = array('username' => $account->mail, 'password' => '');
      ding_user_save_creds(array('creds' => $creds), $account);
      return $creds;
    }

    watchdog('user', 'Session timeout for %name.', array('%name' => $account->name));
    user_module_invoke('logout', $account, 'user');

    session_destroy();

    $GLOBALS['user'] = drupal_anonymous_user();
    drupal_set_message(t('Your session has timed out.', array(), array('context' => 'ding_user')));
    drupal_goto();
  }
  throw new DingProviderAuthException;
}

/**
  * Update account with information from provider.
  */
function ding_user_update_user($auth_res, &$account) {
  foreach ($auth_res['user'] as $key => $value) {
    if ($key == 'data') {
      // Special handling for data array. We're using == as ===
      // also checks order, and we don't need the extra type
      // check.
      if ($account->$key == $value) {
        unset($auth_res['user'][$key]);
      }
    }
    elseif (isset($account->$key) && $account->$key === $value) {
      unset($auth_res['user'][$key]);
    }
  }
  if (!empty($auth_res['user'])) {
    // Save account if there's any changes.
    $account = user_save($account, $auth_res['user']);
  }
}

/**
  * Cache user creds locally.
  */
function ding_user_save_creds($auth_res, $account) {
  if (isset($auth_res['creds'])) {
    cache_set(session_name() . '-' . $account->uid, $auth_res['creds'], 'cache_ding_user_credentials', REQUEST_TIME + variable_get('ding_user_creds_lifetime', DING_USER_DEFAULT_CREDS_LIFETIME));
    // The credential have been saved for secure session, let's clone them for non-secured pages.
    if (variable_get('https', FALSE)) {
      cache_set(substr(session_name(), 1) . '-' . $account->uid, $auth_res['creds'], 'cache_ding_user_credentials', REQUEST_TIME + variable_get('ding_user_creds_lifetime', DING_USER_DEFAULT_CREDS_LIFETIME));
    }
  }
  // also update persistent login, if installed.
  if (module_exists('ding_persistent_login')) {
    ding_persistent_login_save_creds($account->uid, $auth_res['creds']);
  }
}

/**
 * Check if the given account is a user authenticated through a provider.
 */
function ding_user_is_provider_user($account) {
  static $names;
  if (!isset($names)) {
    $names = db_select('authmap')
      ->fields('authmap', array('authname'))
      ->condition('module', 'ding_user')
      ->condition('uid', $account->uid)
      ->execute()->fetchAll();
  }
  return !empty($names);
}

include_once('ding_user_comments.inc');

/**
 * Implementing specific cache for DingUserCredentials due to the fact that
 * entity module renders all non-permanent cache invalid when calling
 * cache_clear_all. It is only necessary to override prepareItem metode because
 * we need it to check against expire timestamp instead of created timestamp.
 */
class DingUserCredentialsCache extends DrupalDatabaseCache {

  function getMultiple(&$cids) {
    try {
      // Garbage collection necessary when enforcing a minimum cache lifetime.
      $this->garbageCollection($this->bin);

      // When serving cached pages, the overhead of using db_select() was found
      // to add around 30% overhead to the request. Since $this->bin is a
      // variable, this means the call to db_query() here uses a concatenated
      // string. This is highly discouraged under any other circumstances, and
      // is used here only due to the performance overhead we would incur
      // otherwise. When serving an uncached page, the overhead of using
      // db_select() is a much smaller proportion of the request.
      $result = db_query('SELECT cid, data, created, expire, serialized FROM {' . db_escape_table($this->bin) . '} WHERE cid IN (:cids)', array(':cids' => $cids));
      $cache = array();
      foreach ($result as $item) {
        $item = $this->prepareItem($item);
        if ($item) {
          $cache[$item->cid] = $item;
          // postpone expire ding user credentials
          db_update($this->bin)
            ->fields(array('expire' => REQUEST_TIME + variable_get('ding_user_creds_lifetime', DING_USER_DEFAULT_CREDS_LIFETIME)))
            ->condition('cid', $item->cid)
            ->execute();
        }
      }
      $cids = array_diff($cids, array_keys($cache));
      return $cache;
    }
    catch (Exception $e) {
      // If the database is never going to be available, cache requests should
      // return FALSE in order to allow exception handling to occur.
      return array();
    }
  }

  /**
   * Prepare a cached item.
   *
   * Checks that items are either permanent or did not expire, and unserializes
   * data as appropriate.
   *
   * @param $cache
   *   An item loaded from cache_get() or cache_get_multiple().
   * @return
   *   The item with data unserialized as appropriate or FALSE if there is no
   *   valid item to load.
   */
  protected function prepareItem($cache) {
    global $user;

    if (!isset($cache->data)) {
      return FALSE;
    }
    if ($cache->expire != CACHE_PERMANENT && REQUEST_TIME > $cache->expire) {
      // This cache data is too old and thus not valid for us, ignore it.
      return FALSE;
    }

    if ($cache->serialized) {
      $cache->data = unserialize($cache->data);
    }

    return $cache;
  }

}
