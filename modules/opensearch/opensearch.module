<?php
/**
 * @file
 * Drupal implementation of a OpenSearch search provider for the DING! project.
 */

use Drupal\xautoload\Adapter\LocalDirectoryAdapter;

define('OPENSEARCH_DEFAULT_CACHE_LIFETIME', 900);

/**
 * Implements hook_ding_provider().
 */
function opensearch_ding_provider() {
  return array(
    'title' => 'Opensearch',
    'settings' => 'opensearch_admin_settings',
    'provides' => array(
      'search' => array(
        'prefix' => 'search',
        'file' => 'includes/opensearch.search.inc',
      ),
    ),
  );
}

/**
 * Form builder; Configure Opensearch settings for this site.
 *
 * @ingroup forms
 *
 * @see system_settings_form()
 */
function opensearch_admin_settings($form_state) {
  $form = array();

  $form['opensearch'] = array(
    '#type' => 'fieldset',
    '#title' => t('Opensearch service settings'),
    '#tree' => FALSE,
  );

  // TODO BBS-SAL: Consider alternate handling of Ting agency.
  // This value has multiple purposes:
  // - As configuration when accessing OpenSearch
  // - As an unique identifier for the library organization in other parts of
  //   the system
  // Consider whether the variable should be kept (and moved back to the Ting
  // module) or renamed to opensearch_agency and use cases updated so that
  // other providers also can provide a unique identifier.
  $form['opensearch']['ting_agency'] = array(
    '#type' => 'textfield',
    '#title' => t('Library code'),
    '#description' => t('The 6-digit code representing the library organization'),
    '#default_value' => variable_get('ting_agency', ''),
  );

  $form['opensearch']['opensearch_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Search service URL'),
    '#description' => t('URL to the Ting search webservice, e.g. http://opensearch.addi.dk/3.0/'),
    '#required' => TRUE,
    '#default_value' => variable_get('opensearch_url', ''),
  );

  $form['opensearch']['authentification'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication'),
    '#tree' => FALSE,
  );

  $form['opensearch']['authentification']['opensearch_use_auth'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use authentication'),
    '#default_value' => variable_get('opensearch_use_auth', FALSE),
    '#description' => t('Use authentication rather than rely on IP granted access.'),
  );

  $auth_states = array(
    'enabled' => array(
      'input[name=opensearch_use_auth]' => array('checked' => TRUE),
    ),
  );

  $form['opensearch']['authentification']['opensearch_auth_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => variable_get('opensearch_auth_name', ''),
    '#states' => $auth_states,
  );

  $form['opensearch']['authentification']['opensearch_auth_pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('opensearch_auth_pass', ''),
    '#states' => $auth_states,
  );

  $form['opensearch']['authentification']['opensearch_auth_group'] = array(
    '#type' => 'textfield',
    '#title' => t('Group'),
    '#default_value' => variable_get('opensearch_auth_group', ''),
    '#states' => $auth_states,
  );

  $form['opensearch']['opensearch_recommendation_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Recommendation service URL'),
    '#description' => t('URL to the recommendation webservice (Andre der har lÃ¥nt...) , e.g. http://openadhl.addi.dk/1.1/'),
    '#required' => FALSE,
    '#default_value' => variable_get('opensearch_recommendation_url', ''),
  );

  $form['opensearch']['opensearch_enable_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable logging'),
    '#default_value' => variable_get('opensearch_enable_logging', FALSE),
    '#weight' => 1,
  );

  $intervals = array(
    60,
    300,
    900,
    1800,
    3600,
    10800,
    43200,
    86400,
    259200,
    604800,
  );

  $options = array();
  foreach ($intervals as $interval) {
    $options[$interval] = format_interval($interval, 2);
  }

  $form['opensearch']['opensearch_cache_lifetime'] = array(
    '#type' => 'select',
    '#title' => t('Cache lifetime'),
    '#default_value' => variable_get('opensearch_cache_lifetime', OPENSEARCH_DEFAULT_CACHE_LIFETIME),
    '#options' => $options,
    '#description' => t("Cache answers from the datawell for this time. At least a few minutes is recommended, so the same objects doesn't have to be fetched on each page request."),
    '#weight' => 1,
  );

  // TODO BBS-SAL: Search profiles are a opensearch concept. Parts of it could
  // probably be kept search provider independent.
  $form['opensearch']['ting_search_profile'] = array(
    '#type' => 'textfield',
    '#title' => t('Search profile'),
    '#description' => t('Profile name, used for filtering the search based on settings from vip.dbc.dk.'),
    '#default_value' => variable_get('ting_search_profile', ''),
  );

  /**
   * Autocomplete settings.
   */
  $form['opensearch_autocomplete'] = array(
    '#type' => 'fieldset',
    '#title' => t('Opensearch autocomplete settings'),
    '#tree' => FALSE,
  );

  $default_settings = opensearch_search_autocomplete_settings();

  // Attach the CSS to the form
  $form['opensearch_autocomplete']['#attached'] = array(
    'css' => array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'opensearch') . '/css/opensearch_autocomplete_admin_form.css',
    ),
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_webservice'] = array(
    '#type' => 'fieldset',
    '#title' => t('Autocomplete URL', array(), array('context' => 'opensearch_search_autocomplete')),
    '#tree' => FALSE,
    '#collapsible' => TRUE,
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_webservice']['opensearch_search_autocomplete_suggestion_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Autocomplete URL', array(), array('context' => 'opensearch_search_autocomplete')),
    '#size' => 73,
    '#description' => t('URL to Autocomplete webservice. F.ex.: http://opensuggestion.addi.dk/1.0/', array(), array('context' => 'opensearch_search_autocomplete')),
    '#default_value' => variable_get('opensearch_search_autocomplete_suggestion_url',
      NULL),
    '#required' => TRUE,
    '#element_validate' => array('opensearch_search_autocomplete_admin_validate'),
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_webservice']['opensearch_search_autocomplete_method'] = array(
    '#type' => 'textfield',
    '#title' => t('Autocomplete method', array(), array('context' => 'opensearch_search_autocomplete')),
    '#size' => 73,
    '#description' => t('The method to use. Currently there are two methods: terms and facets. Version 2.0 exposes facetSpell method', array(), array('context' => 'opensearch_search_autocomplete')),
    '#default_value' => variable_get('opensearch_search_autocomplete_method',
      'facets'),
    '#required' => TRUE,
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Autocomplete settings', array(), array('context' => 'opensearch_search_autocomplete')),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings']['index'] = array(
    '#type' => 'textfield',
    '#title' => t('Match index', array(), array('context' => 'opensearch_search_autocomplete')),
    '#size' => 25,
    '#default_value' => $default_settings['index'],
    '#required' => TRUE,
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings']['facetIndex'] = array(
    '#type' => 'textfield',
    '#title' => t('Facet Index', array(), array('context' => 'opensearch_search_autocomplete')),
    '#size' => 25,
    '#default_value' => $default_settings['facetIndex'],
    '#required' => TRUE,
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings']['filterQuery'] = array(
    '#type' => 'textfield',
    '#title' => t('Filter Query', array(), array('context' => 'opensearch_search_autocomplete')),
    '#size' => 25,
    '#default_value' => $default_settings['filterQuery'],
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings']['sort'] = array(
    '#type' => 'radios',
    '#title' => t('Output sort order', array(), array('context' => 'opensearch_search_autocomplete')),
    '#options' => array('count' => 'count', 'index' => 'index'),
    '#default_value' => $default_settings['sort'],
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings']['agency'] = array(
    '#type' => 'textfield',
    '#title' => t('Agency', array(), array('context' => 'opensearch_search_autocomplete')),
    '#size' => 26,
    '#default_value' => $default_settings['agency'],
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings']['profile'] = array(
    '#type' => 'textfield',
    '#title' => t('Profile', array(), array('context' => 'opensearch_search_autocomplete')),
    '#size' => 26,
    '#default_value' => $default_settings['profile'],
  );
  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings']['maxSuggestions'] = array(
    '#type' => 'textfield',
    '#title' => t('Max suggestions', array(), array('context' => 'opensearch_search_autocomplete')),
    '#size' => 26,
    '#default_value' => $default_settings['maxSuggestions'],
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings']['maxTime'] = array(
    '#type' => 'textfield',
    '#title' => t('Max request time', array(), array('context' => 'opensearch_search_autocomplete')),
    '#size' => 26,
    '#default_value' => $default_settings['maxTime'],
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings']['highlight'] = array(
    '#type' => 'checkbox',
    '#title' => t('Highlight', array(), array('context' => 'opensearch_search_autocomplete')),
    '#description' => t('If checked, search prefix will be enclosed in highlight prefix and suffix', array(), array('context' => 'opensearch_search_autocomplete')),
    '#default_value' => $default_settings['highlight'],
    '#return_value' => 'true',
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings']['highlight.pre'] = array(
    '#type' => 'textfield',
    '#title' => t('Highlight prefix', array(), array('context' => 'opensearch_search_autocomplete')),
    '#size' => 26,
    '#default_value' => $default_settings['highlight.pre'],
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings']['highlight.post'] = array(
    '#type' => 'textfield',
    '#title' => t('Highlight suffix', array(), array('context' => 'opensearch_search_autocomplete')),
    '#size' => 26,
    '#default_value' => $default_settings['highlight.post'],
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_settings']['minimumString'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum string', array(), array('context' => 'opensearch_search_autocomplete')),
    '#description' => t('Minimum string length to do autocomplete lookup on
    .', array(), array('context' => 'opensearch_search_autocomplete')),
    '#size' => 26,
    '#default_value' => $default_settings['minimumString'],
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_help'] = array(
    '#type' => 'fieldset',
    '#title' => t('Autocomplete help', array(), array('context' => 'opensearch_search_autocomplete')),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['opensearch_autocomplete']['opensearch_search_autocomplete_help']['description'] = array(
    '#theme' => 'table',
    '#rows' => array(
      array(t('Match index:', array(), array('context' => 'opensearch_search_autocomplete')),
        t('The index to find word matches in.<br/>
               If a term index, single terms are returned, while phrase indexes return entire phrases. Only entries in the specified index that begin with the specified query string are returned. For term indexes the query string can only contain one term<br/>
               F.ex.: scanterm.mainTitle + query: "kan" will match "<b>Kan</b>dis", or scanphrase.mainTitle + query: "kan" will match "<b>Kan</b>sas city"', array(), array('context' => 'opensearch_search_autocomplete'))),
      array(t('Facet index:', array(), array('context' => 'opensearch_search_autocomplete')),
        t('The index to get suggestions from.<br/>
               This variant looks in the specified index for entries that contain the words from specified query string and then counts results in groups based on the specified facet index. This will also provide suggestions for phrases that contain the words from the query string.<br/>
               Care should be taken in selecting a suitable pair of indexes. The facet index should be an index generated from the same data as the match index. The match index should be a term index and the facet index should be a phrase index<br/>
               F.ex.: scanphrase.mainTitle (combined with match index: scanterm.mainTitle) + query: "kan" will match "From Impressionism to <b>Kan</b>dinsky"', array(), array('context' => 'opensearch_search_autocomplete'))),
      array(t('Query filter:', array(), array('context' => 'opensearch_search_autocomplete')),
        t('A query that may be used to filter the area you want to get suggestions from. F.ex.: term.workType=literature', array(), array('context' => 'opensearch_search_autocomplete'))),
      array(t('Output sort order:', array(), array('context' => 'opensearch_search_autocomplete')), t('Defaults to "count"', array(), array('context' => 'opensearch_search_autocomplete'))),
      array(t('Agency:', array(), array('context' => 'opensearch_search_autocomplete')),
        t('Only get suggestions from data accessible to the specified library ID. F.ex.: 715100', array(), array('context' => 'opensearch_search_autocomplete'))),
      array(t('Profile:', array(), array('context' => 'opensearch_search_autocomplete')),
        t('Only get suggestions from data accessible to the specified search profile, as defined in the VIP database.', array(), array('context' => 'opensearch_search_autocomplete'))),
      array(t('Max suggestions:', array(), array('context' => 'opensearch_search_autocomplete')),
        t('Maximum suggestions to return. Default 10', array(), array('context' => 'opensearch_search_autocomplete'))),
      array(t('Max request time:', array(), array('context' => 'opensearch_search_autocomplete')),
        t('Maximum request time in milliseconds. Default 2000', array(),
          array('context' => 'opensearch_search_autocomplete'))),
      array(t('Highlight:', array(), array('context' => 'opensearch_search_autocomplete')),
        t('Add prefix and suffix around strings that match the query.', array
        (), array('context' => 'opensearch_search_autocomplete'))),
      array(t('Highlight prefix & suffix:', array(), array('context' => 'opensearch_search_autocomplete')),
        t('Defaults to &lt;em&gt; & &lt;/em&gt;.', array(), array('context'
        => 'opensearch_search_autocomplete'))),
      array(t('Minimum string:', array(), array('context' => 'opensearch_search_autocomplete')),
        t('Minimum characters the user has to type before the suggestionservice is queried.', array(), array('context' => 'opensearch_search_autocomplete'))),
    ),
    '#attributes' => array('class' => array('table-class')),
    '#empty' => t('Your table is empty'),
  );

  return system_settings_form($form);
}

/**
 * Validation handler for opensearch_search_autocomplete_admin
 */
function opensearch_search_autocomplete_admin_validate($form, &$form_state) {
  $form_state['values']['opensearch_search_autocomplete_suggestion_url'] = trim
  ($form_state['values']['opensearch_search_autocomplete_suggestion_url']);
}

/**
 * Get settings, and merge with defaults.
 * @return array
 */
function opensearch_search_autocomplete_settings() {
  $settings = array();

  $base_settings['index'] = NULL;
  $base_settings['facetIndex'] = NULL;
  $base_settings['filterQuery'] = NULL;
  $base_settings['sort'] = 'count';

  $base_settings['agency']  = variable_get('ting_agency', NULL);
  $base_settings['profile'] = variable_get('ting_search_profile', NULL);
  $base_settings['maxSuggestions'] = 10;
  $base_settings['maxTime'] = 2000;

  $base_settings['highlight'] = NULL;
  $base_settings['highlight.pre'] = NULL;
  $base_settings['highlight.post'] = NULL;
  $base_settings['minimumString'] = 3;

  $defaults = variable_get('opensearch_search_autocomplete_settings', array());

  $settings = array_merge($base_settings, $defaults);

  return $settings;
}

/**
 * Implements hook_xautoload().
 *
 * Place our OpenSearch classes in the OpenSearch namespace.
 */
function opensearch_xautoload(LocalDirectoryAdapter $adapter) {
  $adapter->absolute()->addPsr4('OpenSearch\\', drupal_get_path('module', 'opensearch') . '/src');
}
