<?php
/**
 * @file
 * Represents hooks implementations and definitions.
 */

include_once 'ding_place2book.features.inc';
require_once 'ding_place2book.fields.inc';
require_once "lib/p2b/P2b.php";

/**
 * Implements hook_image_default_styles().
 */
function ding_place2book_image_default_styles() {
  $styles = [];

  $styles['ding_place2book_kultunaut_square'] = [
    'name' => 'ding_place2book_kultunaut_square',
    'effects' => [
      [
        'name' => 'image_scale_and_crop',
        'data' => [
          'width' => 120,
          'height' => 120,
        ],
        'weight' => 0,
      ],
    ],
  ];

  return $styles;
}

/**
 * Implements hook_permission().
 */
function ding_place2book_permission() {
  return [
    'administer place2book settings' => [
      'title' => t('Administer place2book settings'),
      'description' => t('Perform administration tasks for ding_place2book.'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function ding_place2book_menu() {
  $items = [];

  $items['admin/config/ding/place2book'] = [
    'title' => 'Place2book settings',
    'description' => 'Settings and defaults for Place2book integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_place2book_service_admin_form'],
    'access arguments' => ['administer place2book settings'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ding_place2book.admin.inc',
  ];

  $items['admin/config/ding/place2book/settings'] = [
    'title' => 'Place2book settings',
    'description' => 'Settings and defaults for Place2book integration',
    'weight' => -20,
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_place2book_admin_settings_form'],
    'access arguments' => ['administer place2book settings'],
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'ding_place2book.admin.inc',
  ];

  $items['admin/config/ding/place2book/defaults'] = [
    'title' => 'Defaults',
    'description' => 'Configuration form for P2b default values',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_place2book_defaults_admin_form'],
    'access arguments' => ['administer place2book settings'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_place2book.admin.inc',
  ];

  $items['admin/config/ding/place2book/mappings'] = [
    'title' => 'Mappings',
    'description' => 'Mappings for P2b service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_place2book_mappings_admin_form'],
    'access arguments' => ['administer place2book settings'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_place2book.admin.inc',
  ];

  $items['ding/p2b/event_maker/%/event/%'] = array(
    'page callback' => 'ding_place2book_get_event_state',
    'page arguments' => array(3, 5),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ding_place2book_theme($existing, $type, $theme, $path) {
  return [
    'ding_p2b_prices_table' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_node_delete().
 */
function ding_place2book_node_delete($node) {
  if ($node->type == 'ding_event') {
    $p2b = P2b\P2b::getInstance();
    $field_place2book = field_get_items('node', $node, 'field_place2book');
    if (!empty($field_place2book)) {
      list($event_id, $event_maker_id, $price_id) = array_values($field_place2book[0]);
      try {
        $p2b->deletePrice($event_id, $event_maker_id, $price_id);
        $p2b->deleteEvent($event_id, $event_maker_id);
      }
      catch (Exception $ex) {
        watchdog_exception('ding_place2book', $ex, t('Error appeared on deleting node: nid - :nid, title - :title.', [
          ':nid' => $node->nid,
          ':title' => $node->title,
        ]));
      }
    }
  }
}

/**
 * Collects all needed information for request from node.
 *
 * @param object $node
 *   Node object.
 * @param array $additional
 *   Additional settings.
 *
 * @return array
 *   Array with need for request data.
 */
function ding_p2b_format_options($node, $additional) {
  $options = [
    "name" => ['title'],
    "description_short" => ['field_ding_event_lead', LANGUAGE_NONE, 0, 'value'],
    "description_long" => ['field_ding_event_body', LANGUAGE_NONE, 0, 'value'],
    "begin_at" => ['field_ding_event_date', LANGUAGE_NONE, 0, 'value'],
    "end_at" => ['field_ding_event_date', LANGUAGE_NONE, 0, 'value2'],
  ];
  $data = (array) $node;
  foreach ($options as $name => $option) {

    if (in_array($name, ['begin_at', 'end_at', 'sale_open_at', 'sale_close_at'])) {
      $date = (string) drupal_array_get_nested_value($data, $option);
      array_pop($option);
      $option[] = 'timezone_db';
      $timezone = $options[$name] = (string) drupal_array_get_nested_value($data, $option);
      $options[$name] = format_date(strtotime($date), 'custom', 'Y-m-d\TH:i:sO', $timezone);
    }
    else {
      $options[$name] = (string) drupal_array_get_nested_value($data, $option);
    }
  }
  $options['address'] = _ding_p2b_get_address_data($node);
  if ($additional['kultunaut_export']) {
    $field = field_get_items('node', $node, 'field_ding_event_category');
    if ($field) {
      $additional['kultunaut_export_category'] = _ding_place2book_get_export_category($field[0]['tid']);
    }

    $field = field_get_items('node', $node, 'field_ding_event_target');
    if ($field) {
      $additional['kultunaut_age_group'] = _ding_place2book_get_age_group($field[0]['tid']);
    }
  }

  $options += $additional;
  return $options;
}

/**
 * Collects address data from referenced library or current node.
 *
 * @param object $node
 *   Object of node.
 *
 * @return array
 *   Array with addresses.
 */
function _ding_p2b_get_address_data($node) {
  $field = field_get_items('node', $node, 'og_group_ref');
  $node = (array) $node;
  $lib = FALSE;
  if ($field) {
    $lib = (array) node_load($field[0]['target_id']);
  }
  $options = [
    "address1" => ['field_ding_event_location', LANGUAGE_NONE, 0, 'thoroughfare'],
    "address2" => ['field_ding_event_location', LANGUAGE_NONE, 0, 'premise'],
    "postal_code" => ['field_ding_event_location', LANGUAGE_NONE, 0, 'postal_code'],
    "city" => ['field_ding_event_location', LANGUAGE_NONE, 0, 'locality'],
    "country" => ['field_ding_event_location', LANGUAGE_NONE, 0, 'country'],
    "phone" => ['field_ding_library_phone_number', LANGUAGE_NONE, 0, 'value'],
  ];

  $data = [];
  foreach ($options as $name => $option) {
    $result = NULL;
    $data[$name] = drupal_array_get_nested_value($node, $option, $result);
    if (($result === FALSE || empty($data[$name])) && $lib) {
      $option[0] = 'field_ding_library_addresse';
      $data[$name] = drupal_array_get_nested_value($lib, $option);
    }
  }
  $data['phone'] = empty($data['phone']) ? '1' : $data['phone'];
  $data['address2'] = empty($data['address2']) ? 'None' : $data['address2'];

  return $data;
}

/**
 * Gets library id from node and returns associated eventMaker or default.
 *
 * @param object $node
 *    Object of node for which  we tries to get eventMaker.
 *
 * @return string
 *   Id of eventMaker.
 */
function _ding_place2book_get_event_maker($node) {
  $default = variable_get('ding_p2b_default_event_maker', FALSE);
  $field = field_get_items('node', $node, 'og_group_ref');
  if ($field) {
    $event_makers = variable_get('p2b_library_event_maker', []);
    $event_maker_id = isset($event_makers[$field[0]['target_id']]) ? $event_makers[$field[0]['target_id']] : $default;
  }
  else {
    $event_maker_id = $default;
  }

  return $event_maker_id;
}

/**
 * Get associated export category by tid.
 *
 * @param string $tid
 *   Tid of event category.
 *
 * @return string
 *   Export category or empty.
 *
 * @see ding_p2b_format_options().
 */
function _ding_place2book_get_export_category($tid) {
  $mappings = variable_get('ding_p2b_kultunaut_export_category', []);
  return isset($mappings[$tid]) ? $mappings[$tid] : '';
}

/**
 * Get associated  category by tid.
 *
 * @param string $tid
 *   Tid of event age group.
 *
 * @return string
 *   Export category or empty.
 *
 * @see ding_p2b_format_options().
 */
function _ding_place2book_get_age_group($tid) {
  $mappings = variable_get('ding_p2b_kultunaut_age_group', []);
  return isset($mappings[$tid]) ? $mappings[$tid] : '';
}

/**
 * Custom theme handler for rendering prices as table.
 */
function theme_ding_p2b_prices_table($variables) {
  $form = $variables['form'];
  $rows = [];
  foreach (element_children($form['prices']) as $id) {
    $rows[] = [
      'name' => drupal_render($form['prices'][$id]['name']),
      'value' => drupal_render($form['prices'][$id]['value']),
      'remove' => drupal_render($form['prices'][$id]['remove']),
    ];
  }

  $header = [
    t('Name'),
    t('Price'),
    t('Remove'),
  ];

  $output = theme('table', ['rows' => $rows, 'header' => $header, 'empty' => t('Click to add more for adding a row.')]);
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Ajax callback for fetching event state from P2b.
 *
 * @param string $event_id
 *   Event id of remote service.
 * @param $event_maker_id
 *   EventMaker id on remote service.
 *
 * @return string
 */
function ding_place2book_get_event_state($event_maker_id, $event_id) {
  try {
    $p2b = P2b\P2b::getInstance();
    $event = $p2b->getEvent($event_maker_id, $event_id);
    $meta_data = $event->meta_data;
    $start = strtotime($event->begin_at);
    if (time() < $start) {
      // Go through the sales status.
      switch ($meta_data->sales_status) {
        case 'open':
          // Check if there is any available tickets for sale.
          switch ($meta_data->event_state) {
            case 'published':
              if ($meta_data->available_tickets > 0 || $meta_data->available_tickets == 'âˆž') {
                $data = l(t('Book a ticket'), $event->links->sales_location, ['attributes' => ['_target' => 'blank']]);
                $class = 'order';
              }
              else {
                $data = t('Sold out');
                $class = 'info';
              }
              break;
          }
          break;
        case 'upcoming':
          $data = t('Ticket sale has not yet started for this event');
          $class = 'info';
          break;
        case 'closed':
          $data = t('The event is closed for admission');
          $class = 'info';
          break;
      }
    }
    else {
      $data = t('The event has already taken place');
      $class = 'info ticket-info';
    }
    $output = "<div class='place2book {$class}'>{$data}</div>";
  }
  catch (Exception $ex) {
    watchdog_exception('ding_place2book', $ex);
    $output = "<div class='place2book>Error on fetching.</div>";
  }
  print ajax_render($output);
  exit();
}
