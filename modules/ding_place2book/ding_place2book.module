<?php
/**
 * @file
 * Represents hooks implementations and definitions.
 */

include_once 'ding_place2book.features.inc';
require_once 'ding_place2book.fields.inc';

/**
 * Implements hook_image_default_styles().
 */
function ding_place2book_image_default_styles() {
  $styles = [];

  $styles['ding_place2book_kultunaut_square'] = [
    'name' => 'ding_place2book_kultunaut_square',
    'effects' => [
      [
        'name' => 'image_scale_and_crop',
        'data' => [
          'width' => 120,
          'height' => 120,
        ],
        'weight' => 0,
      ],
    ],
  ];

  return $styles;
}

/**
 * Implements hook_permission().
 */
function ding_place2book_permission() {
  return [
    'administer place2book settings' => [
      'title' => t('Administer place2book settings'),
      'description' => t('Perform administration tasks for ding_place2book.'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function ding_place2book_menu() {
  $items = [];

  $items['admin/config/ding/place2book'] = [
    'title' => 'Place2book settings',
    'description' => 'Settings and defaults for Place2book integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_place2book_service_admin_form'],
    'access arguments' => ['administer place2book settings'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ding_place2book.admin.inc',
  ];

  $items['admin/config/ding/place2book/settings'] = [
    'title' => 'Place2book settings',
    'description' => 'Settings and defaults for Place2book integration',
    'weight' => -20,
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_place2book_admin_settings_form'],
    'access arguments' => ['administer place2book settings'],
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'ding_place2book.admin.inc',
  ];

  $items['admin/config/ding/place2book/event_makers'] = [
    'title' => 'Event Makers',
    'description' => 'Configuration form for P2b event makers',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_place2book_eventmakers_admin_form'],
    'access arguments' => ['administer place2book settings'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_place2book.admin.inc',
  ];

  $items['admin/config/ding/place2book/kultunaut'] = [
    'title' => 'Kultunaut',
    'description' => 'Kultunaut-specific settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_place2book_kultunaut_admin_form'],
    'access arguments' => ['administer place2book settings'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_place2book.admin.inc',
  ];

  return $items;
}

/**
 * Implements hook_node_delete().
 */
function ding_place2book_node_delete($node) {
  if ($node->type == 'ding_event') {
    $p2b = P2b\P2b::getInstance();
    $field_place2book = field_get_items('node', $node, 'field_place2book');
    if (!empty($field_place2book)) {
      list($event_id, $event_maker_id, $price_id) = array_values($field_place2book[0]);
      try {
        $p2b->deletePrice($event_id, $event_maker_id, $price_id);
        $p2b->deleteEvent($event_id, $event_maker_id);
      }
      catch (Exception $ex) {
        watchdog_exception('ding_place2book', $ex, t('Error appeared on deleting node: nid - :nid, title - :title.', [
          ':nid' => $node->nid,
          ':title' => $node->title,
        ]));
      }
    }
  }
}

/**
 * Collects all needed information for request from node.
 *
 * @param object $node
 *   Node object.
 * @param array $additional
 *   Additional settings.
 *
 * @return array
 *   Array with need for request data.
 */
function ding_p2b_format_options($node, $additional) {
  $options = [
    "name" => ['title'],
    "description_short" => ['field_ding_event_lead', LANGUAGE_NONE, 0, 'value'],
    "description_long" => ['field_ding_event_body', LANGUAGE_NONE, 0, 'value'],
    "begin_at" => ['field_ding_event_date', LANGUAGE_NONE, 0, 'value'],
    "end_at" => ['field_ding_event_date', LANGUAGE_NONE, 0, 'value2'],
    "address" => [
      "address1" => [
        'field_ding_event_location',
        LANGUAGE_NONE,
        0,
        'thoroughfare',
      ],
      "address2" => ['field_ding_event_location', LANGUAGE_NONE, 0, 'premise'],
      "postal_code" => [
        'field_ding_event_location',
        LANGUAGE_NONE,
        0,
        'postal_code',
      ],
      "city" => ['field_ding_event_location', LANGUAGE_NONE, 0, 'locality'],
      "country" => ['field_ding_event_location', LANGUAGE_NONE, 0, 'country'],
    ],
  ];
  $data = (array) $node;
  foreach ($options as $name => $option) {
    if ($name == 'address') {
      foreach ($option as $key => $value) {
        $options[$name][$key] = (string) drupal_array_get_nested_value($data, $value);
      }
    }
    else {
      $options[$name] = (string) drupal_array_get_nested_value($data, $option);
    }
    if (in_array($name, ['begin_at', 'end_at', 'sale_open_at', 'sale_close_at'])) {
      array_pop($option);
      $option[] = 'timezone_db';
      $options[$name] .= (string) drupal_array_get_nested_value($data, $option);
    }
  }
  // @todo Find source for this param.
  $options['address']['phone'] = 'phone';
  if ($additional['kultunaut_export']) {
    $field = field_get_items('node', $node, 'field_ding_event_category');
    if ($field) {
      $additional['kultunaut_export_category'] = _ding_place2book_get_export_category($field[0]['tid']);
    }
  }

  $options += $additional;
  return $options;
}

/**
 * Gets library id from node and returns associated eventMaker or default.
 *
 * @param object $node
 *    Object of node for which  we tries to get eventMaker.
 *
 * @return string
 *   Id of eventMaker.
 */
function _ding_place2book_get_event_maker($node) {
  $default = variable_get('ding_p2b_default_event_maker', FALSE);
  $field = field_get_items('node', $node, 'og_group_ref');
  if ($field) {
    $event_makers = variable_get('p2b_library_event_maker', []);
    $event_maker_id = isset($event_makers[$field[0]['target_id']]) ? $event_makers[$field[0]['target_id']] : $default;
  }
  else {
    $event_maker_id = $default;
  }

  return $event_maker_id;
}

/**
 * Get associated export category by tid.
 *
 * @param string $tid
 *   Tid of event category.
 *
 * @return string
 *   Export category or empty.
 *
 * @see _ding_place2book_load_export_category()
 */
function _ding_place2book_get_export_category($tid) {
  $categories = variable_get('p2b_kultunaut_export_category', []);
  return isset($categories[$tid]) ? $categories[$tid] : '';
}
