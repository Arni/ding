<?php

/*
 * Fix module weight to be heavier than CCK field group module,
 * so hook_form_alter() has access to field groups
*/
function ding_place2book_update_1() {
  $items = array();
  $items[] = update_sql("UPDATE {system} SET weight = 10 WHERE name = 'ding_place2book';");
  drupal_set_message('Updated custom module weight.');
  return $items;
}

/**
 * Implementation of hook_init().
 */
function ding_place2book_init(){
  drupal_add_css(drupal_get_path('module', 'ding_place2book') .'/ding_place2book.css');
}

/**
 * Implementation of hook_menu().
 */
function ding_place2book_menu() {
  $items = array();
  
  $items['admin/settings/ding/place2book'] = array(
    'title' => 'Place2book settings',
    'description' => 'Settings and defaults for Place2book integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_place2book_admin_settings_form'),
    'access callback' => TRUE,
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ding_place2book.admin.inc',
    );
  return $items;
}

function ding_place2book_p2b_submit($form, &$form_state)
{
  //dpm($form_state); // for debugging..
  
  //get existing Place2book DB settings for this node 
  $settings = db_fetch_array(db_query('SELECT place2book_id, maintain_copy FROM {ding_place2book} WHERE nid = %d', $form['nid']['#value']));
  $place2book_id = $settings['place2book_id'];
  //dpm($settings);  //for debugging
  
  //-- Contact place2book webservice (and get and ID from it if applicable) --
  if ($form_state['values']['maintain_copy'] == 1) {
    if ($settings['place2book_id'] && $settings['place2book_id'] != -1) {
      //perform UPDATE
      $form_state['values']['place2book_id'] = $place2book_id;
      place2book_event_op($form_state['values'], 'update');
      //drupal_set_message('Place2book: requested UPDATE'); //for debugging
    } else {
      //perform INSERT - and the returning value will be the place2book ID for further operations
      $place2book_id = place2book_event_op($form_state['values'], 'insert');
      //drupal_set_message('Place2book: requested INSERT'); //for debugging
    }
  } else {
    //if maintain_copy is OFF, delete event on place2book IF we had an existing place2book_id in our settings
    if ($settings['place2book_id']) {
      //perform DELETE
      $form_state['values']['place2book_id'] = $place2book_id;
      place2book_event_op($form_state['values'], 'delete');
      $place2book_id = -1;
      //drupal_set_message('Place2book: requested DELETE'); //for debugging
    }
  }
  //drupal_set_message('place2book_id = ' . $place2book_id); //for debugging
  
  //-- Update or insert in the settings table --
  if (isset($place2book_id)) {
    if ($settings) {
      if ($form['nid']['#value']) {
        db_query('UPDATE {ding_place2book} SET place2book_id = %d, maintain_copy = %d, use_taxonomy = %d WHERE nid = %d', $place2book_id, $form_state['values']['maintain_copy'], $form_state['values']['use_taxonomy'], $form['nid']['#value']);
        //drupal_set_message('Settings table UPDATE with nid = ' . $form['nid']['#value']); //for debugging
      }
    } else {
      if ($form_state['nid']) {
        db_query('INSERT INTO {ding_place2book} (nid, place2book_id, maintain_copy, use_taxonomy) VALUES (%d, %d, %d, %d)', $form_state['nid'], $place2book_id, $form_state['values']['maintain_copy'], $form_state['values']['use_taxonomy']);
        //drupal_set_message('Settings table INSERT with nid = ' . $form_state['nid']); //for debugging
      }
    }
  }
  
}

function ding_place2book_document_root() {
  $absolute_dir = dirname(__FILE__);
  $relative_dir = drupal_get_path('module', 'ding_place2book');
  return substr($absolute_dir, 0, -1 * (1 + strlen($relative_dir)));
}

function place2book_event_op($form_state_values, $op) {
  /*
  //load xml template
  $event_xml_path = ding_place2book_document_root() . '/event_create.xml';
  if (file_exists($event_xml_path)) {
    $xml = simplexml_load_file($event_xml_path);
    dpm($xml);
    drupal_set_message($event_xml_path . ' loaded');
  } else {
    drupal_set_message('Failed to open '. $event_xml_path);
  }
  */

  //load xml string
  $event_create_str = '<?xml version="1.0" encoding="UTF-8"?>
<data>
  <provider>
    <name>Peter Jeppesen</name>
    <email>psj@place2book.com</email>
    <phone>70232550</phone>
  </provider>
  <event>
    <name>Test af event create</name>
    <description_short>En kort beskrivelse af arrangementet</description_short>
    <description_long>En lang beskrivelse af arrangementet</description_long>
    <begin_at>2014-08-17 12:00 UTC</begin_at>
    <end_at>2014-08-17 12:00 UTC</end_at>
    <sale_open>2011-08-17 12:00 UTC</sale_open>
    <sale_close>2014-08-17 11:00 UTC</sale_close>
    <venue>
      <name>Testhallen</name>
      <address1>Testvej 1</address1>
      <address2>Testforstad</address2>
      <postal>1159</postal>
      <city>Testby</city>
      <country_code>DK</country_code>
    </venue>
    <capacity>100</capacity>
    <unlimited_capacity>0</unlimited_capacity>
    <price>
      <name>Voksen</name>
      <value_dollar>100</value_dollar>
    </price>
    <kultunaut_export>1</kultunaut_export>
    <kultunaut_age_group>Boern</kultunaut_age_group>
    <kultunaut_picture_uri>http://dinserver.dk/billede.png</kultunaut_picture_uri>
    <kultunaut_export_category>Elektronisk</kultunaut_export_category>
  </event>
    </data>';
    $xml = simplexml_load_string($event_create_str);
    //dpm($xml); //for debugging
    
  //build event xml
  //set event name with title
  $xml->event->name = $form_state_values['title']; //'the new title from within DING';
  
  //set short description
  $xml->event->description_short = $form_state_values['field_teaser'][0]['value'];
  
  //set long description
  $xml->event->description_long = $form_state_values['body'];
  
  //set sales window times to use the defaults in place2book
  $xml->event->sale_open = '';
  $xml->event->sale_close = '';
  
  //-- set location data --
  //if library has been selected, use location data from the library
  if ($form_state_values['field_library_ref'][0]['nid']) { 
    $libloc = db_fetch_array(db_query('SELECT n.title, l.name, l.street, l.additional, l.postal_code, l.city, UPPER(l.country) AS country FROM node n JOIN location_instance i ON n.nid = i.nid JOIN location l ON i.lid = l.lid WHERE n.nid = %d', $form_state_values['field_library_ref'][0]['nid'])); 

    //dpm($libloc); //for debugging..
    $xml->event->venue->name = $libloc['title'];
    $xml->event->venue->address1 = $libloc['street'];
    $xml->event->venue->address2 = $libloc['additional'];
    $xml->event->venue->postal = $libloc['postal_code'];
    $xml->event->venue->city = $libloc['city'];
    $xml->event->venue->country_code = $libloc['country'];
  }
  //if node provides other location data, override the above location data where possible - NB: NOT OPTIMAL SOLUTION, since node lacks fields for postal and city.
  //The check is only made for venue name - if it is not there, the rest is not used either
  if ($form_state_values['locations'][0]['name']) { 
    $xml->event->venue->name = $form_state_values['locations'][0]['name']; 
    $xml->event->venue->address1 = $form_state_values['locations'][0]['street']; 
    $xml->event->venue->address2 = $form_state_values['locations'][0]['additional']; 
  //NB! - event node type can have a funny default in it location settings (see /admin/content/node-type/event, Locative Info., Collection settings) - country default was US, should probably be DK. Perhaps a check should be made?
    $xml->event->venue->country_code = $form_state_values['locations'][0]['country'];
    //drupal_set_message('Address data overridden with data from node (see values -> locations[0])' ); //for debugging
  }
  
  //set event time to begin
  $xml->event->begin_at = $form_state_values['field_datetime'][0]['value']; 
  
  //set event time to end
  $xml->event->end_at = $form_state_values['field_datetime'][0]['value2']; 
  
  //drupal_set_message('xml: <pre>' . str_replace(array('<','>'), array('&lt;','&gt;'), $xml->asXML()) . '</pre>' ); //for debugging

  //send xml to place2book event API
  $api_token = variable_get('ding_place2book_api_key', '');
  $headers = array(
    'Content-Type' => 'text/xml', 
    'X-PLACE2BOOK-API-TOKEN' => $api_token,
    );
  switch ($op) {
    case 'insert':
      $req_result = drupal_http_request(variable_get('ding_place2book_service_url', '') . '/create_event', $headers, 'POST', $xml->asXML() );
      
      //catch insert error by checking the event id
      if (!$req_result->headers['Event-Id']) {
        $p2b_error = $req_result->error;
        drupal_set_message(t('The insert or update was not performed on Place2book. Place2book returned this error: ') . $p2b_error, 'error', FALSE);
      } else {
        drupal_set_message(t('Event created on Place2book with remote ID ') . $req_result->headers['Event-Id']);
      }
      
      break;
    case 'update':
      $headers['X-PLACE2BOOK-EVENT-ID'] = $form_state_values['place2book_id'];
      $req_result = drupal_http_request(variable_get('ding_place2book_service_url', '') . '/update_event', $headers, 'POST', $xml->asXML() );
      
      //catch insert error by checking the return code 
      if ($req_result->error != 'Accepted') {
        $p2b_error = $req_result->headers['Status'];
        drupal_set_message(t('UPDATE was NOT PERFORMED on Place2book. Place2book returned this error: ') . $p2b_error, 'error', FALSE);
      } else {
        drupal_set_message(t('Event updated on Place2book with remote ID ') . $form_state_values['place2book_id']);
      }
      
      break;
    case 'delete':
      $headers['X-PLACE2BOOK-EVENT-ID'] = $form_state_values['place2book_id'];
      $req_result = drupal_http_request(variable_get('ding_place2book_service_url', '') . '/delete_event', $headers, 'POST' );
      
      if ($req_result->error != 'Accepted') {
        $p2b_error = $req_result->headers['Status'];
        drupal_set_message(t('UPDATE was NOT PERFORMED on Place2book. Place2book returned this error: ') . $p2b_error, 'error', FALSE);
      } else {
        drupal_set_message(t('The related event on Place2book was deleted.'));
      }
      
      //update settings in ding_place2book table - "break the maintain_copy link"
      db_query('UPDATE {ding_place2book} SET place2book_id = -1, maintain_copy = %d, use_taxonomy = %d WHERE nid = %d', $form_state_values['maintain_copy'], $form_state_values['use_taxonomy'], $form_state_values['nid']);
      //drupal_set_message('Place2book: DELETE ran, settings were UPDATED for nid=' . $form_state_values['nid'] .', with maintain_copy= ' . $form_state_values['maintain_copy'] . ' and place2book_id=-1' ); //for debugging 
      
      //if server at p2b says 406 - Not Accepted, do this instead:
      //dont delete from ding_place2book
      //update table, set maintain_copy back to selected
      //message to user: server says no, some have already bought tickets
      break;
  }
  //dpm($req_result); //for debugging
  
  //return a place2book_id
  return $req_result->headers['Event-Id'];
}


function place2book_settings($nid) {
  $settings = array();

  //set defaults
  $place2book_defaults = variable_get('ding_place2book_defaults', array());
  $settings = $place2book_defaults;
  
  //use db values instead if they exist
  $result = db_query('SELECT * FROM {ding_place2book} WHERE nid = %d', $nid);
  if ($result) {
    $row = db_fetch_array($result);
    if (isset($row['nid'])) {
      $settings = $row;
    } 
  }

  return $settings;
}

/**
 * Implementation of hook_form_alter()
 */
function ding_place2book_form_alter(&$form, $form_state, $form_id) {

  $p2b_values = place2book_settings($form['nid']['#value']);

  //settings for Place2book on the event nodetype
  if ($form_id == 'event_node_form') {
    
    $form['place2book'] = array(
      '#type' => 'fieldset',
      '#title' => t('Place2Book'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 35,
      '#group' => 'additional_settings',
    );
    $form['place2book']['maintain_copy'] = array(
      '#type' => 'checkbox',
      '#title' => t('Maintain copy on Place2Book'),
      '#default_value' => $p2b_values['maintain_copy'],
      '#description' => t('When set, a corresponding event is created and updated on the ticket booking service Place2Book.com.'),
    );
    $form['place2book']['place2book_id'] = array(
      '#type' => 'item',
      '#title' => t('Place2Book ID'),
      '#value' => $p2b_values['place2book_id'],
      '#description' => t('An ID-reference to the corresponding event on the ticket booking service Place2Book'),
    );
    $form['place2book']['use_taxonomy'] = array(
      '#type' => 'checkbox',
      '#title' => t('Categories to Place2Book'),
      '#default_value' => $p2b_values['use_taxonomy'],
      '#description' => t('If checked, categories/taxonomy terms on this ding-event is sent to the corresponding event maintained on Place2Book.com.'),
    );   
    //$form['#submit'][] = 'ding_place2book_p2b_submit'; 
    $form['buttons']['submit']['#submit'][]  = 'ding_place2book_p2b_submit'; 
  }

}

/**
 * Implementation of hook_nodeapi().
 */
function ding_place2book_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  
  if ($node->type == "event") {
    
    switch ($op) {
      case 'view':
        if (isset($node->nid) && $node->nid) {

          $exists_p2b = db_result(db_query('SELECT place2book_id FROM {ding_place2book} WHERE nid = %d', $node->nid));

          if ($exists_p2b) {
            $api_token = variable_get('ding_place2book_api_key', '');

            $p2b_headers = array(
              'X-PLACE2BOOK-API-TOKEN' => $api_token,
              'X-PLACE2BOOK-EVENT-ID' => $exists_p2b,
              );
            $p2b_result = drupal_http_request(variable_get('ding_place2book_service_url', '') . '/available_tickets', $p2b_headers, 'GET' );  
            //dpr($p2b_result); //for debugging..
        
            if ($p2b_result->headers['Sales-Status'] == 'open' && $p2b_result->headers['Available-Tickets'] > 0) {
              $place2book_infolink = '<ul class="buttons item-list">
				  	<li class="place2book order">
					  	<a href="' . $p2b_result->headers['Location'] . '">' . t('Book a ticket') . '</a>
					</li>
				  </ul>';
            } elseif ($p2b_result->headers['Available-Tickets'] == 0) {
              $place2book_infolink = '<div class="info place2book">' .t('There are no available tickets for this event') .'</div>';
            } elseif ($p2b_result->headers['Sales-Status'] == 'closed') {
              $place2book_infolink = '<div class="info place2book">' .t('The event is closed') .'</div>';
            }
            
            $node->content['place2book_infolink'] = array(
              '#value' => $place2book_infolink, 
              '#weight' => 10,
              );
            }
          }
        break;
    
      case 'delete':
        if (isset($node->nid) && $node->nid) {
          $exists_p2b = db_result(db_query('SELECT place2book_id FROM {ding_place2book} WHERE nid = %d', $node->nid));
          if ($exists_p2b) {
            $api_token = variable_get('ding_place2book_api_key', '');
            
            // send DELETE request to Place2book webservice
            $p2b_headers = array(
              'X-PLACE2BOOK-API-TOKEN' => $api_token,
              'X-PLACE2BOOK-EVENT-ID' => $exists_p2b,
              );
            $req_result = drupal_http_request(variable_get('ding_place2book_service_url', '') . '/delete_event', $p2b_headers, 'POST' );
            //dpm($req_result); //for debugging..
            //drupal_set_message('Place2book: requested DELETE on place2book id = ' . $exists_p2b); //for debugging..
            
            //catch delete error by checking the return code 
            if ($req_result->error != 'Accepted') {
              $p2b_error = $req_result->headers['Status'];
              drupal_set_message(t('DELETE was NOT PERFORMED on Place2book. Place2book returned this error: ') . $p2b_error, 'error', FALSE);
            } else {
              drupal_set_message(t('The related event on Place2book was deleted.'));
            }
          } 
          
          //TO-DO: no attempt is currently made to stop the node from being deleted if the above place2book-delete fails..
          db_query('DELETE FROM {ding_place2book} WHERE nid = %d', $node->nid);
          //drupal_set_message('Settings table row DELETE'); //for debugging
        }
        break;
    }
  }
}
