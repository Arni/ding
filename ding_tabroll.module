<?php

/**
 * @file
 * Code for the tabroll feature.
 */

include_once 'ding_tabroll.features.inc';

/**
 * Implements hook_init().
 */
function ding_tabroll_init() {
  // Add default CSS and JavaScript.
  drupal_add_js(drupal_get_path('module', 'ding_tabroll') . '/js/ding_tabroll.js');
  drupal_add_css(drupal_get_path('module', 'ding_tabroll') . '/css/ding_tabroll.css');
}

/**
 * Implements hook_theme().
 *
 * See http://views-help.doc.logrus.com/help/views/api-default-views
 * for help with providing default .tpl files for your views
 */
function ding_tabroll_theme($existing, $path) {
  $path = drupal_get_path('module', 'ding_tabroll') . '/templates';
  return array(
    'views_view_unformatted__ding_tabroll' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
      'template' => 'views-view-unformatted--ding-tabroll',
      'original hook' => 'views_view_unformatted',
      'path' => $path,
      'preprocess functions' => array(
        'template_preprocess',
        'template_preprocess_views_view_unformatted',
        'ding_tabroll_preprocess_views_view_unformatted__ding_tabroll',
      ),
    ),
    'views_view_fields__ding_tabroll' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
      'template' => 'views-view-fields--ding-tabroll',
      'original hook' => 'views_view_fields',
      'path' => $path,
      'preprocess functions' => array(
        'template_preprocess',
        'template_preprocess_views_view_fields',
        'ding_tabroll_preprocess_views_view_fields__ding_tabroll',
      ),
    ),
    'views_view_unformatted__libraries_tabroll' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
      'template' => 'views-view-unformatted--libraries-tabroll',
      'original hook' => 'views_view_unformatted',
      'path' => $path,
      'preprocess functions' => array(
        'template_preprocess',
        'template_preprocess_views_view_unformatted',
        'ding_tabroll_preprocess_views_view_unformatted__libraries_tabroll',
      ),
    ),
    'views_view_fields__libraries_tabroll' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
      'template' => 'views-view-fields--libraries-tabroll',
      'original hook' => 'views_view_fields',
      'path' => $path,
      'preprocess functions' => array(
        'template_preprocess',
        'template_preprocess_views_view_fields',
        'ding_tabroll_preprocess_views_view_fields__libraries_tabroll',
      ),
    ),
  );
}

/**
 * adds rolltab in queue based on referenced library
 * Variables:
 * $library_ref - ID of library node, or NULL for placement in frontpage tabroll
 */
function _ding_tabroll_queue_add($nid, $library_ref) {
  if (isset($library_ref)) {
    $queue = nodequeue_load_queue_by_name('ding_tabroll_for_libraries');
    $subqueues = nodequeue_load_subqueues_by_reference(array($queue->qid => array($library_ref)));
  }
  else {
    $queue = nodequeue_load_queue_by_name('ding_tabroll');
    $subqueues = nodequeue_load_subqueues_by_queue($queue->qid);
  }
  $subqueues = array_values($subqueues);
  $subqueue = $subqueues[0];

  if (function_exists('views_invalidate_cache')) {
    views_invalidate_cache();
  }

  nodequeue_subqueue_add($queue, $subqueue, $nid);
}

/**
 * Implements hook_node_insert().
 *  auto inserts nodequeue when submitting rolltab
 */
function ding_tabroll_node_insert($node) {
  $nid = $node->nid;
  $type = $node->type;
  // Only process project node.
  if ($type != 'ding_rolltab') {
    return FALSE;
  }

  /*
  if (isset($node->field_ding_tabroll_library_ref['und'][0])) {
    $libraries = $node->field_ding_tabroll_library_ref['und'][0]['target_id'];
    $queue = nodequeue_load_queue_by_name('ding_tabroll_for_libraries');
    $subqueues = nodequeue_load_subqueues_by_reference(array($queue->qid => array($libraries)));
  }
  else {
    $queue = nodequeue_load_queue_by_name('ding_tabroll');
    $subqueues = nodequeue_load_subqueues_by_queue($queue->qid);
  }
  $subqueues = array_values($subqueues);
  $subqueue = $subqueues[0];

  if (function_exists('views_invalidate_cache')) {
    views_invalidate_cache();
  }

  nodequeue_subqueue_add($queue, $subqueue, $nid);
  */
  $library_ref = (isset($node->field_ding_tabroll_library_ref['und'][0])) ? $node->field_ding_tabroll_library_ref['und'][0]['target_id'] : NULL;
  _ding_tabroll_queue_add($nid, $library_ref);
}

/**
 * Implements hook_node_update().
 *  auto updates nodequeues when assigning rolltab to another library
 */
function ding_tabroll_node_update($node) {
  $nid = $node->nid;
  $type = $node->type;
  // Only process project node.
  if ($type != 'ding_rolltab') {
    return FALSE;
  }

  $library_ref = (isset($node->field_ding_tabroll_library_ref['und'][0])) ? $node->field_ding_tabroll_library_ref['und'][0]['target_id'] : NULL;
  $old_node = node_load($node->nid);
  $old_library_ref = (isset($old_node->field_ding_tabroll_library_ref['und'][0])) ? $old_node->field_ding_tabroll_library_ref['und'][0]['target_id'] : NULL;
  
  //if library ref field was not changed, exit
  if ($library_ref == $old_library_ref) {
    return FALSE;
  }
  
  // Retrieve nodes to be removed
  $result = db_query("SELECT sqid FROM {nodequeue_nodes} WHERE nid = :nid", 
    array(
    ':nid' => $nid, 
    )
  );
  // Remove the nodes from queues
  foreach ($result as $row) {
    nodequeue_subqueue_remove_node($row->sqid, $nid);
  }

  // Add the node to the relevant queue
  _ding_tabroll_queue_add($nid, $library_ref);
}