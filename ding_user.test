<?php

/**
 * Check that basic user login functionality works.
 */
class DingUserFunctionalTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Ding user',
      'description' => 'Basic user login functionality through a provider.',
      'group' => 'Ding!',
    );
  }

  function setUp() {
    $this->profile = 'ding2';
    parent::setUp(array('ding_user', 'ding_provider', 'dp_example'));
  }

 /**
  * Test a user can log in.
  */
  function testLogin() {
    // dp_example accepts any user whose password is last four chars of the
    // username
    $login_data = array('name' => 'twain', 'pass' => 'wain');
    $this->drupalGet('user/login');
    $this->assertRaw(t('Enter the password that accompanies your username.'), t("We're not logged in."));

    $this->drupalPost('user/login', $login_data, t('Log in'));
    $this->assertRaw(t('Member for'), t("Login works."));

    $edit_link = $this->xpath('//a[normalize-space(text())=:label]', array(':label' => t('Edit')));
    $res = preg_match('{^/user/(\d+)/edit$}', (string) $edit_link[0]['href'], $matches);
    $this->assertTrue($res, t('Edit link is well formed.'));
    if (!$res) {
      // No uid, bail out.
      return;
    }
    $uid = $matches[1];

    $this->assertRaw('Twain', t('Real name is displayed'));
    $user = user_load($uid);
    $this->assertEqual('twain@example.com', $user->mail, t('User email has been properly set.'));
    $this->assertNoRaw($user->name, t('$user->name isn\'t shown'));
    $this->assertNoRaw($user->init, t('$user->init isn\'t shown'));

    user_save($user, array('mail' => 'user@example.com', 'data' => array('display_name' => 'Svend Bent')));

    $this->drupalGet('user');
    $this->assertRaw('Svend Bent', t('Display name was changed for test.'));

    // Logout
    $this->drupalLogout();
    // Check that we're logged out.
    $this->drupalGet('user/login');
    $this->assertRaw(t('Enter the password that accompanies your username.'), t("We're not logged in."));

    $this->drupalPost('user/login', $login_data, t('Log in'));
    $this->assertRaw(t('Member for'), t("Second login works."));

    $edit_link = $this->xpath('//a[normalize-space(text())=:label]', array(':label' => t('Edit')));
    $this->assertTrue(preg_match('{^/user/'. $uid . '/edit$}', (string) $edit_link[0]['href']), t('Second login is the same uid.'));

    $this->assertRaw('Twain', t('Real name was properly reset.'));
    $user = user_load($uid, TRUE);
    $this->assertEqual('twain@example.com', $user->mail, t('User email has been properly reset.'));
  }

  /**
  * Test that an unknown user can't log in.
  */
  function testLoginFail() {
    // dp_example rejects any user whose password is not the last four chars
    // of the username.
    $login_data = array('name' => 'twain', 'pass' => 'banana');
    $this->drupalGet('user/login');
    $this->assertRaw(t('Enter the password that accompanies your username.'), t("We're not logged in."));

    $this->drupalPost('user/login', $login_data, t('Log in'));
    $this->assertText(t('Sorry, unrecognized username or password. Have you forgotten your password?'));
  }

  /**
  * Test that an blocked user can't log in, and gets a message.
  */
  function testLoginBlocked() {
    // dp_example blocks any user with 'blocked' in the username.
    $login_data = array('name' => 'blockedtwain', 'pass' => 'wain');
    $this->drupalGet('user/login');
    $this->assertRaw(t('Enter the password that accompanies your username.'), t("We're not logged in."));

    $this->drupalPost('user/login', $login_data, t('Log in'));
    $this->assertText(t("Sorry, you're blocked"));
  }

}
