<?php
// $Id$

/**
 * @file ding_profile.module
 * Provides the profile node type for the Ding! project.
 */

/**
 * Implementation of hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function ding_profile_perm() {
  return array(
    'create profile',
    'edit profile',
    'delete profile',
  );
}

/**
 * Implementation of hook_node_info().
 */
function ding_profile_node_info() {
  return array(
    'profile' => array(
      'name' => t('Staff profile'),
      'module' => 'ding_profile',
      'description' => 'A staff profile with description, profile picture, and tags.',
      'title_label' => t('Name'),
      'body_label' => t('Description'),
    ),
  );
}

/**
 * Implementation of hook_access().
 */
function ding_profile_access($op, $node, $account = NULL) {
  if (is_null($account)) {
    $account = $GLOBALS['user'];
  }

  if ($node->type != 'profile') {
    return FALSE;
  }
  switch ($op) {
    case 'create':
      return user_access('create profile', $account);
    case 'view':
      return user_access('access user profiles', $account);
    case 'update':
      return user_access('edit profile', $account);
    case 'delete':
      return user_access('delete profile', $account);
  }
}

/**
 * Implementation of hook_form().
 *
 * Provides the node editing form.
 */
function ding_profile_form(&$node) {
  // The site admin can decide if this node type has a title and body, and how
  // the fields should be labeled. We need to load these settings so we can
  // build the node form correctly.
  $type = node_get_types('type', $node);
  $form = array();

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5
    );
  }

  if ($type->has_body) {
    // In Drupal 6, we can use node_body_field() to get the body and filter
    // elements. This replaces the old textarea + filter_form() method of
    // setting this up. It will also ensure the teaser splitter gets set up
    // properly.
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }
  // For this node type, we don't want splittable teasers, so let's 
  // disable that.
  unset($form['body_field']['teaser_js']);
  unset($form['body_field']['teaser_include']);

  return $form;
}

/**
 * Implementation of hook_view().
 *
 * This is a typical implementation that simply runs the node text through
 * the output filters.
 */
function ding_profile_view($node, $teaser = FALSE, $page = FALSE) {
  // Don't allow this node to be viewed on its own, instead redirect to 
  // the user profile page.
  if ($_GET['q'] == 'node/' . $node->nid) {
    // Use a 301 permanent redirect.
    return drupal_goto('user/' . $node->uid, NULL, NULL, 301);
  }

  $node = node_prepare($node, $teaser);
  return $node;
}

