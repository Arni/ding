<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function alma_user_menu() {
  $items = array();

  $items['admin/settings/alma/user'] = array(
    'title' => 'User settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alma_user_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'alma_user.admin.inc',
  );

  $items['user/%user/secure_pass'] = array(
    'title' => 'Admin password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alma_user_forms_admin_pass', 1),
    'access callback' => 'alma_user_forms_admin_pass_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'alma_user.forms.inc',
  );

  return $items;
}

/**
 * Implementation of hook_block().
 */
function alma_user_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
      'account' => array(
        'info' => t('Library account/login'),
        'cache' => BLOCK_NO_CACHE,
        'status' => 1,
        'region' => 'account',
      ),
    );
  }
  elseif ($op == 'view' && $delta == 'account') {
    global $user;
    $block = array();

    // If user is not logged in, display the login form.
    if (!$user->uid) {
      $block['content'] = drupal_get_form('user_login_block');
    }
    else {
      $block['content'] = theme('alma_user_status_block');
    }

    return $block;
  }
}

/**
 * Implementation of hook_user().
 */
function alma_user_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'load':
      if ($account->uid) {
        // Attach the Alma user id and name to the user object when it
        // is loaded, so it's available everywhere the user is.
        $data = db_fetch_array(db_query("SELECT alma_id, alma_name FROM {alma_user} WHERE uid = %d LIMIT 1;", $account->uid));
        $account->alma_id = $data['alma_id'];
        $account->alma_name = $data['alma_name'];
        $account->secure_pass = db_result(db_query("SELECT pass FROM {alma_user_pass} WHERE uid = %d LIMIT 1;", $account->uid));

        if ($account->uid == 1 || alma_user_has_secure_role($account)) {
          $account->has_secure_role = TRUE;
        }
      }
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function alma_user_perm() {
  return array(
    'change admin passwords',
  );
}

/**
 * Implementation of hook_flush_caches().
 */
function alma_flush_caches() {
  return array('cache_alma_credentials');
}

/**
 * Implementation of hook_theme().
 */
function alma_user_theme($existing, $type, $theme, $path) {
  return array(
    'alma_user_status_block' => array(
      'arguments' => array(
        'cart_count' => 0,
        'borrowed_count' => 0,
        'reservation_count' => 0,
      ),
      'template' => 'alma_user_status_block',
      'file' => 'alma_user.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 *
 * Alter the login form to disable the standard Drupal username/password
 * combination and provide our own fields instead.
 */
function alma_user_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      // Add our own auth fields
      $form['borr_card'] = array(
        '#type' => 'password',
        '#title' => t('Borrower card'),
        '#required' => TRUE,
        '#weight' => -3,
      );

      $form['pin_code'] = array(
        '#type' => 'password',
        '#title' => t('Code'),
        '#required' => TRUE,
        '#weight' => -2,
      );

      // Add our own validation and submit handler.
      array_unshift($form['#validate'], 'alma_user_login_validate');
      $form['#submit'][] = 'alma_user_login_submit';

      // Remove the standard user login things.
      unset($form['name'], $form['pass'], $form['links']);
      break;
    case 'user_profile_form':
      // Remove or hide the standard user account settings we don't need.
      unset($form['account']['pass']);
      $form['account']['name']['#type'] = 'value';

      // Add link to change admin password
      $form['change_password_link'] = array(
        '#value' => l('Change admin password', 'user/' . $form['_account']['#value']->uid . '/secure_pass'),
      );
      break;
  }
}

/**
 * Validation for the login form.
 */
function alma_user_login_validate($form, &$form_state) {
  if (empty($form_state['values']['borr_card']) || empty($form_state['values']['pin_code'])) {
    // Empty borr_card or pin_code makes little sense to try and validate.
    return;
  }

  $uid = alma_user_check_credentials($form_state['values']['borr_card'], $form_state['values']['pin_code']);

  if ($uid) {
    global $user;
    $_user = user_load($uid);
    // Just to be completely certain that the user is valid before we 
    // try to log it in.
    if ($_user) {
      $user = $_user;
    }

    user_authenticate_finalize($form_state['values']);
  }
  else {
    form_set_error('borr_card', t('Invalid borrower card or pin code'));
  }
}

/**
 * Submit handler for the login form.
 */
function alma_user_login_submit($form, &$form_state) {
  global $user;
  if (!empty($form_state['values']['borr_card']) && !empty($form_state['values']['pin_code']) && $user->uid) {
    // If we have Alma credentials and a user was logged in, cache the
    // credentials in our own cache bin.
    cache_set($user->alma_id, $form_state['values']['borr_card'] . '|' . $form_state['values']['pin_code'], 'cache_alma_credentials', $_SERVER['REQUEST_TIME'] + 1800);
  }
  $form_state['redirect'] = variable_get('alma_user_login_destination', '<front>');
}

/**
 * Validate credentials with Alma
 *
 * Creates a new user if we do not have one already.
 *
 * @param string $borr_card
 *    User borrower card/ID
 * @param string $pin_code
 *    User pin code
 * @return
 *    User uid if credentials are valid, FALSE if not.
 */
function alma_user_check_credentials($borr_card, $pin_code) {
  $data = alma_client_get_patron_info($borr_card, $pin_code);

  // Check if user exists.
  $uid = db_result(db_query("SELECT uid FROM {alma_user} WHERE alma_id = '%s';", $data['patron_id']));
  if ($uid) {
    return $uid;
  }
  elseif (is_array($data) && !empty($data['patron_id'])) {
    $random_name = $_SERVER['REQUEST_TIME'] . mt_rand();
    // User data to pass to user_save().
    $user_data = array(
      'name' => $random_name,
      'mail' => $data['mails'][0]['mail'],
      // Login via Drupal's standard login should not be possible.
      'pass' => microtime(TRUE) . mt_rand(),
    );

    // If no e-mail was set in the XML, we need to generate a
    // random, invalid address,  since Drupal has a unique
    // constraint on the mail column in the users table.
    if (empty($user_data['mail'])) {
      $user_data['mail'] = $random_name . '@mail.invalid';
    }
    // Set the initial e-mail to the same e-mail-address.
    $user_data['init'] = $user_data['mail'];

    // Saves the user and returns the user UID.
    $user = user_save(NULL, $user_data);

    // Store Alma user reference in our own table.
    db_query("INSERT INTO {alma_user} (uid, alma_id, alma_name) VALUES (%d, '%s', '%s');", $user->uid, $data['patron_id'], $data['patron_name']);

    return($user->uid);
  }
}

/**
 * Helper function to check if user has a secure role.
 *
 * @param object $account
 *    A Drupal user object.
 * @return boolean
 *    Boolean indicating that user has a secure role.
 */
function alma_user_has_secure_role($account) {
  return array_intersect_key($account->roles, variable_get('alma_user_secure_roles', array()));
}

/**
 * Access control for the admin password form.
 */
function alma_user_forms_admin_pass_access($account) {
  // Only accounts with a secure role have admin passwords.
  if (!$account->has_secure_role) {
    return FALSE;
  }
  // Everyone is allowed to change their own password.
  elseif ($GLOBALS['user']->uid == $account->uid) {
    return TRUE;
  }
  elseif (user_access('change admin passwords')) {
    return TRUE;
  }
  return FALSE;
}

