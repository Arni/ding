<?php // $Id$

/**
 * @file ting.module
 * Module to integrate the Ting search engine in our Drupal site.
 */

/**
 * Implementation of hook_menu().
 */
function ting_menu() {
  $path = drupal_get_path('module', 'ting') . '/includes';
  $items = array();

  $items['admin/settings/ting'] = array(
    'title' => 'Ting search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting.admin.inc',
    'file path' => $path,
  );

  return $items;
}

/**
 * Implementation of hook_search().
 */
function ting_search($op = 'search', $keys = null) {
  switch ($op) {
    case 'name':
      return t('Ting');

    case 'status':
    case 'admin':
    case 'search':
      // We're not providing any sort of admin interface or actual
      // search results, since this is just a dummy module to get the
      // search/ting URL.
      return array();
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ting_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Load an object from Ting by ID.
 *
 * @param string $object_id
 *    Ting object ID.
 * @return mixed
 *    Object, if found - boolean FALSE if not.
 */
function ting_get_object_by_id($object_id) {
	$request = ting_get_request_factory()->getObjectRequest();
	$request->setObjectId($objectId);
	$object = ting_get_client()->execute($request);
  
  if (!$object) {
    return FALSE;
  }
  return $object;
}

/**
 * @param string $localId
 * @return TingClientObject
 */
function ting_get_object_by_local_id($localId) {
	$request = ting_get_request_factory()->getObjectRequest();
	$request->setLocalId($localId);
	$object = ting_get_client()->execute($request);
	
	if (!$object) {
    return FALSE;
  }
  return $object;
}	

/**
 * Display a Ting collection of objects.
 *
 * @param string $collection_id
 *    Ting collection ID.
 * @return mixed
 *    Collection object, if found - boolean FALSE if not.
 */
function ting_get_collection_by_id($collection_id) {

	$request = ting_get_request_factory()->getCollectionRequest();
	$request->setObjectId($collection_id);
	$collection = ting_get_client()->execute($request);
	
  if (!$collection) {
    return FALSE;
  }

  return $collection;
}

/**
 * Display a Ting collection of objects.
 *
 * @param string $collection_id
 *    Ting collection ID.
 * @return mixed
 *    Collection object, if found - boolean FALSE if not.
 */
function ting_do_search($query, $page = 1, $resultsPerPage = 10, $options = array()) {
	$request = ting_get_request_factory()->getSearchRequest();
	$request->setQuery($query);
	$request->setStart($resultsPerPage * ($page - 1) + 1);
	$request->setNumResults($resultsPerPage);
		
	$request->setFacets((isset($options['facets'])) ? $options['facets'] : array('facet.subject', 'facet.creator', 'dc.type', 'facet.date', 'facet.language'));
	$request->setNumFacets((isset($options['numFacets'])) ? $options['numFacets'] : ((sizeof($request->getFacets()) == 0) ? 0 : 10));
		
	$searchResult = ting_get_client()->execute($request);
		
	//Decorate search result with additional information
	foreach ($searchResult->collections as &$collection)
	{
		$collection = ting_add_collection_info($collection);
		$collection = ting_add_additional_info($collection);
		$collection = ting_sort_objects($collection);
	}
		
	return $searchResult;
}

/**
 * @param string $query The prefix to scan for
 * @param int $numResults The numver of results to return
 * @return TingClientScanResult
 */
function ting_do_scan($query, $numResults = 10) {
	$request = ting_get_request_factory()->getScanRequest();
	$request->setField('phrase.anyIndexes');
	$request->setLower($query);
	$request->setNumResults($numResults);
	return ting_get_client()->execute($request);
}
	
function ting_get_spell_suggestions($word, $numResults = 10) {
	$request = ting_get_request_factory()->getSpellRequest();
	$request->setWord($word);
	$request->setNumResults($numResults);
	return ting_get_client()->execute($request);
}

/**
 * @return TingClient
 */
function ting_get_client() {
	static $client;
	
	if (!isset($client))
	{
		ting_load_includes();
		$client = new TingClient(new TingClientDrupal6HttpRequestAdapter(),
																			new TingClientDrupalWatchDogLogger());
	}
	
	return $client;
}

/**
 * @return TingClientRequestFactory
 */
function ting_get_request_factory() {
	static $requestFactory;
	
	if (!isset($requestFactory))
	{
		ting_load_includes();
		
		$urlVariables = array(	'search' => 'ting_search_url',
													 	'scan' => 'ting_scan_url',
														'object' => 'ting_search_url',
														'collection' => 'ting_search_url',
														'spell' => 'ting_spell_url',
														'recommendation' => 'ting_recommendation_server');
			
		$urls = array();
		foreach ($urlVariables as $name => $setting)
		{
			$urls[$name] = variable_get($setting, false);
			if (!$urls[$name]) {
				throw new TingClientException('No Ting webservice url defined for '.$name);
			}
		}
		
		$requestFactory = new RestJsonTingClientRequestFactory($urls);
	}
	
	return $requestFactory;
}

function ting_add_collection_info(TingClientObjectCollection $collection)
{
	$collection->url = url('ting/collection/' . $collection->objects[0]->id, array('absolute' => true));
	$types = array();
	foreach ($collection->objects as &$object)
	{
		$types = array_merge($types, $object->data->type);
	}
	$collection->types = array_unique($types);
	return $collection;
}
	
function ting_sort_objects($collection)
{
	usort($collection->objects, array('ting_compare_objects'));
	$collection->objects = array_reverse($collection->objects);
	
	foreach ($collection->objects as $i => $object)
	{
		if (isset($object->additionalInformation->detailUrl) || 
				isset($object->additionalInformation->thumbnailUrl))
		{
			$object = array_shift(array_slice($collection->objects, $i, 1));
			unset($collection->objects[$i]);
			array_unshift($collection->objects, $object);
			break;
		}
	}
		
	return $collection;
}
	
function ting_add_object_url(TingClientObject $object)
{
	$object->url = url('ting/object/'.$object->id, array('absolute' => true));
	return $object;
}
	
function ting_add_additional_info($collection)
{
	//Add additional information info for cover images
	$isbns = array();

	$addiVariables = array(	'wsdlUrl' => 'addi_wdsl_url',
													'username' => 'addi_username',
													'group' => 'addi_group',
													'password' => 'addi_password');
	foreach ($addiVariables as $name => &$setting)
	{
		$setting = variable_get($setting, false);
		if (!$name)
		{
			watchdog('TingClient', 'Additional Information service setting '.$name.' not set', array(), WATCHDOG_WARNING);
			return $collection;
		}
	}
	extract ($addiVariables);
	$additionalInformationService = new AdditionalInformationService($wsdlUrl, $username, $group, $password);
		
	$objects = (isset($collection->objects)) ? $collection->objects : $collection;
	
	foreach($objects as $object)
	{
		$object = ting_add_object_url($object);
		if (isset($object->data->identifier))
		{
			foreach ($object->data->identifier as $identifier)
			{
				if ($identifier->type == TingClientObjectIdentifier::ISBN)
				{
					$isbns[] = $identifier->id;
				}
			}
		}
	}

	if (sizeof($isbns) > 0)
	{
		$additionalInformations = $additionalInformationService->getByIsbn($isbns);
		
		foreach ($additionalInformations as $id => $ai)
		{
			foreach ($objects as &$object)
			{
				if (isset($object->data->identifier))
				{						
					foreach ($object->data->identifier as $identifier)
					{
						if ($identifier->type == TingClientObjectIdentifier::ISBN &&
								$identifier->id == $id)
						{	
							$object->additionalInformation = $ai;
						}
					}
				}
			}
		}
	}
	
	if (isset($collection->objects))
	{
		$collection->objects = $objects;
	}
	else
	{
		$collection = $objects;			
	}
	
	return $collection;
}
	
function ting_compare_objects($o1, $o2, $criterias = NULL)
{
	$criterias = ($criterias) ? $criterias : array(	'language' => array('Dansk', 'Engelsk'),
																									'type' => array('Bog', 'DVD'));
		foreach ($criterias as $attribute => $values)
	{
		foreach ($values as $value)
		{
			$o1Check = in_array($value, $o1->data->$attribute);
			$o2Check = in_array($value, $o2->data->$attribute);
			if ($o1Check && !$o2Check)
			{
				return 1;
			} 
			else if (!$o1Check && $o2Check)
			{
				return -1;	
			}
			else if ($o1Check && $o2Check && (sizeof($criterias) > 1))
			{
				array_shift($criterias);
				return ting_compare_objects($o1, $o2, $criterias);
			}
		}
	}
			
	return 0;
}

function ting_load_includes()
{
	$includes = array('ting-dbc-php5-client/lib/TingClient',
										'ting-dbc-php5-client/lib/adapter/http/TingClientDrupal6HttpRequestAdapter',
										'ting-dbc-php5-client/lib/request/rest-json/RestJsonTingClientRequestFactory',
										'ting-dbc-php5-client/lib/log/TingClientDrupalWatchDogLogger',
										'addi-client/AdditionalInformationService');
	foreach ($includes as $include)
	{
		module_load_include('php', 'ting', 'lib/'.$include);
	}
}