<?php
// $Id$

/**
 * @file ding_slug.module
 * Handles the generation and loading of nodes from "slugs", 
 * small bits of text, suitable for use in URLs.
 */

/**
 * Implementation of hook_nodeapi().
 */
function ding_slug_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'library') {
    switch ($op) {
      case 'update':
        // Check if node has slug already.
        $slug = db_result(db_query("SELECT slug FROM {ding_slug} WHERE nid=%d", $node->nid));
        if ($slug) {
          break;
        }
        // Tricky: No break here, will continue to add slug.
      case 'insert':
        // Add a new slug.
        if (isset($node->ding_slug) && strlen($node->ding_slug) > 2) {
          db_query("INSERT INTO {ding_slug} (slug, nid) VALUES ('%s', %d);", ding_slug_slugify($node->ding_slug), $node->nid);
        }
        break;
      case 'load':
        $node->ding_slug = db_result(db_query("SELECT slug FROM {ding_slug} WHERE nid=%d", $node->nid));

    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function ding_slug_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] == 'node-form') {
    $form['ding_slug'] = array(
      '#type' => 'textfield',
      '#title' => t('Slug'),
      '#description' => t('A short name for this node, used in URLs.'),
      '#attributes' => array(),
      '#weight' => -4,
    );
    if ($form['#node']->ding_slug) {
      $form['ding_slug']['#value'] = $form['#node']->ding_slug;
      $form['ding_slug']['#attributes']['readonly'] = 'readonly';
      $form['ding_slug']['#attributes']['disabled'] = 'disabled';
    }
  }
}

/**
 * Implementation of hook_field_formatter_info().
 */
function ding_slug_field_formatter_info() {
  // CCK field formatter that links to the library page instead of the
  // node, if the library has a slug.
  return array(
    'ding_slug_link' => array(
      'label' => t('Title (link to library page)'),
      'field types' => array('nodereference'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function ding_slug_theme() {
  return array(
    'ding_slug_formatter_ding_slug_link' => array(
      'arguments' => array('element'),
    ),
  );
}

/**
 * Implementation of hook_ctools_arguments().
 */
function ding_slug_ctools_arguments() {
  $args = array();
  $args['ding_slug'] = array(
    'title' => t('Library slug'),
    'keyword' => 'node', // TODO: What is this?
    'description' => t('Finds the node context based on the "slug" name for a library.'),
    'context' => 'ding_slug_library_context',
  );
  return $args;
}

/**
 * Lookup an argument to see if it corresponds to a library.
 */
function ding_slug_library_context($arg = NULL, $conf = NULL, $empty = FALSE) {
  // If unset it wants a generic, unfilled context.
  if ($empty) {
    return ctools_context_create_empty('node');
  }

  // We can accept either a node object or a pure nid.
  if (is_object($arg)) {
    return ctools_context_create('node', $arg);
  }

  // Cast argument to an integer to see if it looks like a node ID.
  $num = intval($arg);
  if (is_numeric($num) && $num > 0) {
    $nid = $num;
  }
  // Try looking up the argument as a slug
  elseif (strlen($arg) > 1) {
    $nid = db_result(db_query("SELECT nid FROM {ding_slug} WHERE slug='%s'", $arg));
  }
  else {
    return FALSE;
  }

  if (!$nid || !is_numeric($nid)) {
    return FALSE;
  }

  $node = node_load($nid);
  if (!$node) {
    return FALSE;
  }

  ding_breadcrumbs_set_library($node);
  return ctools_context_create('node', $node);
}

/**
 * Slugify a piece of text, ie. make it ready for use in URLs.
 *
 * @param string $input
 *      Text to slugify.
 */
function ding_slug_slugify($input) {
  if (module_exists('transliteration')) {
    // Transliterate all letters down to ASCII
    $output = transliteration_get($input, '-', 'da');
  }
  else {
    $output = $input;
  }

  // Remove all characters that are not lowercase alphanumeric.
  $output = preg_replace('/[^a-z0-9]+/', '-', drupal_strtolower($output));
  // Remove dashes at the end of the string
  $output = preg_replace('/-+$/', '', $output);
  return $output;
}

/**
 * Get a library slug by the corresponding node ID
 *
 * @param integer $nid
 *    The node ID.
 * @return string
 *    The slug matching the node.
 */
function ding_slug_get_by_nid($nid) {
  $slug = db_result(db_query("SELECT slug FROM {ding_slug} WHERE nid=%d;", $nid));
  return $slug;
}

/**
 * Theme function for 'ding_slug_link' field formatter.
 *
 * Used with node reference, etc.
 */
function theme_ding_slug_formatter_ding_slug_link($element) {
  $output = '';
  if (!empty($element['#item']['nid']) && is_numeric($element['#item']['nid']) && ($title = _nodereference_titles($element['#item']['nid']))) {
    $slug = ding_slug_get_by_nid($element['#item']['nid']);
    // TODO: 'biblioteker' should not be hardcoded. Make admin
    // interface for selecting the library page.
    if ($slug) {
      $output = l($title, 'biblioteker/' . $slug);
    }
    else {
      $output = l($title, 'biblioteker/'. $element['#item']['nid']);
    }
  }
  return $output;
}

