<?php
/**
 * @file
 * Provides campaign feature to various node types in Ding!
 */

define('DING_CAMPAIGN_PATH', drupal_get_path('module', 'ding_campaign'));
define('DING_CAMPAIGN_DEFAULT_COUNT', 3);

/**
 * Implements hook_menu().
 */
function ding_campaign_menu() {
  $items = array();

  $items['admin/config/ding/campaign'] = array(
    'title' => 'Ding! Campaign',
    'description' => 'Configure the Ding! campaign system.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_campaign_configure'),
    'access arguments' => array('access administration pages'),
    'file' => 'ding_campaign.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ding_campaign_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['ding_campaign_red'] = array(
    'variables' => array('content' => NULL),
    'template' => 'ding_campaign-red',
    'path' => DING_CAMPAIGN_PATH . '/templates/',
  );

  $hooks['ding_campaign_green'] = array(
    'variables' => array('content' => NULL),
    'template' => 'ding_campaign-green',
    'path' => DING_CAMPAIGN_PATH . '/templates/',
  );

  $hooks['ding_campaign_blue'] = array(
    'variables' => array('content' => NULL),
    'template' => 'ding_campaign-blue',
    'path' => DING_CAMPAIGN_PATH . '/templates/',
  );

  return $hooks;
}

function ding_campaign_display($context, $count, $offset) {
  // Process page campaigns
  $q = '';
  
  if ($context['page'] != NULL) {
    $q = db_query("SELECT n.nid FROM {node} n, {ding_campaign} d, {ding_campaign_rules} r
      WHERE n.nid = d.cid
        AND r.cid = d.cid
        AND n.status = 1
        AND d.type = 'page'
      ORDER BY d.weight ASC
      LIMIT " . (int)$offset . ',' . (int)$count)
      ->fetchAll();
  }
  // Process search campaigns
  elseif ($context['search_term'] != NULL) {
    $terms = trim(drupal_strtolower(check_plain($context['search_term'])));
    $condition = '';

    // Multiple keywords, comma and/or space separated
    if (strpos($terms, ',') || strpos($terms, ' ')) {
      $terms = preg_replace('/(,?\s+)/', ',', $terms);
      $terms = implode('\',\'', explode(',', $terms));
      $condition = 'IN (\'' . $terms . '\')';
    }
    // Single keyword
    else {
      $condition = ' = \'' . $context['search_term'] . '\'';
    }

    $q = db_query("SELECT n.nid FROM {node} n, {ding_campaign} d
      WHERE n.nid = d.cid
        AND n.status = 1
        AND d.type = 'search'
        AND d.keywords " . $condition . "
      ORDER BY d.weight ASC 
      LIMIT " . (int)$offset . ',' . (int)$count)
      ->fetchAll();
  }

  // There is at least one result
  if (count($q) > 0) {
    $block = '';

    foreach ($q as $k => $v) {
      $node = node_load($v->nid);
      $content = '';

      switch ($node->field_camp_settings['und'][0]['value']) {
        case 'plain': default:
          $content = '<div class="ding-item-plain">' . $node->field_camp_text_plain['und'][0]['value'] . '</div>';
          break;
        case 'image':
          $content = '<img src="' . file_create_url($node->field_camp_image['und'][0]['uri']) . '" alt="" />';
          break;
        case 'full':
          $content = '<div class="ding-item-full">' . $node->field_camp_text_full['und'][0]['value'] . '</div>';
          break;
      }

      $theme = '';
      switch ($node->field_camp_theme['und'][0]['value']) {
        case 'theme_red':
          $theme = 'ding_campaign_red';
          break;
        case 'theme_blue':
          $theme = 'ding_campaign_blue';
          break;
        case 'theme_green':
          $theme = 'ding_campaign_green';
          break;
      }
      
      $block .= theme($theme, array('content' => $content));
    }

    return $block;
  }
}

/**
 * Implements hook_form_alter().
 */
function ding_campaign_form_alter(&$form, &$form_state, $form_id) {
  // Alter the Campaign addition form
  if ($form_id == 'campaign_node_form') {
    $form['#attached']['js'] = array(
      DING_CAMPAIGN_PATH . '/js/ding_campaign_scripts.js',
    );

    // Remove the 'N/A' type radiobox
    unset($form['field_camp_settings']['und']['#options']['_none']);
    // Remove the 'None' value from weight dropdown
    unset($form['field_camp_weight']['und']['#options']['_none']);
    // Remove the 'None' value from theme dropdown
    unset($form['field_camp_theme']['und']['#options']['_none']);

    $form['#validate'][] = 'ding_campaign_campaign_form_validate';
  }
  else {
    $enabled_types = variable_get('ding_campaign_node_types', array());

    // Alter the specific node form, mentioned in Campaign settings
    if (isset($form['#node']) && isset($enabled_types[$form['#form_id']]) && ($enabled_types[$form['#form_id']] === $form['#form_id'])) {
      $form['ding_campaigns_wrap'] = array(
        '#type' => 'fieldset',
        '#title' => 'Available campaigns',
      );

      $form['ding_campaigns_wrap']['ding_campaigns'] = array(
        '#type' => 'checkboxes',
        '#default_value' => isset($form['#node']->ding_campaigns) ? $form['#node']->ding_campaigns : array(),
        '#options' => ding_campaign_get_campaigns(),
        '#description' => 'Select campaigns which shall be displayed with this node.',
      );
    }
  }
}

/**
 * Implements hook_form_validate().
 */
function ding_campaign_campaign_form_validate($form, &$form_state) {
  if ($form_state['input']['field_camp_type']['und'] == 'search' &&
    empty($form_state['input']['field_camp_keywords']['und'][0]['value'])) {

    form_set_error('field_camp_keywords', t('Provide some search keyword.'));
  }
}

/**
 * Implements hook_node_insert().
 */
function ding_campaign_node_insert($node) {
  if ($node->type == 'campaign') {
    $dt = array(
      'cid' => $node->nid,
      'type' => $node->field_camp_type['und'][0]['value'],
      'keywords' => isset($node->field_camp_keywords['und'][0]['value']) ? $node->field_camp_keywords['und'][0]['value'] : '',
      'weight' => $node->field_camp_weight['und'][0]['value'],
      'theme' => $node->field_camp_theme['und'][0]['value'],
    );

    db_insert('ding_campaign')
      ->fields($dt)
      ->execute();

    return;
  }

  $enabled_types = variable_get('ding_campaign_node_types', array());

  // Process only selected node types
  if (isset($enabled_types[$node->form_id]) && $enabled_types[$node->form_id] === $node->form_id) {
    if (isset($node->ding_campaigns) && is_array($node->ding_campaigns)) {
      foreach ($node->ding_campaigns as $k => $v) {
        $dt = array(
          'nid' => $node->nid,
          'cid' => $v
        );

        // Skip the unused campaigns
        if ($v != 0) {
          db_insert('ding_campaign_rules')
            ->fields($dt)
            ->execute();
        }
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function ding_campaign_node_update($node) {
  // Update the campaign if needed
  if ($node->type == 'campaign') {

    // Check if campaign type has changed and it was assigned before to a node,
    // delete the assignment if so...
    $q = db_select('ding_campaign')
      ->fields('ding_campaign', array('type'))
      ->condition('cid', $node->nid)
      ->execute()
      ->fetchAll();

    if ($node->field_camp_type['und'][0]['value'] == 'search' &&
      $q[0]->type != $node->field_camp_type['und'][0]['value']) {
      db_delete('ding_campaign_rules')
        ->condition('cid', $node->nid)
        ->execute();
    }


    // Update campaign fields
    $dt = array(
      'type' => $node->field_camp_type['und'][0]['value'],
      'keywords' => $node->field_camp_keywords['und'][0]['value'],
      'weight' => $node->field_camp_weight['und'][0]['value'],
      'theme' => $node->field_camp_theme['und'][0]['value'],
    );

    db_update('ding_campaign')
      ->fields($dt)
      ->condition('cid', $node->nid)
      ->execute();

    return;
  }

  $enabled_types = variable_get('ding_campaign_node_types', array());

  // Process only selected node types
  if (isset($enabled_types[$node->type . '_node_form']) && $enabled_types[$node->type . '_node_form'] === $node->type . '_node_form') {
    if (isset($node->ding_campaigns) && is_array($node->ding_campaigns)) {
      // Renew the assigned campaigns
      db_delete('ding_campaign_rules')
        ->condition('nid', $node->nid)
        ->execute();

      foreach ($node->ding_campaigns as $k => $v) {
        $dt = array(
          'nid' => $node->nid,
          'cid' => $v
        );

        // Skip the unused campaigns
        if ($v != 0) {
          db_insert('ding_campaign_rules')
            ->fields($dt)
            ->execute();
        }
      }
    }
  }
}

/**
 * Implements hook_node_load().
 */
function ding_campaign_node_load($node) {
  $enabled_types = variable_get('ding_campaign_node_types', array());
  $nids = array_keys($node);

  // Process only selected node types
  if (isset($enabled_types[$node[$nids[0]]->type . '_node_form']) && $enabled_types[$node[$nids[0]]->type . '_node_form'] === $node[$nids[0]]->type . '_node_form') {
    $nids = array_keys($node);
    $q = db_select('ding_campaign_rules')
      ->fields('ding_campaign_rules', array('cid'))
      ->condition('nid', $node[$nids[0]]->nid)
      ->execute()
      ->fetchAll();

    foreach ($q as $k => $v) {
      $node[$nids[0]]->ding_campaigns[$v->cid] = $v->cid;
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function ding_campaign_node_delete($node) {
  if ($node->type == 'campaign') {
    db_delete('ding_campaign')
      ->condition('cid', $node->nid)
      ->execute();

    return;
  }

  $enabled_types = variable_get('ding_campaign_node_types', array());

  // Process only selected node types
  if (isset($enabled_types[$node->type . '_node_form']) && $enabled_types[$node->type . '_node_form'] === $node->type . '_node_form') {
    if (isset($node->ding_campaigns) && is_array($node->ding_campaigns)) {
      db_delete('ding_campaign_rules')
        ->condition('nid', $node->nid)
        ->execute();
    }
  }
}

/**
 * Fetch available campaigns.
 *
 * @return
 *   Array of campaigns with id's and title's
 */
function ding_campaign_get_campaigns() {
  $q = db_query("SELECT n.nid, n.title FROM {node} n, {ding_campaign} d
    WHERE n.nid = d.cid AND d.type = 'page'
    GROUP BY n.nid;")
    ->fetchAll();

  $campaigns = array();

  foreach ($q as $k => $v) {
    $campaigns[$v->nid] = $v->title;
  }

  return $campaigns;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_campaign_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}
