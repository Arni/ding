<?php
/**
 * @file
 * Availability information for ding objects.
 */

/**
 * Implements hook_menu().
 */
function ding_availability_menu() {
  $items['ding_availability/items'] = array(
    'title' => 'Availability status',
    'page callback' => 'ding_availability_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ding_availability/holdings'] = array(
    'title' => 'Availability and holding status',
    'page callback' => 'ding_availability_holdings_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_ding_provider_user().
 */
function ding_availability_ding_provider_user() {
  return array(
    'availability' => array(
      'required' => TRUE,
      'install time setup' => TRUE,
    ),
  );
}

/**
 *
 */
function ding_availability_js($provider_ids) {
  drupal_json_output(ding_availability_items(explode(',', $provider_ids)));
}

/**
 *
 */
function ding_availability_holdings_js($provider_ids) {
  drupal_json_output(ding_availability_holdings(explode(',', $provider_ids)));
}

/**
 *
 */
function ding_availability_items($provider_ids) {
  if (ding_provider_implements('availability', 'items')) {
    $items = ding_provider_invoke('availability', 'items', $provider_ids);
    if (!$items) {
      return array();
    }
    foreach ($items as &$item) {
      $item += array(
        'reservable' => FALSE,
        'available' => FALSE,
      );
      _ding_availability_text($item);
    }
  }
  else {
    $items = ding_availability_holdings($provider_ids);
  }

  return $items;
}

/**
 *
 */
function ding_availability_holdings($provider_ids) {
  $items = ding_provider_invoke('availability', 'holdings', $provider_ids);
  if (!$items) {
    return array();
  }
  foreach ($items as &$item) {
    $item += array(
      'reservable' => FALSE,
      'available' => FALSE,
      'holdings' => array(),
    );
    _ding_availability_text($item);
  }

  return $items;
}

/**
 * Implements hook_field_info().
 */
function ding_availability_field_info() {
  return array(
    'ding_availability_item' => array(
      'label' => t('Availability information.'),
      'description' => t('Availability information.'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ding_availability_default',
      'no_ui' => TRUE,
    ),
    'ding_availability_holdings' => array(
      'label' => t('Holdings information.'),
      'description' => t('Holdings information.'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ding_availability_default',
      'no_ui' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_load().
 */
function ding_availability_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    $items[$id][0] = array(
      'provider_id' => $entity->localId,
    );
  }
}

/**
 * Implements hook_widget_info_alter().
 */
function ding_availability_widget_info_alter(&$info) {
  if (isset($info['hidden'])) {
    $info['hidden']['field types'][] = 'ding_availability_item';
    $info['hidden']['field types'][] = 'ding_availability_holdings';
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ding_availability_field_formatter_info() {
  return array(
    'ding_availability_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ding_availability_item',
        'ding_availability_holdings'
      ),
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ding_availability_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $attached = array(
      'js' => array(
        drupal_get_path('module', 'ding_availability') . '/ding_availability.js' => array(
          'type' => 'file',
        ),
        array('data' => array('ding_availability_mode' => 'holdings', 'ding_availability' => array('availability-' . $item['provider_id'] => $item['provider_id'])), 'type' => 'setting'),
      ),
      'css' => array(
        drupal_get_path('module', 'ding_availability') . '/ding_availability.css'
      ),
    );
    switch ($field['type']) {
      case 'ding_availability_holdings':
        $element[$delta] = array(
          '#markup' => '<div class="holdings holdings-' . $item['provider_id'] . '"></div>',
          '#attached' => $attached,
      );
      break;
      case 'ding_availability_item':
        $element[$delta] = array(
          '#markup' => '<div class="availability availability-' . $item['provider_id'] . '"></div>',
          '#attached' => $attached,
        );
        break;
    }
  }
  return $element;
}

/**
 * Adds the human readable status text of an item.
 */
function _ding_availability_text(&$item) {
  if ($item['available'] && $item['reservable']) {
    $item['status'] = t('available');
  }
  elseif (!$item['available'] && $item['reservable']) {
    $item['status'] = t('on loan');
  }
  elseif ($item['available'] && !$item['reservable']) {
    $item['status'] = t('available');
  }
  elseif (!$item['available'] && !$item['reservable']) {
    $item['status'] = t('unavailable');
  }
}


/**
 * Implements hook_block_info().
 * Define availability legend block.
 */
function ding_availability_block_info() {
  return array(
    'legend' => array(
      'info' => t('Ding availability legend'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_view().
 * Define availability legend block.
 */
function ding_availability_block_view($delta = '') {
  $block['subject'] = t('Ding availability legend');
  $block['content'] = ding_availability_render_legend();
  return $block;
}

/**
 * Return rendered legend block for availability types.
 */
function ding_availability_render_legend() {

  drupal_add_css(drupal_get_path('module', 'ding_availability') . '/css/ding_availability_legend.css');

  // construct the image's path (.gif stored in a module subdir)
  $image_path = drupal_get_path('module', 'ding_availability') . '/images/blank.gif';

  // make some text, image's alt & title tags (SEO, accessibility)
  $availability_legend['available']     = t('Available');
  $availability_legend['available-ill'] = t('Available elsewhere');
  $availability_legend['on-loan']       = t('On loan');
  $availability_legend['unavailable']   = t('Unavailable');

  // render image html using theme_image (returns NULL if file doesn't exist)
  foreach ( $availability_legend as $key => $val ) {
    $format_label = '<span class="availability-label">' . $val . '</span>';
    $format_image = theme('image', array('path'=>$image_path, 'alt'=>$val, 'title'=>$val));
    $format_items[] = '<div class="availability-legend-item ' . $key . '">' . $format_image . $format_label . '</div>';
  };
  $format_items[] = '<div class="clearfix"></div>';

  return '<div class="availability-legend">' . implode($format_items) . '</div>';

}

/**
 * ting_object_entities preprocessor.
 */
function ding_availability_preprocess_ting_object_entities(&$variables) {
  if (!empty($variables['content']) && function_exists('ding_availability_render_legend')) {
    $variables['content']['availability_legend'] = array(
      '#markup' => ding_availability_render_legend(),
      '#weight' => -10,
    );
  }
}