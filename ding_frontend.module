<?php
/**
 * @file
 * Code for the ding frontend feature.
 */

include_once('ding_frontend.features.inc');

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function ding_frontend_ctools_plugin_directory($owner, $plugin_type) {
  return 'plugins/' . $plugin_type;
}

/**
 * Implements hook_field_formatter_info().
 */
function ding_frontend_field_formatter_info() {
  return array(
    'calendar_page' => array(
      'label' => t('Calendar page'),
      'field types' => array(
        'datetime',
      ),
    ),
    'calendar_header' => array(
      'label' => t('Calendar header'),
      'field types' => array(
        'datetime',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ding_frontend_field_formatter_view($entity_type, $entity, $field, $instances, $langcode, $items, $display) {
  $element = array();
  $timezone = variable_get('date_default_timezone', 0);
  foreach ($items as $delta => $item) {
    switch ($display['type']) {
      case 'calendar_page':
        $date = new DateObject(
          $item['value'],
          $item['timezone_db'],
          date_type_format($item['date_type'])
        );
        $timestamp = $date->format(DATE_FORMAT_UNIX);
        $vars = array(
          'day' => format_date($timestamp, 'custom', 'j', $timezone),
          'month' => format_date($timestamp, 'custom', 'F', $timezone),
          'weekday' => format_date($timestamp, 'custom', 'l', $timezone),
          'today' => date('j.F.l') == date('j.F.l', $timestamp),
        );
        $element[$delta] = array(
          '#markup' => theme('calendar_page', $vars),
        );
        break;

      case 'calendar_header':
        $date = new DateObject(
          $item['value'],
          $item['timezone_db'],
          date_type_format($item['date_type'])
        );
        $timestamp = $date->format(DATE_FORMAT_UNIX);
        $vars = array(
          'day' => format_date($timestamp, 'custom', 'j', $timezone),
          'month' => format_date($timestamp, 'custom', 'F', $timezone),
          'weekday' => format_date($timestamp, 'custom', 'l', $timezone),
          'year' => format_date($timestamp, 'custom', 'Y', $timezone),
          'today' => date('j.F.l') == date('j.F.l', $timestamp),
        );
        $element[$delta] = array(
          '#markup' => theme('calendar_header', $vars),
        );
        break;
    }
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function ding_frontend_theme() {
  return array(
    'calendar_page' => array(
      'template' => 'calendar-page',
      'variables' => array(
        'day' => '',
        'month' => '',
        'weekday' => '',
        '' => FALSE,
      ),
    ),
    'calendar_header' => array(
      'template' => 'calendar-header',
      'variables' => array(
        'day' => '',
        'month' => '',
        'weekday' => '',
        'year' => '',
        '' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_query_alter().
 *
 * Remove duplicates from the node search result view by grouping by nid and
 * removing the score field.
 */
function ding_frontend_query_alter($query) {
  if (isset($query->alterMetaData)) {
    if (isset($query->alterMetaData['view'])) {
      if ($query->alterMetaData['view']->name == 'ding_node_search') {
        $fields = &$query->getGroupBy();
        // Remove the score field and add group by nid.
        unset($fields['score']);
        $query->groupBy('nid');
      }
    }
  }
}
