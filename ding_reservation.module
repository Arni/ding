<?php

// Default interest period is ~six months.
define('DING_RESERVATION_DEFAULT_INTEREST_PERIOD', 183 * 86400);

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function ding_reservation_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 *
 * If you do this, CTools will pick up default panels pages in
 * <modulename>.pages_default.inc
 */
function ding_reservation_ctools_plugin_api($module, $api) {
  // @todo -- this example should explain how to put it in a different file.
  if ($module == 'panels_mini' && $api == 'panels_default') {
    return array('version' => 1);
  }
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}


/**
 * @file
 * Handles display and creation/deletion of reservations for users.
 */

/**
 * Implements hook_ding_entity_menu().
 */
function ding_reservation_ding_entity_menu(&$items, $type, $path, $index) {
  if ($type == 'ding_entity') {
    $items[$path . '/reserve'] = array(
      'title' => 'Reserve',
      'page callback' => 'ding_provider_get_form',
      'page arguments' => array('ding_reservation_reserve_form', $index),
      'access callback' => TRUE,
    );
  }
}

/**
 * Implements hook_ding_entity_view().
 */
function ding_reservation_ding_entity_view($entity, $view_mode, $langcode = NULL) {
  if ($entity->is('reservable')) {
    $entity->content['actions']['reserve'] = ding_provider_get_form('ding_reservation_reserve_form', $entity, TRUE);
  }
}

/**
 * Implementation of hook_ding_entity_is().
 */
function ding_reservation_ding_entity_is($object, $class) {
  if ($class == 'reservable' || $class == 'cartable') {
    if ($object->is('online')) {
      return FALSE;
    }
    elseif (in_array(drupal_strtolower($object->type), array('artikel', 'tidsskrift'))) {
      return FALSE;
    }
    return TRUE;
  }
}

/**
 * Reserve form callback.
 *
 * Note that this form relies on form caching, which is triggered by
 * ajaxifying the submit button.
 */
function ding_reservation_reserve_form($form, &$form_state, $entity = NULL, $hide_branch = FALSE) {
  global $user;
  $uri = ding_entity_uri('ding_entity', $entity);

  // We post to our own path as we might want to rebuild the form.
  // @todo move *_get_destination to ding_base?
  if ($_GET['q'] != $uri['path'] . '/reserve') {
    $form['#action'] = url($uri['path'] . '/reserve', array('query' => ding_provider_get_destination()));
  }

  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  $preferred_branch = '';
  if (isset($user->data['preferred_branch'])) {
    $preferred_branch = $user->data['preferred_branch'];
  }

  $hide_branch = !isset($form_state['branch_hidden']);

  $form_state['branch_hidden'] = FALSE;
  if ($hide_branch || !empty($preferred_branch)) {
    $form['preferred_branch'] = array(
      '#type' => 'value',
      '#value' => $preferred_branch,
    );

    $form_state['branch_hidden'] = TRUE;
  }
  else {
    $form['description'] = array(
      '#markup' => '<p>' . t('In order to make quick reservations, you must select a default pickup branch.') . '</p>',
    );

    $options = ding_provider_invoke('reservation', 'pickup_branches', $user);

    $form['preferred_branch'] = array(
      '#type' => 'select',
      '#title' => t('Default pickup branch'),
      '#options' => (array) $options,
      '#default_value' => $preferred_branch,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Reserve'),
    '#ajax' => array(
      'callback' => 'ding_reservation_reserve_form_callback',
      'wrapper' => 'ding-reservation-reserve-form',
    ),
  );

  return $form;
}

/**
 * Form validation.
 */
function ding_reservation_reserve_form_validate($form, &$form_state) {
  global $user;
  if (empty($form_state['values']['preferred_branch'])) {
    // Check an extra time if the user has a default branch, as they
    // might have clicked the button before logging in, and then the
    // value isn't set.
    if (isset($user->data['preferred_branch'])) {
      form_set_value($form['preferred_branch'], $user->data['preferred_branch'], $form_state);
    }
    else {
      if (!$form_state['branch_hidden']) {
        // Only show an error if the user had a choice.
        form_error($form, t('You must select a branch.'));
      }
      else {
        // Else simply rebuild the form.
        $form_state['rebuild'] = TRUE;
      }
    }
  }
}

/**
 * Form submission handler.
 */
function ding_reservation_reserve_form_submit($form, &$form_state) {
  global $user;
  if (!isset($user->data['preferred_branch']) || $form_state['values']['preferred_branch'] != $user->data['preferred_branch']) {
    try {
      $branch = $form_state['values']['preferred_branch'];
      ding_provider_invoke('reservation', 'set_preferred_branch', $user, $branch);
      user_save($user, array('data' => array('preferred_branch' => $branch)));
      $user->data['preferred_branch'] = $branch;
    }
    catch (DingReservationError $e) {
      drupal_set_message(t('An error occurred while saving default pickup branch. Please try again later.'), 'error');
      watchdog('ding_reservation', 'Error setting default branch, message: @message', array('@message', $e->getMessage()), WATCHDOG_ERROR);
    }
  }
  if ($form_state['values']['entity']) {
    $entity = $form_state['values']['entity'];
    try {
      // @todo implement custom interest periods.
      ding_provider_invoke('reservation', 'create', $user, $entity->provider_id, $form_state['values']['preferred_branch'], REQUEST_TIME + DING_RESERVATION_DEFAULT_INTEREST_PERIOD);
      $form_state['reserved'] = TRUE;
      if (ding_provider_implements('reservation', 'branch_name')) {
        $branch_name = ding_provider_invoke('reservation', 'branch_name', $user->data['preferred_branch']);
        drupal_set_message(t('"@title" reserved and will be available for pickup at @branch.', array('@title' => $entity->title, '@branch' => $branch_name)));
      }
      else {
        drupal_set_message(t('"@title" reserved.', array('@title' => $entity->title)));
      }
    }
    catch (DingProviderUserException $e) {
      drupal_set_message($e->getMessageT(array('@title' => $entity->title)), 'error');
    }
    catch (DingProviderAuthException $e) {
      // Just rethrow.
      throw $e;
    }
    catch (Exception $e) {
      drupal_set_message(t('An error occurred while reserving item. Please try again later.'), 'error');
      watchdog('ding_reservation', 'Error while reserving, message: @message', array('@message', $e->getMessage()), WATCHDOG_ERROR);
    }
  }
}


/**
 * Ajax callback.
 */
function ding_reservation_reserve_form_callback($form, &$form_state) {
  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );

  $html = theme('status_messages');
  if ($form_state['rebuild'] || form_get_errors()) {
    // Redisplay form.
    $html .= drupal_render($form);
  }

  $response['#commands'][] = ajax_command_ding_popup('ding_reservation', t('Reserve'), $html);

  return $response;
}
