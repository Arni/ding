<?php
/**
 * @file
 * Enables integration with Ting.
 */

define('TING_DEFAULT_CACHE_LIFETIME', 0);
/**
 * Implementation of hook_ctools_plugin_api().
 */
function ting_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 2);
  }
}


/**
 * Implements hook_ctools_plugin_directory() to let the system know
 * where our task and task_handler plugins are.
 */
function ting_ctools_plugin_directory($owner, $plugin_type) {
    return 'plugins/' . $plugin_type;
}

/**
 * Implements hook_ctools_plugin_type() to inform the plugin system that Page
 * Manager owns task, task_handler, and page_wizard plugin types.
 *
 * All of these are empty because the defaults all work.
 */
function ting_ctools_plugin_type() {
  return array(
    'tasks' => array(),
    'content_types' => array(),
    'task_handlers' => array(),
    'page_wizards' => array(),
    'arguments' => array(),
    'contexts' => array(),
  );
}
/**
 * Implements hook_menu().
 */
function ting_menu() {

  $items['ting/object/%ting_object'] = array(
    'title callback' => 'ting_page_title',
    'title arguments' => array(2),
    'page callback' => 'ting_object_page_view',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  );

  $items['ting/collection/%ting_collection'] = array(
    'title callback' => 'ting_page_title',
    'title arguments' => array(2),
    'page callback' => 'ting_collection_page_view',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  );

  $items['admin/structure/ting_object'] = array(
    'title' => 'Ting objects',
    'description' => 'Manage Ting object display.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_ting_object_display'),
    'access arguments' => array('administer content types'),
    'file' => 'ting.admin.inc',
  );

  $items['admin/structure/ting_collection'] = array(
    'title' => 'Ting collections',
    'description' => 'Manage Ting collection display.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_ting_collection_display'),
    'access arguments' => array('administer content types'),
    'file' => 'ting.admin.inc',
  );

  $items['admin/config/ting'] = array(
    'title' => 'Ting',
    'description' => 'Manage Ting integration settings.',
    'position' => 'left',
    'weight' => 20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/ting/settings'] = array(
    'title' => 'Ting',
    'description' => 'Manage Ting integration settings.',
    'weight' => -20,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_ting_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc'
  );

  $items['admin/config/ting/ranking'] = array(
    'title' => 'Search result ranking',
    'description' => 'Provides settings for how search results are ranked.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_ranking_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc',
  );

  $items['admin/config/ting/boost'] = array(
    'title' => 'Search result boost',
    'description' => 'Enable the user to boost specific values for specific fields in search results.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_boost_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc',
  );

  $items['admin/config/ting/proxy'] = array(
    'title' => 'Proxy settings',
    'description' => 'Ting Proxy settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_proxy_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc'
  );

  $items['admin/config/ting/registers'] = array(
    'title' => 'Open search register settings',
    'description' => 'Configure registers to use for specific open search searches.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_register_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc'
  );

  $items['admin/config/ting/online_url'] = array(
    'title' => 'Online URL labels',
    'description' => 'Define labels for online resources.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_online_url_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc'
  );

  $items['admin/config/ting/reservable'] = array(
    'title' => 'Reservable Ting objects',
    'description' => 'Configure on which Ting objects there will be a reservation button.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_reservable_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_ding_install_tasks().
 */
function ting_ding_install_tasks() {
  module_load_include('inc', 'ting', 'ting.admin');
  return array(
    'ting_admin_ting_settings' => array(
      'display_name' => st('Ting service settings'),
      'type' => 'form',
      'file' => drupal_get_path('module', 'ting') . '/ting.admin.inc',
    ),
    'ting_admin_proxy_settings' => array(
      'display_name' => st('Proxy service settings'),
      'type' => 'form',
      'file' => drupal_get_path('module', 'ting') . '/ting.admin.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function ting_permission() {
  return array(
    'administer ting settings' => array(
      'title' => t('Administer ting settings'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function ting_block_info() {
  return array(
    'ting_collection_types' => array(
      'info' => t('Ting collection material types'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'ting_object_types' => array(
      'info' => t('Ting alternative material types'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function ting_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ting_collection_types':
      if ($collection = menu_get_object('ting_collection', 2)) {
        $block['subject'] = array(
          '#markup' => t('Types'),
          '#prefix' => '<div class="ting-collection-types-header">',
          '#suffix' => '</div>',
        );
        $block['subject'] = render($block['subject']);
        $items = array();
        foreach ($collection->types as $type) {
          $items[] = l($type, '#' . $type, array('external' => TRUE));
        }
        $block['content'] = array(
          '#theme' => 'item_list',
          '#items' => $items,
        );
      }
      break;
    case 'ting_object_types':
      if (($object = menu_get_object('ting_object', 2)) &&
        ($collection = ting_collection_load($object->id))) {
        $block['subject'] = array(
          '#markup' => t('Types'),
          '#prefix' => '<div class="ting-object-types-header">',
          '#suffix' => '</div>',
        );
        $block['subject'] = render($block['subject']);
        $items = array();
        foreach ($collection->types as $type) {
          $uri = entity_uri('ting_collection', $collection);
          $uri['options']['fragment'] = $type;
          $items[] = l($type, $uri['path'], $uri['options']);
        }

        $block['content'] = array(
          '#theme' => 'item_list',
          '#items' => $items,
        );
      }
    break;
  }

  return $block;
}

/**
 * Implements hook_element_info().
 *
 * Define a new form element named ting_ranking_field.
 *
 * It calls the theme function theme_ting_ranking_field, if not defined
 * no elements will be displayed.
 */
function ting_element_info() {
  return array(
    'ting_boost_field' => array(
      '#input' => TRUE,
      '#process' => array('ting_boost_field_element_process'),
    ),
    'ting_ranking_field' => array(
      '#input' => TRUE,
      '#process' => array('ting_ranking_field_element_process'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ting_theme() {
  return array(
    'ting_object' => array(
      'template' => 'ting_object',
      'render element' => 'elements',
      'file' => 'ting.theme.inc',
    ),
    'ting_object_details' => array(
      'template' => 'ting_object_details',
      'render element' => 'elements',
      'file' => 'ting.theme.inc',
    ),
    'ting_ranking_field' => array(
      'arguments' => array('element' => NULL),
    ),

  );
}

/**
 * Implements hook_ding_devel_timers().
 */
function ting_ding_devel_timers() {
  return array(
    'ting' => array(
      'title' => 'Ting total request time was @time ms.',
    ),
    'ting_net' => array(
      'title' => 'Ting net time was @time ms.',
      'include in total' => FALSE,
    )
  );
}

/**
 * Implements hook_entity_info().
 */
function ting_entity_info() {
  $return = array(
    'ting_object' => array(
      'label' => t('Ting object'),
      'controller class' => 'TingObjectController',
      'base table' => 'ting_object',
      'revision table' => 'ting_object_revision',
      'uri callback' => 'ting_object_uri',
      'ding_entity_type' => 'ding_entity',
      'ding_entity_menu' => 'ting/object/%ting_object',
      'ding_entity_index' => 2,
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'tid',
        'revision' => 'vid',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        ),
      ),
      'bundles' => array(
        'ting_object' => array(
          'label' => 'Ting object',
          'admin' => array(
            'path' => 'admin/structure/ting_object',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),

    'ting_collection' => array(
      'label' => t('Ting collection'),
      'controller class' => 'TingCollectionController',
      'uri callback' => 'ting_collection_uri',
      'ding_entity_type' => 'ding_entity_collection',
      'ding_entity_menu' => 'ting/collection/%ting_collection',
      'ding_entity_index' => 2,
      'fieldable' => TRUE,
      'entity keys' => array(
        // We don't really have an ID, but use the ding_entity_id,
        // so we can use entity_uri.
        'id' => 'ding_entity_id',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        ),
      ),
      'bundles' => array(
        'ting_collection' => array(
          'label' => 'Ting collection',
          'admin' => array(
            'path' => 'admin/structure/ting_collection',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_field_info().
 */
function ting_field_info() {
  return array(
    // ting_object
    'ting_title' => array(
      'label' => t('Ting object title'),
      'description' => t('Ting object title'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ting_title_default',
      'no_ui' => TRUE,
    ),
    'ting_type' => array(
      'label' => t('Ting object type'),
      'description' => t('Ting object type'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ting_type_default',
      'no_ui' => TRUE,
    ),
    'ting_abstract' => array(
      'label' => t('Ting object abstract'),
      'description' => t('Ting object abstract'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ting_abstract_default',
      'no_ui' => TRUE,
    ),
    'ting_author' => array(
      'label' => t('Ting object author'),
      'description' => t('Ting object author'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ting_author_default',
      'no_ui' => TRUE,
    ),
    'ting_subjects' => array(
      'label' => t('Ting object subjects'),
      'description' => t('Ting object subjects'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ting_subjects_default',
      'no_ui' => TRUE,
    ),
    'ting_details' => array(
      'label' => t('Ting object details'),
      'description' => t('Ting object details'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ting_details_default',
      'no_ui' => TRUE,
    ),

    // ting_collection
    'ting_primary_object' => array(
      'label' => t('Ting collection primary object'),
      'description' => t('Ting collection primary object'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ting_primary_object_default',
      'no_ui' => TRUE,
    ),
    'ting_entities' => array(
      'label' => t('Ting collection listing'),
      'description' => t('Ting collection listing'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ting_entities_default',
      'no_ui' => TRUE,
    ),
    'ting_collection_types' => array(
      'label' => t('Ting collection object types'),
      'description' => t('Ting collection object types'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ting_collection_types_default',
      'no_ui' => TRUE,
    ),
  );
}

/**
 * Implements hook_widget_info_alter().
 */
function ting_widget_info_alter(&$info) {
  if (isset($info['hidden'])) {
    $info['hidden']['field types'] += array(
      'ting_title',
      'ting_type',
      'ting_abstract',
      'ting_author',
      'ting_subjects',
      'ting_details',

      'ting_primary_object',
      'ting_entities',
      'ting_collection_types',
    );
  }
}

/**
 * Implements hook_field_load().
 */
function ting_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  // Transform entities into a multiple field.
  if ($field['type'] == 'ting_entities') {
    foreach ($entities as $id => $entity) {
      foreach ($entity->entities as $ent) {
        $items[$id][] = array(
          'id' => $ent->id,
        );
      }
    }
  }
  else {
    foreach ($entities as $id => $entity) {
      $items[$id][0] = array(
        'id' => $entity->id,
      );
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ting_field_formatter_info() {
  return array(
    'ting_title_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ting_title',
      ),
      'settings' => array(
        'link_type' => 'none',
      ),
    ),
    'ting_type_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ting_type',
      ),
    ),
    'ting_abstract_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ting_abstract',
      ),
    ),
    'ting_author_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ting_author',
      ),
    ),
    'ting_subjects_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ting_subjects',
      ),
    ),
    'ting_details_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ting_details',
      ),
    ),

    'ting_primary_object_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ting_primary_object',
      ),
      'settings' => array(
        'view_mode' => 'teaser',
      ),
    ),
    'ting_entities_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ting_entities',
      ),
      'settings' => array(
        'hide_primary' => TRUE,
        'view_mode' => 'teaser',
      ),
    ),
    'ting_collection_types_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ting_collection_types',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ting_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = NULL;

  switch ($field['type']) {
    case 'ting_title':
      $element['link_type'] = array(
        '#type' => 'radios',
        '#title' => t('Link title to'),
        '#options' => array(
          'none' => t("Don't link"),
          'object' => t('Object'),
          'collection' => t('Collection, if part of a collection'),
        ),
        '#default_value' => $settings['link_type'],
      );
      break;
    case 'ting_entities':
      $element['hide_primary'] = array(
        '#type' => 'checkbox',
        '#title' => t('Hide primary'),
        '#description' => t("Don't show the primary object as part of the list."),
        '#default_value' => $settings['hide_primary'],
      );
    case 'ting_primary_object':
      $entity_info = entity_get_info('ting_object');
      $view_modes = array();
      foreach ($entity_info['view modes'] as $view_mode => $view_mode_info) {
        $view_modes[$view_mode] = $view_mode_info['label'];
      }

      $element['view_mode'] = array(
        '#title' => t('View mode'),
        '#type' => 'select',
        '#default_value' => $settings['view_mode'],
        '#options' => $view_modes,
      );
    break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ting_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  switch ($field['type']) {
    case 'ting_title':
      $summary .= t('Link type: @type', array('@type' => $settings['link_type']));
      break;
    case 'ting_entities':
      $summary .= $settings['hide_primary'] ? t("Don't show primary. ") : t("Include primary. ");
    case 'ting_primary_object':
      $view_mode = $settings['view_mode'];
      $entity_info = entity_get_info('ting_object');
      if (isset($entity_info['view modes'][$view_mode])) {
        $view_mode = $entity_info['view modes'][$view_mode]['label'];
      }

      $summary .= t('View mode @view_mode', array('@view_mode' => $view_mode));
      break;
  }

  return $summary;
}


/**
 * Implements hook_field_formatter_view().
 */
function ting_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    switch ($display['type']) {
      case 'ting_title_default':
        /*
         * This doesn't work due to the way objects gets cached at the
         * moment. Until that is fixed, link all objects to collections when
         * requested, the page will redirect to ting/object/X if there is only
         * one.
         */
        $type = 'ting_object';
        if ($display['settings']['link_type'] == 'collection') {
        //   // Check if the cache contains an collection for this id.
        //   $x = ting_cache_get($entity->id);
        //   if ($x instanceof TingClientObjectCollection) {
            $type = 'ting_collection';
        //   }
        }
        if ($display['settings']['link_type'] != 'none') {
          $url = entity_uri($type, $entity);
          $title = l($entity->title, $url['path'], $url['options']);
        }
        else {
          $title = check_plain($entity->title);
        }
        $element[$delta] = array(
          '#prefix' => '<h2>',
          '#suffix' => '</h2>',
          '#markup' => $title,
        );
        break;
      case 'ting_type_default':
        $element[$delta] = array(
          '#theme' => 'item_list',
          '#items' => array(
            array(
              'data' => $entity->type,
              'class' => array(drupal_html_class($entity->type)),
            )
          ),
        );
        break;
      case 'ting_abstract_default':
        $element[$delta] = array(
          '#markup' => check_plain($entity->abstract),
        );
        break;
      case 'ting_author_default':
        $creators = array();
        foreach ($entity->creators as $i => $creator) {
          $creators[] = l($creator, 'search/ting/dc.creator=' . $creator, array('attributes' => array('class' => array('author'))));
        }
        $markup_string = '';
        if (count($creators)) {
          $markup_string = 'By !author_link';
        }
        if ($entity->date != '') {
          $markup_string .= ' (@year)';
        }
        $element[$delta] = array(
          '#markup' => t($markup_string, array(
                       '!author_link' => implode(', ', $creators),
                       '@year' => $entity->date, // So wrong, but appears to
                                                 // be the way the data is.
                     )),
        );
        break;
      case 'ting_subjects_default':
        $subjects = array();
        foreach ($entity->subjects as $subject) {
          $subjects[] = l($subject, 'search/ting/dc.subject=' . $subject, array('attributes' => array('class' => array('author'))));
        }
        $element[$delta] = array(
          '#markup' => implode(' ', $subjects),
        );
        break;
      case 'ting_details_default':
        $element[$delta] = array(
          '#theme' => 'ting_object_details',
          '#object' => $entity,
        );
        break;

      case 'ting_primary_object_default':
        $element[$delta] = ting_object_view($entity->primary_object, $display['settings']['view_mode']);
        break;
      case 'ting_entities_default':
        // Skip the first.
        if ($delta == 0 && $display['settings']['hide_primary']) {
          continue;
        }
        $element[$delta] = ting_object_view($entity->entities[$delta], $display['settings']['view_mode']);
        break;
      case 'ting_collection_types_default':
        $element[$delta] = array(
          '#theme' => 'item_list',
          '#items' => $entity->types,
        );
        break;
    }
  }

  return $element;
}


/**
 * Implements hook_registry_files_alter().
 */
function ting_registry_files_alter(&$files, $modules) {
  // Add in ting client classes, so the autoloader knows where to find
  // them. This is more handy than hardcoding them into the info file.
  $def = array(
    'module' => 'ting',
    'weight' => 0,
  );

  // Add all of the Ting client library to the registry.
  foreach (file_scan_directory(drupal_get_path('module', 'ting') . '/lib/ting-client/lib', '/\.php$/') as $filename => $dummy) {
    $files[$filename] = $def;
  }

  // And the Ting client unit tests as well.
  foreach (file_scan_directory(drupal_get_path('module', 'ting') . '/lib/ting-client/tests', '/\.test$/') as $filename => $dummy) {
    $files[$filename] = $def;
  }
}

/**
 * Implements hook_ding_entity_is().
 */
function ting_ding_entity_is($object, $class) {
  if ($class == 'reservable' || $class == 'cartable') {
    $sources = variable_get('ting_reservable_sources', _ting_default_reservable_sources());
    $types = variable_get('ting_reservable_types', _ting_default_reservable_types());
    if (in_array(drupal_strtolower($object->ac_source), $sources) && in_array(drupal_strtolower($object->type), $types)) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  elseif ($class == 'periodical') {
    // @todo make this configurable.
    // @todo also make sure that availability information isn't displayed
    //   on the object
    return in_array(drupal_strtolower($object->type), array('tidsskrift', 'periodikum', 'årbog'));
  }
}

/**
 * Implements hook_page_alter().
 *
 * Log, and display if the devel module is active and the user has
 * permissions, a warning if the datawell was queried more than once.
 */
function ting_page_alter(&$page) {
  $calls = &drupal_static('ting_execute_cache');
  if (sizeof($calls) > 1) {
    $calls_str = array();
    foreach ($calls as $call) {
      $calls_str[] = print_r($calls, TRUE);
    }
    watchdog('ting', 'Warning, ting_execute called @x times:<br />"@queries"', array('@x' => sizeof($calls), '@queries' => join('" "', $calls_str)), WATCHDOG_WARNING);
    if (function_exists('dpm') && user_access('access devel information')) {
      drupal_set_message(t('Warning, ting_execute called @x times.', array('@x' => sizeof($calls))), 'error');
      dpm($calls, 'ting_execute queries:');
    }
  }
}

/**
 * Page callback: Display a ting object.
 */
function ting_object_page_view($object) {
  return ting_object_view($object);
}

/**
 * Page callback: Display a ting collection.
 */
function ting_collection_page_view($object) {
  if (sizeof($object->entities) < 2) {
    drupal_goto('ting/object/' . $object->id);
  }
  return ting_collection_view($object);
}

/**
 * Page title callback.
 */
function ting_page_title($object) {
  return check_plain($object->title);
}

/**
 * Callback for entity_uri(). Returns the uri for the object.
 */
function ting_object_uri($collection) {
  return array('path' => 'ting/object/' . $collection->id);
}

/**
 * Callback for entity_uri(). Returns the uri for the collection.
 */
function ting_collection_uri($collection) {
  return array('path' => 'ting/collection/' . $collection->id);
}

/**
 * Add a provider_id to the objects.
 *
 * @to do
 *   Maybe this should be in a mapper module.
 */
function ting_ting_object_load($objects) {
  foreach ($objects as $object) {
    $object->provider_id = $object->localId;
  }
}

/**
 * Load a ting object.
 *
 * Don't use this, use ding_entity_load().
 */
function ting_object_load($id) {
  return ding_entity_load($id, 'ting_object');
}

/**
 * Load multiple ting objects.
 *
 * Don't use this, use ding_entity_load_multiple().
 */
function ting_object_load_multiple($ids) {
  return ding_entity_load_multiple($ids, 'ting_object');
}

/**
 * Load a ting collection.
 *
 * Don't use this, use ding_collection_load().
 */
function ting_collection_load($id) {
  return ding_entity_load($id, 'ting_collection');
}

/**
 * Display a ting object.
 */
function ting_object_view($object, $view_mode = 'full') {
  $object->content = array();

  // _field_invoke_multiple gets pissy if the arrays aren't indexed by the
  // local ID.
  field_attach_prepare_view('ting_object', array($object->tid => $object), $view_mode);
  entity_prepare_view('ting_object', array($object->id => $object));
  $object->content += field_attach_view('ting_object', $object, $view_mode);

  // Allow modules to make their own additions to the object.
  module_invoke_all('ding_entity_view', $object, $view_mode);
  module_invoke_all('entity_view', $object, 'ting_object', $view_mode);

  $build = $object->content;
  unset($object->content);

  $build += array(
    '#theme' => 'ting_object',
    '#object' => $object,
    '#view_mode' => $view_mode,
  );

  drupal_alter('ting_view', $build);

  return $build;
}

/**
 * Display a ting collection.
 */
function ting_collection_view($object, $view_mode = 'full') {
  $object->content = array();

  // _field_invoke_multiple gets pissy if the arrays aren't indexed by the
  // local ID.
  field_attach_prepare_view('ting_collection', array($object->ding_entity_id => $object), $view_mode);
  entity_prepare_view('ting_collection', array($object->id => $object));
  $object->content += field_attach_view('ting_collection', $object, $view_mode);

  // Allow modules to make their own additions to the collection.
  module_invoke_all('ding_entity_collection_view', $object, $view_mode);
  module_invoke_all('entity_view', $object, 'ting_collection', $view_mode);

  $build = $object->content;
  unset($object->content);

  $build += array(
    // TODO: Separate theming?
    '#theme' => 'ting_object',
    '#object' => $object,
    '#view_mode' => $view_mode,
  );

  drupal_alter('ting_collection_view', $build);
  return $build;
}

/**
 * Sorts the objects according to type and language, but maintains the order
 * of types and languages in the original array.
 */
function _ting_type_lang_sort($objects, &$return_types) {
  $types = array();
  $language = array();
  $sorted = array();
  // Sort the objects into type buckets containing language buckets.
  foreach ($objects as $object) {
    // We're using keys so we don't have to uniq its afterwards.
    $types[$object->type] = TRUE;
    $languages[$object->language] = TRUE;
    $buckets[$object->type][$object->language][] = $object;
  }

  $return_types = array_keys($types);
  // Now flatten the buckets into a flat array.
  foreach ($return_types as $type) {
    foreach (array_keys($languages) as $language) {
      if (isset($buckets[$type][$language])) {
        $sorted = array_merge($sorted, $buckets[$type][$language]);
      }
    }
  }

  return $sorted;
}

/**
 * Default url labels.
 *
 * Defined as a function as a define can only be scalars.
 */
function _ting_default_url_labels() {
  return array(
    '_default' => t('See online'),
    'cd' => t('Hear online'),
    'kassettelydbånd' => t('Hear online'),
    'lydbog (cd)' => t('Hear online'),
    'lydbog (cd-mp3)' => t('Hear online'),
    'lydbog (online)' => t('Hear online'),
    'grammofonplade' => t('Hear online'),
  );
}

/**
 * Processor for the ting_boost_field form element.
 */
function ting_boost_field_element_process($element, $form_state) {
  $element['#tree'] = TRUE;
  $element['#prefix'] = '<div class="ting-boost-field-element clearfix">';
  $element['#suffix'] = '</div>';

  $element['field_name'] = array(
    '#title' => t('Field name'),
    '#type' => 'select',
    '#options' => array(
      '' => '- ' . t('Choose') . ' -',
      'ac.source' => t('Source'),
      'dc.creator' => t('Author'),
      'dc.date' => t('Year of publish'),
      'dc.language' => t('Language'),
      'dc.type' => t('Material type'),
      'dc.identifier' => t('ISBN number'),
    ),
    '#default_value' => (isset($element['#value']['field_name'])) ? $element['#value']['field_name'] : NULL,
    '#attributes' => array('class' => array('field-name')),
  );

  $element['field_value'] = array(
    '#title' => t('Value'),
    '#type' => 'textfield',
    '#default_value' => (isset($element['#value']['field_value'])) ? $element['#value']['field_value'] : NULL,
  );

  $element['weight'] = array(
    '#title' => t('Weight'),
    '#type' => 'select',
    '#options' => drupal_map_assoc(range(1, 10)),
    '#default_value' => (isset($element['#value']['weight'])) ? $element['#value']['weight'] : NULL,
  );

  return $element;
}

/**
 * Processor for the ting_ranking_field form element.
 */
function ting_ranking_field_element_process($element, $form_state) {
  $element['#tree'] = TRUE;
  $element['#prefix'] = '<div class="ting-ranking-field-element clearfix">';
  $element['#suffix'] = '</div>';

  $element['field_type'] = array(
    '#title' => t('Type'),
    '#type' => 'select',
    '#options' => array(
      'phrase' => t('Phrase'),
      'word' => t('Word'),
    ),
    '#default_value' => (isset($element['#value']['field_type'])) ? $element['#value']['field_type'] : NULL,
  );

  $element['field_name'] = array(
    '#title' => t('Field name'),
    '#type' => 'select',
    '#options' => array(
      '' => '- ' . t('Choose') . ' -',
      'ac.source' => t('Source'),
      'dc.title' => t('Title'),
      'dc.creator' => t('Author'),
      'dc.subject' => t('Subject'),
      'dc.date' => t('Year of publish'),
      'dc.type' => t('Material type'),
    ),
    '#default_value' => (isset($element['#value']['field_name'])) ? $element['#value']['field_name'] : NULL,
    '#attributes' => array('class' => array('field-name')),
  );

  $element['weight'] = array(
    '#title' => t('Weight'),
    '#type' => 'select',
    '#options' => drupal_map_assoc(range(1, 10)),
    '#default_value' => (isset($element['#value']['weight'])) ? $element['#value']['weight'] : NULL,
  );

  return $element;
}

/**
 * Theme function to format the custom form element ting_ranking_field.
 */
function theme_ting_ranking_field($element) {
  return theme('form_element', $element);
}

/**
 * Default reservable sources.
 *
 * Defined as a function as a define can only be scalars.
 */
function _ting_default_reservable_sources() {
  return array(
    'bibliotekets materialer',
  );
}

/**
 * Default reservable types.
 *
 * Defined as a function as a define can only be scalars.
 */
function _ting_default_reservable_types() {
  return array(
    'billedbog',
    'blu-ray disc',
    'bog',
    'cd',
    'cd-rom',
    'diskette',
    'dvd',
    'dvd-rom',
    'film',
    'grammofonplade',
    'kassettelydbånd',
    'lydbog (cd)',
    'lydbog (cd-mp3)',
    'periodikum',
    'playstation2-spil',
    'playstation3-spil',
    'playstation-spil',
    'puslespil',
    'spil',
    'tegneserie',
    'video',
    'wii-spil',
    'xbox-spil',
    'årbog',
  );
}

/**
 * Fetch known types from the datawell.
 */
function _ting_fetch_well_types() {
  // Get a list of types by executing a null query and look at the facets
  // result.
  $options = array(
    'facets' => array('facet.type'),
    'numFacets' => 99,
    'reply_only' => TRUE,
    'sort' => 'random',
  );
  module_load_include('client.inc', 'ting');
  $result = ting_do_search("*=*", 0, 0, $options);

  $types = array();
  foreach ($result->facets['facet.type']->terms as $term => $count) {
    $types[drupal_strtolower($term)] = $count;
  }

  // Only save if we actually got any types.
  if (!empty($types)) {
    variable_set('ting_well_types', $types);
  }
}

/**
 * Fetch known sources from the datawell.
 */
function _ting_fetch_well_sources() {
  // Get a list of sources by executing a null query and look at the facets
  // result.
  $options = array(
    'facets' => array('facet.acSource'),
    'numFacets' => 99,
    'reply_only' => TRUE,
    'sort' => 'random',
  );
  module_load_include('client.inc', 'ting');
  $result = ting_do_search("*=*", 0, 0, $options);

  $sources = array();
  foreach ($result->facets['facet.acSource']->terms as $term => $count) {
    $sources[drupal_strtolower($term)] = $count;
  }

  // Only save if we actually got any types.
  if (!empty($sources)) {
    variable_set('ting_well_sources', $sources);
  }
}
