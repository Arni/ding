<?php

/**
 * @file
 * Enables integration with Ting.
 */

/**
 * Implements hook_menu().
 */
function ting_menu() {
  $items['ting/object/%ting_object'] = array(
    'title callback' => 'ting_page_title',
    'title arguments' => array(2),
    'page callback' => 'ting_object_page_view',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  );

  $items['ting/collection/%ting_collection'] = array(
    'title callback' => 'ting_page_title',
    'title arguments' => array(2),
    'page callback' => 'ting_collection_page_view',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  );

  $items['admin/config/ting'] = array(
    'title' => 'Ting',
    'description' => 'Manage Ting integration settings.',
    'position' => 'left',
    'weight' => 20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/ting/settings'] = array(
    'title' => 'Ting',
    'description' => 'Manage Ting integration settings.',
    'weight' => -20,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_ting_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc'
  );

  $items['admin/config/ting/addi'] = array(
    'title' => 'ADDI settings',
    'description' => 'Additional information service settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_addi_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc',
  );

  $items['admin/config/ting/proxy'] = array(
    'title' => 'Proxy settings',
    'description' => 'Ting Proxy settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_proxy_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_ding_install_tasks().
 */
function ting_ding_install_tasks() {
  module_load_include('inc', 'ting', 'ting.admin');
  return array(
    'ting_admin_ting_settings' => array(
      'display_name' => st('Ting service settings'),
      'type' => 'form',
      'file' => drupal_get_path('module', 'ting') . '/ting.admin.inc',
    ),
    'ting_admin_addi_settings' => array(
      'display_name' => st('ADDI service settings'),
      'type' => 'form',
      'file' => drupal_get_path('module', 'ting') . '/ting.admin.inc',
    ),
    'ting_admin_proxy_settings' => array(
      'display_name' => st('Proxy service settings'),
      'type' => 'form',
      'file' => drupal_get_path('module', 'ting') . '/ting.admin.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function ting_permission() {
  return array(
    'administer ting settings' => array(
      'title' => t('Administer ting settings'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function ting_block_info() {
  return array(
    'ting_collection_types' => array(
      'info' => t('Ting collection material types'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'ting_object_types' => array(
      'info' => t('Ting alternative material types'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function ting_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ting_collection_types':
      if ($collection = menu_get_object('ting_collection', 2)) {
        $block['subject'] = t('Types');
        $items = array();
        foreach ($collection->types as $type) {
          $items[] = l($type, '#' . $type, array('external' => TRUE));
        }
        $block['content'] = array(
          '#theme' => 'item_list',
          '#items' => $items,
        );
      }
      break;
    case 'ting_object_types':
      if (($object = menu_get_object('ting_object', 2)) &&
        ($collection = ting_collection_load($object->id))) {

        $block['subject'] = t('Types');
        $items = array();
        foreach ($collection->types as $type) {
          $uri = entity_uri('ting_collection', $collection);
          $uri['options']['fragment'] = $type;
          $items[] = l($type, $uri['path'], $uri['options']);
        }

        $block['content'] = array(
          '#theme' => 'item_list',
          '#items' => $items,
        );
      }
    break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function ting_theme() {
  return array(
    'ting_object' => array(
      'template' => 'ting_object',
      'render element' => 'elements',
      'file' => 'ting.theme.inc',
    ),
    'ting_object_overview' => array(
      'template' => 'ting_object_overview',
      'render element' => 'elements',
      'file' => 'ting.theme.inc',
    ),
    'ting_object_details' => array(
      'template' => 'ting_object_details',
      'render element' => 'elements',
      'file' => 'ting.theme.inc',
    ),
  );
}

/**
 * Implements hook_ding_entity_type().
 */
function ting_ding_entity_types() {
  return array(
    'ding_entity' => 'ting_object',
    'ding_entity_collection' => 'ting_collection',
  );
}

/**
 * Implements hook_entity_info().
 */
function ting_entity_info() {
  $return = array(
    'ting_object' => array(
      'label' => t('Ting object'),
      'controller class' => 'TingObjectController',
      'base table' => 'ting_object',
      'revision table' => 'ting_object_revision',
      'uri callback' => 'ting_object_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'tid',
        'revision' => 'vid',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        ),
        'listing' => array(
          'label' => t('Listing'),
          'custom settings' => FALSE,
        ),
      ),
    ),

    'ting_collection' => array(
      'label' => t('Ting collection'),
      'controller class' => 'TingCollectionController',
      'uri callback' => 'ting_collection_uri',
      'entity keys' => array(
        // We don't really have an ID, but use the ding_entity_collection_id,
        // so we can use entity_uri.
        'id' => 'ding_entity_collection_id',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        ),
        'listing' => array(
          'label' => t('Listing'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  return $return;
}

/**
 * Page callback: Display a ting object.
 */
function ting_object_page_view($object) {
  return ting_object_view($object);
}

/**
 * Page callback: Display a ting collection.
 */
function ting_collection_page_view($object) {
  if (sizeof($object->entities) < 2) {
    drupal_goto('ting/collection/' . $object->id);
  }
  return ting_collection_view($object);
}

/**
 * Page title callback.
 */
function ting_page_title($object) {
  return check_plain($object->title);
}

/**
 * Callback for entity_uri(). Returns the uri for the object.
 */
function ting_object_uri($collection) {
  return array('path' => 'ting/object/' . $collection->id);
}

/**
 * Callback for entity_uri(). Returns the uri for the collection.
 */
function ting_collection_uri($collection) {
  if (sizeof($collection->entities) > 1) {
    return array('path' => 'ting/collection/' . $collection->id  . (isset($collection->reply->load_query) ? '/' . $collection->reply->load_query : ''));
  }
  else {
    return entity_uri('ting_object', $collection->primary_object);
  }
}

/**
 * Add a provider_id to the objects.
 *
 * @todo
 *   Maybe this should be in a mapper module.
 */
function ting_ting_object_load($objects) {
  foreach ($objects as $object) {
    $object->provider_id = $object->localId;
  }
}

/**
 * Load a ting object.
 */
function ting_object_load($id) {
  return reset(entity_load('ting_object', array(), array('ding_entity_id' => array($id))));
}

/**
 * Load a ting collection.
 */
function ting_collection_load($id, $query = NULL) {
  $conditions = array('ding_entity_collection_id' => array($id));

  // Add original query if it exists.
  if ($query) {
    $conditions['query'] = $query;
  }
  return reset(entity_load('ting_collection', array(), $conditions));
}

/**
 * Display a ting object.
 */
function ting_object_view($object, $view_mode = 'full') {
  $object->content = array();
  $object->content['overview'] = array(
    '#theme' => 'ting_object_overview',
    '#object' => $object,
    '#view_mode' => $view_mode,
    'left' => array(),
    'right' => array(),
  );

  if ($view_mode == 'full') {
    $object->content['details'] = array(
      '#theme' => 'ting_object_details',
      '#object' => $object,
      '#view_mode' => $view_mode,
    );
  }

  field_attach_prepare_view('ting_object', array($object->id => $object), $view_mode);
  entity_prepare_view('ting_object', array($object->id => $object));
  $object->content += field_attach_view('ting_object', $object, $view_mode);

  // Allow modules to make their own additions to the object.
  module_invoke_all('ding_entity_view', $object, $view_mode);
  module_invoke_all('entity_view', $object, 'ting_object', $view_mode);

  $build = $object->content;
  unset($object->content);

  $build += array(
    '#theme' => 'ting_object',
    '#object' => $object,
    '#view_mode' => $view_mode,
  );

  drupal_alter('ting_view', $build);
  return $build;
}

/**
 * Display a ting collection.
 */
function ting_collection_view($object, $view_mode = 'full') {
  $object->content = array();

  $object->content['overview'] = array(
    '#theme' => 'ting_object_overview',
    '#object' => $object->primary_object,
    '#view_mode' => $view_mode,
    'left' => array(),
    'right' => array(),
  );

  if ($view_mode == 'full') {
    foreach ($object->types as $type) {
      $object->content['entities'][$type] = array(
        '#prefix' => '<h2>' . $type . '</h2><a name="' . $type . '"></a>',
      );
    }
    foreach ($object->entities as $entity) {
      $object->content['entities'][$entity->type][$entity->id] = ting_object_view($entity, 'teaser');
    }
  }
  entity_prepare_view('ting_collection', array($object->id => $object));

  // Allow modules to make their own additions to the collection.
  module_invoke_all('ding_entity_collection_view', $object, $view_mode);
  module_invoke_all('entity_view', $object, 'ting_collection', $view_mode);

  $build = $object->content;
  unset($object->content);

  $build += array(
    // TODO: Separate theming?
    '#theme' => 'ting_object',
    '#object' => $object,
    '#view_mode' => $view_mode,
  );

  drupal_alter('ting_view', $build);
  return $build;
}

/**
 * Sorts the objects according to type and language, but maintains the order
 * of types and languages in the original array.
 */
function _ting_type_lang_sort($objects, &$return_types) {
  $types = array();
  $language = array();
  $sorted = array();
  // Sort the objects into type buckets containing language buckets.
  foreach ($objects as $object) {
    // We're using keys so we don't have to uniq its afterwards.
    $types[$object->type] = TRUE;
    $languages[$object->language] = TRUE;
    $buckets[$object->type][$object->language][] = $object;
  }

  $return_types = array_keys($types);
  // Now flatten the buckets into a flat array.
  foreach ($return_types as $type) {
    foreach (array_keys($languages) as $language) {
      if (isset($buckets[$type][$language])) {
        $sorted = array_merge($sorted, $buckets[$type][$language]);
      }
    }
  }

  return $sorted;
}
