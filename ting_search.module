<?php

/**
 * @file
 * Enables search integration with Ting.
 */

/**
 * Implements hook_search_info().
 */
function ting_search_search_info() {
  return array(
    'title' => 'Ting',
    'path' => 'ting',
    'conditions_callback' => 'ting_search_conditions_callback',
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function ting_search_entity_info_alter(&$entity_info) {
  // Only defining a search view mode for collections, as all results are
  // actually collections.
  $entity_info['ting_collection']['view modes'] += array(
    'search_result' => array(
      'label' => t('Search result'),
      'custom settings' => FALSE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ting_search_theme() {
  return array(
    'ting_search_results' => array(
      'variables' => array('results' => NULL, 'module' => NULL),
      'file' => 'ting_search.pages.inc',
      'template' => 'ting-search-results',
    ),
    'ting_search_mini_pager' => array(
      'variables' => array('tags' => array(), 'element' => 0, 'parameters' => array(), 'quantity' => 9),
    ),
  );
}

/**
 * Search conditions callback.
 */
function ting_search_conditions_callback($keys) {
  $conditions = array();

  if (!empty($_REQUEST['keys'])) {
    $conditions['keys'] = $_REQUEST['keys'];
  }

  // TODO: Add facets here
  return $conditions;
}

/**
 * Implements hook_search_execute().
 */
function ting_search_search_execute($keys = NULL, $conditions = NULL) {
  module_load_include('client.inc', 'ting');
  // TODO: Add in facets here

  $query = '(' . $keys . ')';

  // TODO: Set sort options
  $options = array();

  try {
    $page = pager_find_page();
    $resultsPerPage = 10;
    $searchResult = ting_do_search($query, $page + 1, $resultsPerPage, $options);
    // We don't know the real total, so fake one. We add one to the shown
    // number if there is more results.
    $fake_total = ($resultsPerPage * $page) + sizeof($searchResult->collections) + ($searchResult->more ? 1 : 0);
    pager_default_initialize($fake_total, $resultsPerPage);

    foreach ($searchResult->collections as &$collection) {
      $results[] = array(
        'link' => url($collection->url, array('absolute' => TRUE)),
        'type' => '',
        'title' => $collection->title,
        'user' => '',
        'date' => '',
        // 'extra' => 'something here?',
        'snippet' => drupal_render(ting_collection_view($collection, 'search_result')),
      );
    }
  }
  catch (TingClientException $e) {
    // TODO: Log the error.
    $result = array();
  }

  return $results;
}

/**
 * Implements hook_search_page().
 */
function ting_search_search_page($results) {
  return array(
    '#theme' => 'ting_search_results',
    '#results' => $results,
    '#module' => 'ting_search',
  );
}

/**
 * Theme a mini pager with only first, previous and next links.
 */
function theme_ting_search_mini_pager($variables) {
  $tags = $variables['tags'];
  $element = $variables['element'];
  $parameters = $variables['parameters'];
  $quantity = $variables['quantity'];
  global $pager_page_array, $pager_total;

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);
  // current is the page we are currently paged to
  $pager_current = $pager_page_array[$element] + 1;
  // max is the maximum page number
  $pager_max = $pager_total[$element];
  // End of marker calculations.


  $li_previous = theme('pager_previous', array('text' => (isset($tags[1]) ? $tags[1] : t('â€¹ previous')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));

  if (empty($li_previous)) {
    $li_previous = "&nbsp;";
  }

  $li_first = theme('pager_first', array('text' => (isset($tags[0]) ? $tags[0] : t('Â« first')), 'element' => $element, 'parameters' => $parameters));

  if (empty($li_first)) {
    $li_first = "&nbsp;";
  }

  $li_next = theme('pager_next', array('text' => (isset($tags[3]) ? $tags[3] : t('next â€º')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
  if (empty($li_next)) {
    $li_next = "&nbsp;";
  }

  if ($pager_total[$element] > 1) {
    $items[] = array(
      'class' => array('pager-first'),
      'data' => $li_first,
    );

    $items[] = array(
      'class' => array('pager-previous'),
      'data' => $li_previous,
    );

    $items[] = array(
      'class' => array('pager-next'),
      'data' => $li_next,
    );
    return theme('item_list', array('items' => $items, 'type' => 'ul', 'attributes' => array('class' => array('pager'))));
  }
}
