<?php

/**
 * @file
 * Enables search integration with Ting.
 */

/**
 * Implements hook_menu_alter().
 *
 * Temporary hack to alter titles.
 */
function ting_search_menu_alter(&$items) {
  $items['search/node']['title'] = 'Hjemmeside';
  $items['search/node/%menu_tail']['title'] = 'Hjemmeside';
  $items['search/ting']['title'] = 'Brønd';
  $items['search/ting/%menu_tail']['title'] = 'Brønd';
  $items['search/meta']['title'] = 'Universal Search';
  $items['search/meta/%menu_tail']['title'] = 'Universal Search';
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function ting_search_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 *
 * If you do this, CTools will pick up default panels pages in
 * <modulename>.pages_default.inc
 */
function ting_search_ctools_plugin_api($module, $api) {
  // @todo -- this example should explain how to put it in a different file.
  if ($module == 'panels_mini' && $api == 'panels_default') {
    return array('version' => 1);
  }
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Performs a search by calling hook_search_execute().
 *
 * @param $keys
 *   Keyword query to search on.
 * @param $module
 *   Search module to search.
 * @param $conditions
 *   Optional array of additional search conditions.
 *
 * @return
 *   Renderable array of search results. No return value if $keys are not
 *   supplied or if the given search module is not active.
 */
function ting_search_data($keys, $module = 'ting_search', $conditions = NULL) {
  if (module_hook($module, 'search_execute')) {
    $results = module_invoke($module, 'search_execute', $keys, $conditions);
    if (module_hook($module, 'search_page')) {
      return module_invoke($module, 'search_page', $results);
    }
    else {
      return array(
        '#theme' => 'ting_search_results',
        '#results' => $results,
        '#module' => $module,
      );
    }
  }
}

/**
 * Implements hook_search_info().
 */
function ting_search_search_info() {
  return array(
    'title' => t('Ting'),
    'path' => 'ting',
    'conditions_callback' => 'ting_search_conditions_callback',
  );
}

/**
 * Implements hook_ding_facetbrowser().
 */
function ting_search_ding_facetbrowser() {
  $results             = new stdClass();
  $results->show_empty = FALSE;
  $search_result       = drupal_static('ting_search_results');
  if ($search_result) {
    $results->facets     = ($search_result instanceof TingClientSearchResult) ? $search_result->facets : array();
    $results->searchkey  = $search_result->search_key;
    return $results;
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function ting_search_entity_info_alter(&$entity_info) {
  // Only defining a search view mode for collections, as all results are
  // actually collections.
  $entity_info['ting_collection']['view modes'] += array(
    'search_result' => array(
      'label' => t('Search result'),
      'custom settings' => FALSE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ting_search_theme() {
  return array(
    'ting_search_results' => array(
      'variables' => array('results' => NULL, 'module' => NULL),
      'file'      => 'ting_search.pages.inc',
      'template'  => 'ting-search-results',
    ),
    'ting_search_mini_pager' => array(
      'variables' => array('tags' => array(), 'element' => 0, 'parameters' => array(), 'quantity' => 9),
    ),
  );
}


/**
 * @brief Implementation of hook_form_FORM_ID_alter() for form search_block_form.
 */
function ting_search_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  $form['sort'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($_GET['sort']) ? $_GET['sort'] : 'title_ascending',
    '#attributes' => array('id' => 'controls_search_sort'),
  );
  $form['size'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($_GET['size']) ? $_GET['size'] : '10',
    '#attributes' => array('id' => 'controls_search_size'),
  );
  $form['creator'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($_GET['creator']) ? $_GET['creator'] : '',
    '#attributes' => array('id' => 'extend_search_creator'),
  );
  $form['title'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($_GET['title']) ? $_GET['title'] : '',
    '#attributes' => array('id' => 'extend_search_title'),
  );
  $form['subject'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($_GET['subject']) ? $_GET['subject'] : '',
    '#attributes' => array('id' => 'extend_search_subject'),
  );
  $form['#submit'] = array('ting_search_submit');

  return $form;
}


/**
 * Search conditions callback.
 */
function ting_search_conditions_callback($keys) {
  $conditions = array();

  if (!empty($_REQUEST['keys'])) {
    $conditions['keys'] = $_REQUEST['keys'];
  }

  if (!empty($_REQUEST['size'])) {
    $conditions['size'] = $_REQUEST['size'];
  }

  if (!empty($_REQUEST['sort'])) {
    $conditions['sort'] = $_REQUEST['sort'];
  }

  // TODO: Add facets here
  return $conditions;
}

/**
 * Implements hook_search_execute().
 */
function ting_search_search_execute($keys = NULL, $conditions = NULL) {
  // TODO: Set sort options
  $options    = array();
  $results    = array();
  $facetArray = array();
  $query      = '(' . $keys . ')';

  $options['numFacets'] = 50;
  module_load_include('client.inc', 'ting');
   //Extend query with selected facets
  if (isset($conditions['facets']) && $conditions['facets'] != NULL) {
    $facets = explode(';', $conditions['facets']);
    foreach ($facets as $facet) {
      $facet = explode(':', $facet, 2);
      if ($facet[0]) {
        $facetArray[] = $facet[0] . '="' . $facet[1] . '"';
      }
    }

    $query .= ' AND ' . implode(' AND ', $facetArray);
  }
  try {
    $page = pager_find_page();

    $resultsPerPage = variable_get('ting_search_results_per_page', 10);
    if (!empty($conditions['size'])) {
      $resultsPerPage = $conditions['size'];
    }

    if (!empty($conditions['sort'])) {
      $options['sort'] = $conditions['sort'];
    }

    $searchResult = ting_do_search($query, $page + 1, $resultsPerPage, $options);
    if (isset($searchResult->collections)) {
      $searchResult->search_key = $keys;
      // We don't know the real total, so fake one. We add one to the shown
      // number if there is more results.
      $fake_total = ($resultsPerPage * $page) + sizeof($searchResult->collections) + ($searchResult->more ? 1 : 0);
      pager_default_initialize($fake_total, $resultsPerPage);

      foreach ($searchResult->collections as &$collection) {
        $build = ting_collection_view($collection, 'search_result');
        $uri = entity_uri('ting_collection', $collection);
        $results[] = array(
          'link' => url($uri['path'], $uri['options']),
          'type' => '',
          'title' => $collection->title,
          'user' => '',
          'date' => '',
          // 'extra' => 'something here?',
          'snippet' => drupal_render($build),
        );
      }
    }
  }
  catch (TingClientException $e) {
    // TODO: Log the error.
    $results = array();
  }

  drupal_static('ting_search_results', $searchResult);

  return $results;
}

/**
 * Implements hook_search_page().
 */
function ting_search_search_page($results) {
  return array(
    '#theme' => 'ting_search_results',
    '#results' => $results,
    '#module' => 'ting_search',
  );
}

/**
 * Theme a mini pager with only first, previous and next links.
 */
function theme_ting_search_mini_pager($variables) {
  $tags = $variables['tags'];
  $element = $variables['element'];
  $parameters = $variables['parameters'];
  $quantity = $variables['quantity'];
  global $pager_page_array, $pager_total;

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);
  // current is the page we are currently paged to
  $pager_current = $pager_page_array[$element] + 1;
  // max is the maximum page number
  $pager_max = $pager_total[$element];
  // End of marker calculations.


  $li_previous = theme('pager_previous', array('text' => (isset($tags[1]) ? $tags[1] : t('‹ previous')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));

  if (empty($li_previous)) {
    $li_previous = "&nbsp;";
  }

  $li_first = theme('pager_first', array('text' => (isset($tags[0]) ? $tags[0] : t('« first')), 'element' => $element, 'parameters' => $parameters));

  if (empty($li_first)) {
    $li_first = "&nbsp;";
  }

  $li_next = theme('pager_next', array('text' => (isset($tags[3]) ? $tags[3] : t('next ›')), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
  if (empty($li_next)) {
    $li_next = "&nbsp;";
  }

  if ($pager_total[$element] > 1) {
    $items[] = array(
      'class' => array('pager-first'),
      'data' => $li_first,
    );

    $items[] = array(
      'class' => array('pager-previous'),
      'data' => $li_previous,
    );

    $items[] = array(
      'class' => array('pager-next'),
      'data' => $li_next,
    );
    return theme('item_list', array('items' => $items, 'type' => 'ul', 'attributes' => array('class' => array('pager'))));
  }
}


/**
 * Implements hook_block_info().
 */
function ting_search_block_info() {
  $blocks['search-extend'] = array(
      'info' => t('Ting search extended form'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    );
  $blocks['search-controls'] = array(
      'info' => t('Ting search "sort by" and "records per page"'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ting_search_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'search-extend':
      drupal_add_css(drupal_get_path('module', 'ting_search') . '/ting_search_extendform.css');
      drupal_add_js(drupal_get_path('module', 'ting_search') . '/ting_search_extendform.js');
      $block['subject'] = t('Ting search extended form');
      $block['content'] = search_extend_content() ;
      break;
    case 'search-controls':
      $block['subject'] = t('Ting search controls');
      $block['content'] = search_controls_content() ;
      break;
  }
  return $block;

}


/**
 * @brief Implementation of hook_form_FORM_ID_alter() for form ting_admin_register_settings.
 * @brief Add author, title & subject to ting_admin_register_settings.
 */
function ting_search_form_ting_admin_register_settings_alter(&$form, &$form_state, $form_id) {
  $form['ting_search_extendform_creator_index'] = array(
    '#type' => 'textfield',
    '#title' => t('Author'),
    '#description' => t('Field that contains authername, for instance dc.creator'),
    '#default_value' => variable_get('ting_search_extendform_creator_index', 'dc.creator')
  );

  $form['ting_search_extendform_title_index'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Field that contains title, for instance dc.title'),
    '#default_value' => variable_get('ting_search_extendform_title_index', 'dc.title')
  );

  $form['ting_search_extendform_subject_index'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#description' => t('Field that contains subject, for instance dc.subject'),
    '#default_value' => variable_get('ting_search_extendform_subject_index', 'dc.subject')
  );

  $form['#validate'][] = 'ting_search_admin_register_settings_validate';
  $form['#submit'][] = 'ting_search_admin_register_settings_submit';

  return $form;
}


function ting_search_admin_register_settings_validate($form, &$form_state) {
  $s = '';
  if (isset($form_state['values']['ting_search_extendform_creator_index'])) {
    $s = $form_state['values']['ting_search_extendform_creator_index'];
  }
  if ($s == '') {
    form_set_error('ting_search_extendform_creator_index', t('Please enter a register to use with creator.'));
  }

  $s = '';
  if (isset($form_state['values']['ting_search_extendform_title_index'])) {
    $s = $form_state['values']['ting_search_extendform_title_index'];
  }
  if ($s == '') {
    form_set_error('ting_search_extendform_title_index', t('Please enter a register to use with title.'));
  }

  $s = '';
  if (isset($form_state['values']['ting_search_extendform_subject_index'])) {
    $s = $form_state['values']['ting_search_extendform_subject_index'];
  }
  if ($s == '') {
    form_set_error('ting_search_extendform_subject_index', t('Please enter a register to use with subjects.'));
  }
}


function ting_search_admin_register_settings_submit($form, $form_state) {
  variable_set('ting_search_extendform_creator_index', $form_state['values']['ting_search_extendform_creator_index']);
  variable_set('ting_search_extendform_title_index', $form_state['values']['ting_search_extendform_title_index']);
  variable_set('ting_search_extendform_subject_index', $form_state['values']['ting_search_extendform_subject_index']);
}


function search_extend_content() {
  return drupal_get_form('search_extend_form');
}

function search_extend_form($form_state) {

  $form['extendform'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced search'),
    '#tree' => TRUE,
  );
  $form['extendform']['creator'] = array(
    '#type' => 'textfield',
    '#title' => t('Author'),
    // '#default_value' =>  isset($_GET('creator')) ? $_GET('creator') : '',
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('Enter the author name'),
    '#attributes' => array('onchange' => 'extendSearch("extend_search_creator",this.value)'),
  );
  $form['extendform']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    // '#default_value' =>  isset($_GET('title')) ? $_GET('title') : '',
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('Enter title'),
    '#attributes' => array('onchange' => 'extendSearch("extend_search_title",this.value)'),
  );
  $form['extendform']['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    // '#default_value' =>  isset($_GET('subject')) ? $_GET('subject') : '',
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('Enter subject keywords'),
    '#attributes' => array('onchange' => 'extendSearch("extend_search_subject",this.value)'),
  );
  return $form;
}


function search_controls_content() {
  return drupal_get_form('search_controls_form');
}

function search_controls_form($form_state) {

  $form['sort'] = array(
    '#title' => t('Sort by:'),
    '#type' => 'select',
    '#default_value' => isset($_GET['sort']) ? $_GET['sort'] : 'title_ascending',
    '#options' => array(
      'title_ascending' => t('Title (Ascending)'),
      'title_descending' => t('Title (Descending)'),
      'creator_ascending' => t('Creator (Ascending)'),
      'creator_descending' => t('Creator (Descending)'),
      'date_ascending' => t('Date (Ascending)'),
      'date_descending' => t('Date (Descending)')
    ),
    '#description' => t('Set sort order for search result'),
    '#attributes' => array('onchange' => 'var i = this.selectedIndex; extendSearch("controls_search_sort",this[i].value)'),
  );

  $form['size'] = array(
    '#title' => t('Results on page:'),
    '#type' => 'radios',
    '#default_value' => isset($_GET['size']) ? $_GET['size'] : '10',
    '#options' => array(
      '10' => t('10'),
      '25' => t('25'),
      '50' => t('50')
    ),
    '#description' => t('Set number of records shown'),
    '#attributes' => array('onchange' => 'extendSearch("controls_search_size",this.value)'),
  );

  return $form;
}


/**
 * Process a block search form submission.
 */
function ting_search_submit($form, &$form_state) {
  // The search form relies on control of the redirect destination for its
  // functionality, so we override any static destination set in the request,
  // for example by drupal_access_denied() or drupal_not_found()
  // (see http://drupal.org/node/292565).
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  $form_id = $form['form_id']['#value']; // 'search_block_form'
  $terms = $form_state['values'][$form_id];
  $fields = array();
  $args = array();

  $s = $form_state['values']['creator'];
  if ( $s != "" ) {
    $args['creator'] = $s;
    $fields[] = sprintf('%s=%s', variable_get('ting_search_extendform_creator_index', 'dc.creator'), $s);
  }

  $s = $form_state['values']['title'];
  if ( $s != "" ) {
    $args['title'] = $s;
    $fields[] = sprintf('%s=%s', variable_get('ting_search_extendform_title_index', 'dc.title'), $s);
  }

  $s = $form_state['values']['subject'];
  if ( $s != "" ) {
    $args['subject'] = $s;
    $fields[] = sprintf('%s=%s', variable_get('ting_search_extendform_subject_index', 'dc.subject'), $s);
  }

  $q = implode(' AND ', $fields);
  if ($q == '') {
    $q = $terms;
  }
  elseif ($terms != '') {
    $q = sprintf('%s AND (%s)', $terms, $q);
  }

  $s = $form_state['values']['sort'];
  if ( $s != "" ) {
    $controls['sort'] = $s;
  }

  $s = $form_state['values']['size'];
  if ( $s != "" ) {
    $controls['size'] = $s;
  }


  // Check to see if the form was submitted empty.
  // If it is empty, display an error message.
  // (This method is used instead of setting #required to TRUE for this field
  // because that results in a confusing error message.  It would say a plain
  // "field is required" because the search keywords field has no title.
  // The error message would also complain about a missing #title field.)
  if ($q == '') {
    form_set_error('keys', t('Please enter some keywords.'));
  }

  $info = search_get_default_module_info();
  if ($info) {
    $form_state['redirect'] = FALSE;
    $url = 'search/' . $info['path'] . '/' . trim($q);
    drupal_goto($url, array('query' => $controls));
  }
  else {
    form_set_error(NULL, t('Search is currently disabled.'), 'error');
  }
}

