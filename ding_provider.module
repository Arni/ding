<?php
/**
 * @file
 * Implements a common interface to backend providers.
 */

/**
 * Implements hook_menu().
 */
function ding_provider_menu() {
  $items['admin/config/ding/provider'] = array(
    'title' => 'Ding provider',
    'page callback' => 'ding_provider_admin_overview',
    'access arguments' => array('administer ding provider'),
    'file' => 'ding_provider.admin.inc'
  );

  $items['admin/config/ding/provider/overview'] = array(
    'title' => 'Overview',
    'description' => 'Providers overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    'file' => 'system.admin.inc',
  );

  $providers = _ding_provider_get_provider();
  foreach ($providers as $name => $provider) {
    if ($provider['global settings']) {
      $items['admin/config/ding/provider/' . $provider['module']] = array(
        'title' => $provider['title'],
        'page callback' => 'drupal_get_form',
        'page arguments' => $provider['global settings'],
        'access arguments' => array('administer ding provider'),
        'type' => MENU_LOCAL_TASK,
        'weight' => -1,
      );
      if ($provider['global settings file']) {
        $items['admin/config/ding/provider/' . $provider['module']]['file'] = $provider['global settings file'];
      }
    }
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function ding_provider_permission() {
  return array(
    'administer ding provider' => array(
      'title' => t('Administer Ding provider'),
    ),
  );
}

/**
 * Implements hook_ding_install_tasks().
 */
function ding_provider_ding_install_tasks() {
  $users = _ding_provider_get_provider_users();
  $providers = _ding_provider_get_provider();
  $return = array();
  foreach ($users as $provider => $info) {
    // Add global provider settings if required.
    if ($info['ding_profile'] && sizeof($info['required']) && $form_id = $providers[$provider]['global settings']) {
      $return[$form_id] = array(
        // TODO: This doesn't work for potx, we need the generated stings in
        // plain form somewhere.
        'display_name' => st($providers[$provider]['title']),
        'type' => 'form',
      );

      if ($providers[$provider]['global settings file']) {
        $return[$form_id]['file'] = $providers[$provider]['global settings file'];
      }
    }

    // Add settings for individual providers to installer if someone asked for
    // it and there's modules that requires this provider.
    if ($info['ding_profile'] && sizeof($info['required']) && $form_id = ding_provider_implements($provider, 'settings')) {
      $return[$form_id] = array(
        // TODO: This doesn't work for potx, we need the generated stings in
        // plain form somewhere.
        'display_name' => st(drupal_ucfirst($provider) . ' provider'),
        'type' => 'form',
      );
      if ($providers[$provider]['file']) {
        $return[$form_id]['file'] = $providers[$provider]['file'];
      }
    }
  }
  return $return;
}

/**
 * Returns whether a provider implements a given function.
 */
function ding_provider_implements($type, $hook) {
  return (bool) _ding_provider_function($type, $hook, TRUE);
}

/**
 * Invoke a provider hook.
 */
function ding_provider_invoke($type, $hook) {
  $args = func_get_args();
  array_shift($args);
  array_shift($args);

  $function = _ding_provider_function($type, $hook);
  if ($function) {
    return call_user_func_array($function, $args);
  }
}

/**
 * Get a provider form
 */
function ding_provider_get_form($type, $form_id) {
  $args = func_get_args();
  array_shift($args);
  array_shift($args);

  $function = _ding_provider_function($type, $form_id);
  if ($function) {
    return drupal_get_form($function, $args);
  }
}

/**
 * Returns the given provider.
 */
function _ding_provider_get_provider($type = NULL) {
  static $providers;
  if (!isset($providers)) {
    $providers = array();
    foreach (module_implements('ding_provider') as $module) {
      $module_provides = module_invoke($module, 'ding_provider') + array(
        'title' => $module . '.module',
        'settings' => NULL,
        'file' => NULL,
        'provides' => array(),
      );
      foreach ($module_provides['provides'] as $name => $module_provider) {
        $module_provider['module'] = $module;
        $module_provider['title'] = $module_provides['title'];
        $module_provider['global settings'] = $module_provides['settings'];
        $module_provider['global settings file'] = $module_provides['file'];
        $providers[$name] = $module_provider;
      }
    }
  }

  if (!$type) {
    return $providers;
  }

  if (isset($providers[$type])) {
    return $providers[$type];
  }
  return NULL;
}

/**
 * Returns user information on the given provider.
 */
function _ding_provider_get_provider_users($type = NULL) {
  static $provider_users;
  if (!isset($provider_users)) {
    $provider_users = array();
    foreach (module_implements('ding_provider_user') as $module) {
      $module_uses = module_invoke($module, 'ding_provider_user');
      foreach ($module_uses as $name => $options) {
        if (!isset($provider_users[$name])) {
          $provider_users[$name] = array(
            'ding_profile' => FALSE,
            'required' => array(),
            'users' => array(),
          );
        }
        if ($options['install time setup']) {
          $provider_users[$name]['ding_profile'] = TRUE;
        }
        if ($options['required']) {
          $provider_users[$name]['required'][] = $module;
        }
        else {
          $provider_users[$name]['users'][] = $module;
        }
      }
    }
  }

  if (!$type) {
    return $provider_users;
  }

  if (isset($provider_users[$type])) {
    return $provider_users[$type];
  }
  return NULL;
}

/**
 * Returns the provider function for a hook, loading files if necessary. Logs
 * an error if the provider or hook isn't implemented, unless $quiet has been
 * specified.
 *
 * @param $type Provider name.
 * @param $hook Hook name.
 * @param $quiet Whether to suppress errors.
 * @return
 *  String or NULL.
 */
function _ding_provider_function($type, $hook, $quiet = FALSE) {
  $provider = _ding_provider_get_provider($type);
  if ($provider) {
    $function = $provider['module'] . '_' . (isset($provider['prefix']) ? $provider['prefix'] . '_' : '') . $hook;

    if (isset($provider['file'])) {
      require_once DRUPAL_ROOT . '/' . $provider['file'];
    }

    if (function_exists($function)) {
      return $function;
    }
    elseif (!$quiet) {
      // Trigger an error. This might be a module attempting to use a wrong
      // hook, or an improperly implemented plugin. In either case, it's
      // programmer error.
      trigger_error(t('Ding @type provider (%module module) does not implement %function', array('@type' => $type, '%function' => $hook, '%module' => $provider['module'])), E_USER_ERROR);
    }
  }
  elseif (!$quiet) {
    watchdog('ding_provider', 'Provider module not configured for provider type %type.', array('%type' => $type), WATCHDOG_ERROR);
  }
  return NULL;
}
