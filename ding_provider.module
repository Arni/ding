<?php
/**
 * @file
 * Implements a common interface to backend providers.
 */

/**
 * Implements hook_menu().
 */
function ding_provider_menu() {
  $items['admin/config/ding/provider'] = array(
    'title' => 'Ding provider',
    'page callback' => 'ding_provider_admin_overview',
    'access arguments' => array('administer ding provider'),
    'file' => 'ding_provider.admin.inc'
  );

  $items['admin/config/ding/provider/overview'] = array(
    'title' => 'Overview',
    'description' => 'Providers overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    'file' => 'system.admin.inc',
  );

  $providers = _ding_provider_get_provider();
  foreach ($providers as $name => $provider) {
    if ($provider['global settings']) {
      $items['admin/config/ding/provider/' . $provider['module']] = array(
        'title' => $provider['title'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array($provider['global settings']),
        'access arguments' => array('administer ding provider'),
        'type' => MENU_LOCAL_TASK,
        'weight' => -1,
      );
      if ($provider['global settings file']) {
        $items['admin/config/ding/provider/' . $provider['module']]['file'] = $provider['global settings file'];
      }
    }
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function ding_provider_permission() {
  return array(
    'administer ding provider' => array(
      'title' => t('Administer Ding provider'),
    ),
  );
}

/**
 * Implements hook_ding_install_tasks().
 */
function ding_provider_ding_install_tasks() {
  $users = _ding_provider_get_provider_users();
  $providers = _ding_provider_get_provider();
  $return = array();
  foreach ($users as $provider => $info) {
    // Add global provider settings if required.
    if ($info['ding_profile'] && sizeof($info['required']) && isset($providers[$provider]) && $form_id = $providers[$provider]['global settings']) {
      $return[$form_id] = array(
        // TODO: This doesn't work for potx, we need the generated stings in
        // plain form somewhere.
        'display_name' => st($providers[$provider]['title']),
        'type' => 'form',
      );

      if ($providers[$provider]['global settings file']) {
        $return[$form_id]['file'] = $providers[$provider]['global settings file'];
      }
    }

    // Add settings for individual providers to installer if someone asked for
    // it and there's modules that requires this provider.
    if ($info['ding_profile'] && sizeof($info['required']) && $form_id = ding_provider_implements($provider, 'settings')) {
      $return[$form_id] = array(
        // TODO: This doesn't work for potx, we need the generated stings in
        // plain form somewhere.
        'display_name' => st(drupal_ucfirst($provider) . ' provider'),
        'type' => 'form',
      );
      if ($providers[$provider]['file']) {
        $return[$form_id]['file'] = $providers[$provider]['file'];
      }
    }
  }
  return $return;
}

/**
 * Returns whether a provider implements a given function.
 */
function ding_provider_implements($type, $hook) {
  return (bool) _ding_provider_function($type, $hook, TRUE);
}

/**
 * Invoke a provider hook.
 */
function ding_provider_invoke($type, $hook) {
  $args = func_get_args();
  array_shift($args);
  array_shift($args);

  $function = _ding_provider_function($type, $hook);
  if ($function) {
    return call_user_func_array($function, $args);
  }
}

/**
 * Get a provider form
 */
function ding_provider_form($type, $form_id) {
  $args = func_get_args();
  array_shift($args);
  array_shift($args);

  $function = _ding_provider_function($type, $form_id);
  if ($function) {
    return drupal_get_form($function, $args);
  }
}

/**
 *
 */
function ding_provider_invoke_page($type, $hook) {
  $args = func_get_args();
  array_shift($args);
  array_shift($args);

  $function = _ding_provider_function($type, $hook);
  if ($function) {
    try {
      return call_user_func_array($function, $args);
    }
    catch (DingProviderAuthException $e) {
      if (!module_exists('ding_user') || !($authpage = ding_user_auth_page())) {
        // Rethrow exception if ding_user isn't activated, or doesn't
        // return a path.
        throw $e;
      }
      // @todo redirect to auth page
      drupal_goto($authpage, array('query' => ding_provider_get_destination()));
    }
    // We let other exceptions pass through.
  }
}

/**
 *
 */
function ding_provider_invoke_submit($callback, $form_state, $type, $hook) {
  $args = func_get_args();
  array_shift($args);
  array_shift($args);

  $function = _ding_provider_function($type, $hook);
  if ($function) {
    try {
      $res = call_user_func_array($function, $args);
      if ($callback_result = $callback($res)) {
        $form_state['redirect'] = $callback_result;
      }
    }
    catch (DingProviderAuthException $e) {
      // @todo redirect to auth page
      $form_state['redirect'] = 'authpage'; // drupal_get_destination
      // Authpage checks this var and calls the callback if it
      // exists. drupal_gotos the return value, or does nothing if it
      // doesn't have any, letting destination do its thing.
      $_SESSION['ding_provider_invoke_submit'] = array($callback, $type, $hook);
    }
    catch (Exception $e) {
      // Pass the exception to the callback.
      if ($callback_result = $callback($e)) {
        $form_state['redirect'] = $callback_result;
      }
    }
  }
}

function ding_provider_get_form($form_id) {
  $form_state = array();

  $args = func_get_args();
  // Remove $form_id from the arguments.
  array_shift($args);
  $form_state['build_info']['args'] = $args;

  return ding_provider_build_form($form_id, $form_state);
}

function ding_provider_build_form($form_id, &$form_state) {
  $messages = NULL;
  try {
    if (isset($_REQUEST['dp_form_id']) && !empty($_REQUEST['dp_form_id'])) {
      // Load saved submission.
      if ($cached = cache_get('ding_provider_' . $form_id, 'cache_form')) {
        $form_state['input'] = $cached->data;
        $messages = $form_state['input']['#ding_provider_messages'];
        unset($form_state['input']['#ding_provider_messages']);
        cache_clear_all('ding_provider_' . $form_id, 'cache_form');
      }
    }
    $old_redirect = $form_state['no_redirect'];
    $form_state['no_redirect'] = TRUE;
    $form = drupal_build_form($form_id, $form_state);

    // Set any messages we saved.
    _ding_provider_message_reset($messages);

    $form_state['no_redirect'] = $old_redirect;
    if ($form_state['executed'] == TRUE){
      // Redirect if the form was submitted.
      drupal_redirect_form($form_state);
    }
    return $form;
  }
  catch (DingProviderAuthException $e) {
    if (!module_exists('ding_user')) {
      // Rethrow exception if ding_user isn't activated.
      throw $e;
    }
    // Something needs auth, save state and redirect to authentication page.
    $expire = 21600;
    $input = $form_state['method'] == 'get' ? $_GET : $_POST;
    $input['#ding_provider_messages'] = drupal_get_messages();
    cache_set('ding_provider_' . $form_id, $input, 'cache_form', REQUEST_TIME + $expire);
    $options = array('query' => array('dp_form_id' => $form_id) + ding_provider_get_destination());
    drupal_goto('authtest', $options);
  }
}

function ding_provider_ajax_form_callback() {
  $messages = NULL;
  list($form, $form_state) = ajax_get_form();
  try {
    if (isset($_REQUEST['dp_form_id']) && !empty($_REQUEST['dp_form_id'])) {
      // Load saved submission.
      if ($cached = cache_get('ding_provider_' . $form_id, 'cache_form')) {
        $form_state['input'] = $cached->data;
        $messages = $form_state['input']['#ding_provider_messages'];
        unset($form_state['input']['#ding_provider_messages']);
        cache_clear_all('ding_provider_' . $form_id, 'cache_form');
      }
    }

    drupal_process_form($form['#form_id'], $form, $form_state);

    // Set any messages we saved.
    _ding_provider_message_reset($messages);

    if (!empty($form_state['triggering_element'])) {
      $callback = $form_state['triggering_element']['#ajax']['callback'];
    }
    if (!empty($callback) && function_exists($callback)) {
      return $callback($form, $form_state);
    }
  }
  catch (DingProviderAuthException $e) {
    if (!module_exists('ding_user')) {
      // Rethrow exception if ding_user isn't activated.
      throw $e;
    }
    // Something needs auth, save state and redirect to authentication page.
    $expire = 21600;
    $input = $form_state['method'] == 'get' ? $_GET : $_POST;
    $input['#ding_provider_messages'] = drupal_get_messages();
    cache_set('ding_provider_' . $form_id, $input, 'cache_form', REQUEST_TIME + $expire);
    $options = array('query' => array('dp_form_id' => $form_id) + ding_provider_get_destination());
    drupal_goto('authtest', $options);

  }
}

/**
 *
 */
function _ding_provider_message_reset($messages) {
  if (is_array($messages)) {
    foreach ($messages as $type => $message_list) {
      foreach ($message_list as $message) {
        drupal_set_message($message, $type, FALSE);
      }
    }
  }
}

/**
 *
 */
function ding_provider_get_destination() {
  $destination = &drupal_static(__FUNCTION__);

  // If destination is set, create a new one embedding the old, and
  // unset destination, so drupal_goto wont go to the old
  // destination.
  if (isset($_GET['destination'])) {
    $path = $_GET['q'];
    $query = drupal_http_build_query(drupal_get_query_parameters());
    if ($query != '') {
      $path .= '?'. $query;
    }
    $destination = array(
      'destination' => $path,
    );
    unset($_REQUEST['destination']);
  }
  else {
    $destination = drupal_get_destination();
  }

  return $destination;
}

/**
 * Returns the given provider.
 */
function _ding_provider_get_provider($type = NULL) {
  static $providers;
  if (!isset($providers)) {
    $providers = array();
    foreach (module_implements('ding_provider') as $module) {
      $module_provides = module_invoke($module, 'ding_provider') + array(
        'title' => $module . '.module',
        'settings' => NULL,
        'file' => NULL,
        'provides' => array(),
      );
      foreach ($module_provides['provides'] as $name => $module_provider) {
        $module_provider['module'] = $module;
        $module_provider['title'] = $module_provides['title'];
        $module_provider['global settings'] = $module_provides['settings'];
        $module_provider['global settings file'] = $module_provides['file'];
        $providers[$name] = $module_provider;
      }
    }
  }

  if (!$type) {
    return $providers;
  }

  if (isset($providers[$type])) {
    return $providers[$type];
  }
  return NULL;
}

/**
 * Returns user information on the given provider.
 */
function _ding_provider_get_provider_users($type = NULL) {
  static $provider_users;
  if (!isset($provider_users)) {
    $provider_users = array();
    foreach (module_implements('ding_provider_user') as $module) {
      $module_uses = module_invoke($module, 'ding_provider_user');
      foreach ($module_uses as $name => $options) {
        if (!isset($provider_users[$name])) {
          $provider_users[$name] = array(
            'ding_profile' => FALSE,
            'required' => array(),
            'users' => array(),
          );
        }
        if ($options['install time setup']) {
          $provider_users[$name]['ding_profile'] = TRUE;
        }
        if ($options['required']) {
          $provider_users[$name]['required'][] = $module;
        }
        else {
          $provider_users[$name]['users'][] = $module;
        }
      }
    }
  }

  if (!$type) {
    return $provider_users;
  }

  if (isset($provider_users[$type])) {
    return $provider_users[$type];
  }
  return NULL;
}

/**
 * Returns the provider function for a hook, loading files if necessary. Logs
 * an error if the provider or hook isn't implemented, unless $quiet has been
 * specified.
 *
 * @param $type Provider name.
 * @param $hook Hook name.
 * @param $quiet Whether to suppress errors.
 * @return
 *  String or NULL.
 */
function _ding_provider_function($type, $hook, $quiet = FALSE) {
  $provider = _ding_provider_get_provider($type);
  if ($provider) {
    $function = $provider['module'] . '_' . (isset($provider['prefix']) ? $provider['prefix'] . '_' : '') . $hook;

    if (isset($provider['file'])) {
      require_once DRUPAL_ROOT . '/' . $provider['file'];
    }

    if (function_exists($function)) {
      return $function;
    }
    elseif (!$quiet) {
      // Trigger an error. This might be a module attempting to use a wrong
      // hook, or an improperly implemented plugin. In either case, it's
      // programmer error.
      trigger_error(t('Ding @type provider (%module module) does not implement %function', array('@type' => $type, '%function' => $hook, '%module' => $provider['module'])), E_USER_ERROR);
    }
  }
  elseif (!$quiet) {
    watchdog('ding_provider', 'Provider module not configured for provider type %type.', array('%type' => $type), WATCHDOG_ERROR);
  }
  return NULL;
}

/**
 * Exception that is thrown by providers when the given operation
 * cannot be completed until the user authenticates.
 */
class DingProviderAuthException extends Exception {}
