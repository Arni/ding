<?php
/**
 * @file
 * BPI main module file.
 *
 * @todo General description needed here.
 */

/**
 * URL search query key.
 */
if (!defined('SEARCH_PHRASE_KEY')) {
  define('SEARCH_PHRASE_KEY', 'text');
}

/**
 * Ascending sorting identifier.
 */
if (!defined('SORT_ASCENDING')) {
  define('SORT_ASCENDING', 'asc');
}

/**
 * Descending sorting identifier.
 */
if (!defined('SORT_DESCENDING')) {
  define('SORT_DESCENDING', 'desc');
}

/**
 * Syndicated node identifier.
 */
if (!defined('BPI_SYNDICATED')) {
  define('BPI_SYNDICATED', 1);
}

/**
 * Pushed node identifier.
 */
if (!defined('BPI_PUSHED')) {
  define('BPI_PUSHED', 2);
}

/**
 * Default number of BPI content per page when searching.
 */
if (!defined('BPI_CONTENT_PER_PAGE')) {
  define('BPI_CONTENT_PER_PAGE', 10);
}

/**
 * Implements hook_menu().
 */
function bpi_menu() {
  $menu = array();

  $menu['admin/bpi'] = array(
    'title' => 'BPI syndication',
    'description' => 'Sindicate content from the well.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bpi_syndicate_page_form'),
    'access arguments' => array('syndicate content'),
    'file' => 'bpi.syndicate.inc',
  );

  $menu['admin/bpi/syndicate/%'] = array(
    'page callback' => 'bpi_syndicate_action',
    'page arguments' => array(3),
    'access arguments' => array('syndicate content'),
    'file' => 'bpi.syndicate.inc',
  );

  $menu['admin/bpi/push/nojs/%'] = array(
    'page callback' => 'bpi_push_action',
    'page arguments' => array(3, 4),
    'access arguments' => array('push content'),
    'file' => 'bpi.push.inc',
  );

  $menu['admin/bpi/push/ajax/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $menu['admin/bpi/push/nojs/%'];

  $menu['admin/bpi/statistics/nojs'] = array(
    'page callback' => 'bpi_statistics',
    'page arguments' => array(3),
    'access arguments' => array('view bpi statistics'),
    'file' => 'bpi.statistics.inc',
  );

  $menu['admin/bpi/statistics/ajax'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $menu['admin/bpi/statistics/nojs'];

  $menu['admin/bpi/page/%'] = array(
    'title' => 'BPI syndication',
    'description' => 'Retrieve content from the well.',
    'page callback' => 'bpi_search_content',
    'page arguments' => array(3),
    'access arguments' => array('syndicate content'),
    'file' => 'bpi.syndicate.inc',
  );

  $menu['admin/config/bpi'] = array(
    'title' => 'BPI',
    'description' => 'BPI Related Settings',
    'access arguments' => array('administer bpi'),
    'page callback' => 'bpi_admin_menu_block_page',
    'page arguments' => array(),
    'file' => 'bpi.admin.inc',
  );

  $menu['admin/config/bpi/settings'] = array(
    'title' => 'Service settings',
    'description' => 'BPI integration settings',
    'access arguments' => array('administer bpi'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bpi_admin_settings_form'),
    'file' => 'bpi.admin.inc',
  );

  $menu['admin/config/bpi/content_mapping'] = array(
    'title' => 'Content mapping',
    'description' => 'Map BPI fields to your content fields.',
    'access arguments' => array('administer bpi'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bpi_admin_content_mapping_form'),
    'file' => 'bpi.admin.inc',
  );

  return $menu;
}

/**
 * Implements hook_permission().
 */
function bpi_permission() {
  $perm = array();

  $perm['administer bpi'] = array(
    'title' => t('Administer BPI settings'),
  );

  $perm['syndicate content'] = array(
    'title' => t('Syndicate content'),
  );

  $perm['push content'] = array(
    'title' => t('Push content'),
  );

  $perm['view bpi statistics'] = array(
    'title' => t('View statistics'),
  );

  return $perm;
}

/**
 * Implements hook_theme().
 */
function bpi_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['bpi_well_item'] = array(
    'variables' => array(),
    'path' => $path . '/templates/',
    'template' => 'bpi-well-item',
  );

  $hooks['bpi_filter_item'] = array(
    'variables' => array(),
    'path' => $path . '/templates/',
    'template' => 'bpi-filter-item',
  );

  return $hooks;
}

/**
 * Implements hook_form_alter().
 *
 * Set some default values for the fields, when syndicating content,
 * according to mapped settings.
 */
function bpi_form_alter(&$form , &$form_state, $form_id) {
  $bpi_ctype = variable_get('bpi_content_type', '');
  $from_bpi = (isset($_GET['from']) && $_GET['from'] == 'bpi') ? TRUE : FALSE;
  $nodes_to_mark = array();

  // @todo
  // This could lead to unexpected behavior. Just a note.
  if (empty($bpi_ctype)) {
    return;
  }
  // Checking nid for NULL would say that this is create node form, not edit.
  elseif ($form_id == $bpi_ctype . '_node_form' && $form['nid']['#value'] == NULL && $from_bpi) {
    $bpi_content = $_SESSION['bpi']['content'];

    drupal_set_message(t('Syndicating content %title, from category %category and audience %audience.', array(
      '%title' => $bpi_content['title'],
      '%category' => $bpi_content['category'],
      '%audience' => $bpi_content['audience'],
    )));

    $form['title']['#default_value'] = $bpi_content['title'];
    $teaser = variable_get('bpi_field_teaser', '');
    $body = variable_get('bpi_field_body', '');
    $current_language = $form['language']['#value'];

    // EXPERIMENTAL.
    // Just oversee all the variants where the value could fit.
    if (isset($form[$teaser][$current_language][0]['summary'])) {
      $form[$teaser][$current_language][0]['summary']['#default_value'] = $bpi_content['teaser'];
    }
    elseif (isset($form[$teaser][$current_language][0]['value'])) {
      $form[$teaser][$current_language][0]['value']['#default_value'] = $bpi_content['teaser'];
    }
    elseif (isset($form[$teaser][$current_language][0])) {
      $form[$teaser][$current_language][0]['#default_value'] = $bpi_content['teaser'];
    }

    // EXPERIMENTAL.
    // Just oversee all the variants where the value could fit.
    if (isset($form[$body][$current_language][0]['value'])) {
      $form[$body][$current_language][0]['value']['#default_value'] = $bpi_content['body'];
    }
    elseif (isset($form[$body][$current_language][0])) {
      $form[$body][$current_language][0]['#default_value'] = $bpi_content['body'];
    }
  }
  elseif ($form_id == 'node_admin_content' && isset($form['admin']['nodes'])) {
    //Mark BPI nodes.
    $nodes_in_table = array_keys($form['admin']['nodes']['#options']);
    $bpi_nodes = bpi_get_bpi_nodes($nodes_in_table);
    if (!empty($nodes_in_table)) {
      $nodes_to_mark = array_keys($bpi_nodes);

      foreach ($form['admin']['nodes']['#options'] as $node_id => &$row) {
        if (in_array($node_id, $nodes_to_mark)) {
          $row['title']['data']['#suffix'] .= '<sup class="bpi-marker">BPI</sup>';
        }
      }
    }
    // End mark BPI nodes.

    // BPI filter.
    if (isset($form['filter']['filters']['status']['filters'])) {
      $current_bpi_filter = isset($_SESSION['bpi']['filter']) ? $_SESSION['bpi']['filter'] : 'all';

      $bpi_filters = array(
        'all' => t('any'),
        'bpi_only' => t('BPI only'),
        'bpi_syndicated' => t('Syndicated'),
        'bpi_pushed' => t('Pushed'),
      );

      $form['filter']['filters']['status']['filters']['bpi'] = array(
        '#type' => 'select',
        '#title' => t('bpi'),
        '#options' => $bpi_filters,
        '#default_value' => $current_bpi_filter,
      );

      // It's viable that this module hooks, are fired before the standard ones.
      array_unshift($form['#submit'], '_bpi_node_admin_content_submit');

      // If a BPI filter is set, prepend an active BPI filter marker.
      if ($current_bpi_filter != 'all') {
        $drupal_filters =  isset($_SESSION['node_overview_filter']) ? $_SESSION['node_overview_filter'] : array();
        $t_args = array(
          '%property' => 'bpi',
          '%value' => $bpi_filters[$current_bpi_filter],
        );
        $bpi_filter_marker['#markup'] = t('where %property is %value', $t_args);

        // Whether there are some filters active, prepend a plural form.
        if (count($drupal_filters)) {
          $bpi_filter_marker['#prefix'] = t('and') . ' ';
        }

        // Add a BPI filter marker to active filters.
        $form['filter']['filters']['current'][] = $bpi_filter_marker;
        // Add standard filter buttons,
        // since those are showed only if drupal filters array is not empty.
        $filter_actions = &$form['filter']['filters']['status']['actions'];
        $filter_actions['submit']['#value'] = t('Refine');
        $filter_actions['undo'] = array('#type' => 'submit', '#value' => t('Undo'));
        $filter_actions['reset'] = array('#type' => 'submit', '#value' => t('Reset'));
      }
    }
    // END BPI filter.

    // Content grid columns.
    $form['admin']['nodes']['#header']['bpi_timestamp'] = t('BPI import/export');

    // Cheat!
    // Make the operations column last.
    $tmp = $form['admin']['nodes']['#header']['operations'];
    unset($form['admin']['nodes']['#header']['operations']);
    $form['admin']['nodes']['#header']['operations'] = $tmp;

    foreach ($form['admin']['nodes']['#options'] as $key => &$row) {
      $row['bpi_timestamp'] = '';
      if (in_array($key, $nodes_to_mark)) {
        $row['bpi_timestamp'] = format_date($bpi_nodes[$key]->timestamp, 'short');
      }

      // Cheat!
      // Make the operations column value last.
      $tmp = $row['operations'];
      unset($row['operations']);
      $row['operations'] = $tmp;

      // Adds a push link to operations.
      $row['operations']['data']['#links']['push'] = array(
        'title' => t('push'),
        'href' => 'admin/bpi/push/nojs/' . $key,
        'attributes' => array(
          'class' => array(
            'use-ajax',
          ),
        ),
      );

      drupal_add_library('system', 'drupal.ajax');
    }
    // END content grid columns.
  }
}

/**
 * Custom submit handler for the node filtering form.
 *
 * Since drupal has a hardcoded set of node filters, save the new
 * BPI related filter separately.
 * Also, munge the standard filter actions above BPI filtering.
 *
 * @param array $form
 *   Form structure.
 * @param array $form_state
 *   Form state values.
 */
function _bpi_node_admin_content_submit(&$form, &$form_state) {
  $bpi_filter = $form_state['input']['bpi'];
  $op = $form_state['input']['op'];

  // These are standard filter actions.
  // Due to specific BPI filter nature, handle standard actions here.
  if ($op == 'Reset') {
    unset($_SESSION['bpi']['filter']);
  }
  elseif ($op == 'Undo' && !empty($_SESSION['bpi']['filter'])) {
    // Cheat!
    // Let the drupal filters know that there is a BPI filter, but in
    // real it's kept in this module.
    // Since BPI filter will always be shown as last, it will pop a filter stub
    // from self array, and here we kill the actual bpi filter.
    $_SESSION['node_overview_filter'][] = '';
    unset($_SESSION['bpi']['filter']);
  }
  elseif ($op == 'Filter' || $op == 'Refine') {
    $_SESSION['bpi']['filter'] = $bpi_filter;
  }
}

/**
 * Implements hook_node_insert().
 *
 * Act on node insert, and if it was created through syndication,
 * write a record about it.
 */
function bpi_node_insert($node) {
  $node_id = $node->nid;
  $from_bpi = (isset($_GET['from']) && $_GET['from'] == 'bpi') ? TRUE : FALSE;

  if (isset($_SESSION['bpi']['content']) && $from_bpi) {
    $bpi_id = $_SESSION['bpi']['content']['bpi_id'];
    db_insert('bpi_syndicated')
      ->fields(array(
        'nid' => $node_id,
        'bid' => $bpi_id,
        'status' => BPI_SYNDICATED,
        'timestamp' => time(),
      ))
      ->execute();

    unset($_SESSION['bpi']['content']);
  }
}

/**
 * Implements hook_query_alter().
 *
 * Alters the query for node retrieval in the content grid,
 * so it now takes into account the BPI filtering settings.
 */
function bpi_query_alter($query) {
  $filter = isset($_SESSION['bpi']['filter']) ? $_SESSION['bpi']['filter'] : 'all';
  $available_filters = array('bpi_only', 'bpi_syndicated', 'bpi_pushed');

  if ($query->hasTag('node_load_multiple')) {
    $tables = &$query->getTables();
    $conditions = &$query->conditions();

    // In any case, when BPI filter is used, attach the BPI table.
    if (in_array($filter, $available_filters)) {
      $tables['bs'] = array(
        'join type' => 'INNER',
        'table' => 'bpi_syndicated',
        'alias' => 'bs',
        'condition' => 'bs.nid = base.nid',
        'arguments' => array(),
      );
    }

    if ($filter == 'bpi_syndicated') {
      $conditions[] = array(
        'field' => 'bs.status',
        'value' => BPI_SYNDICATED,
        'operator' => '=',
      );
    }
    elseif ($filter == 'bpi_pushed') {
      $conditions[] = array(
        'field' => 'bs.status',
        'value' => BPI_PUSHED,
        'operator' => '=',
      );
    }
  }
}

/**
 * Get the node id's which were actually syndicated/pushed from/to bpi.
 *
 * @param array/int $nodes
 *   An array of node id's or a single id.
 * @return
 *   An array of node id's matching the criteria.
 */
function bpi_get_bpi_nodes($nodes) {
  $query = db_select('bpi_syndicated', 'bs')
    ->fields('bs', array('nid', 'timestamp'));

  if (is_array($nodes) && count($nodes) > 0) {
    $query->condition('nid', $nodes, 'IN');
  }
  elseif (is_numeric($nodes)) {
    $query->condition('nid', $nodes, '=');
  }

  $result = $query
    ->execute()
    ->fetchAllAssoc('nid');

  return $result;
}
