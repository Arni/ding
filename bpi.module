<?php
/**
 * @file
 * BPI main module file.
 *
 * @todo General description needed here.
 */

/**
 * URL search query key.
 */
if (!defined('SEARCH_PHRASE_KEY')) {
  define('SEARCH_PHRASE_KEY', 'text');
}

/**
 * Ascending sorting identifier.
 */
if (!defined('SORT_ASCENDING')) {
  define('SORT_ASCENDING', 'asc');
}

/**
 * Descending sorting identifier.
 */
if (!defined('SORT_DESCENDING')) {
  define('SORT_DESCENDING', 'desc');
}

/**
 * Implements hook_menu().
 */
function bpi_menu() {
  $menu = array();

  $menu['admin/bpi'] = array(
    'title' => 'BPI syndication',
    'description' => 'Sindicate content from the well.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bpi_syndicate_page_form'),
    'access arguments' => array('syndicate content'),
    'file' => 'bpi.syndicate.inc',
  );

  $menu['admin/bpi/syndicate/%'] = array(
    'page callback' => 'bpi_syndicate_action',
    'page arguments' => array(3),
    'access arguments' => array('syndicate content'),
    'file' => 'bpi.syndicate.inc',
  );

  $menu['admin/bpi/page/%'] = array(
    'title' => 'BPI syndication',
    'description' => 'Retrieve content from the well.',
    'page callback' => 'bpi_search_content',
    'page arguments' => array(3),
    'access arguments' => array('syndicate content'),
    'file' => 'bpi.syndicate.inc',
  );

  $menu['admin/config/bpi'] = array(
    'title' => 'BPI',
    'description' => 'BPI Related Settings',
    'access arguments' => array('administer bpi'),
    'page callback' => 'bpi_admin_menu_block_page',
    'page arguments' => array(),
    'file' => 'bpi.admin.inc',
  );

  $menu['admin/config/bpi/settings'] = array(
    'title' => 'Service settings',
    'description' => 'BPI integration settings',
    'access arguments' => array('administer bpi'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bpi_admin_settings_form'),
    'file' => 'bpi.admin.inc',
  );

  $menu['admin/config/bpi/content_mapping'] = array(
    'title' => 'Content mapping',
    'description' => 'Map BPI fields to your content fields.',
    'access arguments' => array('administer bpi'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bpi_admin_content_mapping_form'),
    'file' => 'bpi.admin.inc',
  );

  return $menu;
}

/**
 * Implements hook_permission().
 */
function bpi_permission() {
  $perm = array();

  $perm['administer bpi'] = array(
    'title' => t('Administer BPI settings'),
  );

  $perm['syndicate content'] = array(
    'title' => t('Syndicate content'),
  );

  return $perm;
}

/**
 * Implements hook_theme().
 */
function bpi_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['bpi_well_item'] = array(
    'variables' => array(),
    'path' => $path . '/templates/',
    'template' => 'bpi-well-item',
  );

  $hooks['bpi_filter_item'] = array(
    'variables' => array(),
    'path' => $path . '/templates/',
    'template' => 'bpi-filter-item',
  );

  return $hooks;
}

/**
 * Implements hook_form_alter().
 *
 * Set some default values for the fields, when syndicating content,
 * according to mapped settings.
 */
function bpi_form_alter(&$form , &$form_state, $form_id) {
  $bpi_ctype = variable_get('bpi_content_type', '');
  $from_bpi = (isset($_GET['from']) && $_GET['from'] == 'bpi') ? TRUE : FALSE;

  // @todo
  // This could lead to unexpected behavior. Just a note.
  if (empty($bpi_ctype)) {
    return;
  }
  // Checking nid for NULL would say that this is create node form, not edit.
  elseif ($form_id == $bpi_ctype . '_node_form' && $form['nid']['#value'] == NULL && $from_bpi) {
    $bpi_content = $_SESSION['bpi']['content'];

    drupal_set_message(t('Syndicating content %title, from category %category and audience %audience.', array(
      '%title' => $bpi_content['title'],
      '%category' => $bpi_content['category'],
      '%audience' => $bpi_content['audience'],
    )));

    $form['title']['#default_value'] = $bpi_content['title'];
    $teaser = variable_get('bpi_field_teaser', '');
    $body = variable_get('bpi_field_body', '');
    $current_language = $form['language']['#value'];

    // EXPERIMENTAL.
    // Just oversee all the variants where the value could fit.
    if (isset($form[$teaser][$current_language][0]['summary'])) {
      $form[$teaser][$current_language][0]['summary']['#default_value'] = $bpi_content['teaser'];
    }
    elseif (isset($form[$teaser][$current_language][0]['value'])) {
      $form[$teaser][$current_language][0]['value']['#default_value'] = $bpi_content['teaser'];
    }
    elseif (isset($form[$teaser][$current_language][0])) {
      $form[$teaser][$current_language][0]['#default_value'] = $bpi_content['teaser'];
    }

    // EXPERIMENTAL.
    // Just oversee all the variants where the value could fit.
    if (isset($form[$body][$current_language][0]['value'])) {
      $form[$body][$current_language][0]['value']['#default_value'] = $bpi_content['body'];
    }
    elseif (isset($form[$body][$current_language][0])) {
      $form[$body][$current_language][0]['#default_value'] = $bpi_content['body'];
    }
  }
  elseif ($form_id == 'node_admin_content') {
    $nodes_in_table = array_keys($form['admin']['nodes']['#options']);
    $nodes_to_mark = bpi_get_bpi_nodes($nodes_in_table);

    foreach ($form['admin']['nodes']['#options'] as $node_id => &$row) {
      if (in_array($node_id, $nodes_to_mark)) {
        $row['title']['data']['#suffix'] .= '<sup class="bpi-marker">BPI</sup>';
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 *
 * Act on node insert, and if it was created through syndication,
 * write a record about it.
 */
function bpi_node_insert($node) {
  $node_id = $node->nid;
  $from_bpi = (isset($_GET['from']) && $_GET['from'] == 'bpi') ? TRUE : FALSE;

  if (isset($_SESSION['bpi']['content']) && $from_bpi) {
    $bpi_id = $_SESSION['bpi']['content']['bpi_id'];
    db_insert('bpi_syndicated')
      ->fields(array(
        'nid' => $node_id,
        'bid' => $bpi_id,
      ))
      ->execute();

    unset($_SESSION['bpi']['content']);
  }
}

/**
 * Get the node id's which were actually syndicated/pushed from/to bpi.
 *
 * @param array/int $nodes
 *   An array of node id's or a single id.
 * @return
 *   An array of node id's matching the criteria.
 */
function bpi_get_bpi_nodes($nodes) {
  $query = db_select('bpi_syndicated', 'bs')
    ->fields('bs', array('nid'));

  if (is_array($nodes)) {
    $query->condition('nid', $nodes, 'IN');
  }
  elseif (is_numeric($nodes)) {
    $query->condition('nid', $nodes, '=');
  }

  $result = $query
    ->execute()
    ->fetchAll(PDO::FETCH_COLUMN);

  return array_values($result);
}
