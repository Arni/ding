<?php

/**
 * @file openruth.module
 * Drupal implementation of ZRuth's openruth SOAP API
 */

/**
 * Implement hook_ding_provider().
 */
function openruth_ding_provider() {
  return array(
    'title' => 'Openruth',
    'settings' => 'openruth_settings_form',
    'provides' => array(
      'availability' => array(
        'prefix' => 'availability',
      ),
      'user' => array(
        'prefix' => 'user',
      ),
      'reservation' => array(
        'prefix' => 'reservation',
        'file' => drupal_get_path('module', 'openruth') . '/openruth.reservation.inc',
      ),
    ),
  );
}

/**
 * Form callback for provider module settings.
 *
 * This is a regular form callback.
 */
function openruth_settings_form() {
  $form['openruth_wsdl_url'] = array(
    '#type' => 'textfield',
    '#title' => t('OpenRuth WSDL URL'),
    '#description' => t('The WSDL URL for OpenRuth SOAP service, usually something like http://openruth.addi.dk/0.2/openruth.wsdl'),
    '#required' => TRUE,
    '#default_value' => variable_get('openruth_wsdl_url', ''),
  );

  $form['openruth_agency_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Agency Id'),
    '#default_value' => variable_get('openruth_agency_id', ''),
    '#description' => t('The OpenRuth agency id of the library.'),
  );

  $form['openruth_enable_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable logging'),
    '#default_value' => variable_get('openruth_enable_logging', FALSE),
    '#description' => t('Logs requests to the OpenRuth webservice. Sensitive information such as CPR number and PIN code is stripped from the requests.'),
  );

  return system_settings_form($form);
}

/**
 * Submit function. Trim values.
 */
function openruth_settings_form_submit($form, &$form_state) {
  foreach ($form_state['values'] as $name => $value) {
    $form_state['values'][$name] = trim($value);
  }
  system_settings_form_submit($form, $form_state);
}

/**
 * Return an OpenruthClient instance.
 */
function openruth_client() {
  // This is basically a singleton. We also wait until right before
  // instantiating to include our required classes. That seems like a
  // decent performance tradeoff instead of loading everything on every
  // page load.
  static $client;
  if (!isset($client)) {
    $path = drupal_get_path('module', 'openruth');
    include($path . '/lib/OpenruthClient/OpenruthClient.class.php');
    $wsdl = variable_get('openruth_wsdl_url', '');
    $agency_id = variable_get('openruth_agency_id', '');
    if (!empty($wsdl) && !empty($agency_id)) {
      try {
        $client = new OpenruthClient($wsdl, $agency_id);
      }
      catch (Exception $e) {
        watchdog('openruth', 'Constructor error: “@message”', array('@message' => $e->getMessage(), WATCHDOG_ERROR));
        $client = NULL;
      }
    }
    else {
      $client = NULL;
    }
  }
  return $client;
}

/**
 * Calls the Openruth backend.
 *
 * @param $method
 *   The desired method.
 * @param ...
 *   Arguments to the method.
 *
 * @return mixed
 *   NULL on error, or the result of the method call.
 */
function openruth_client_invoke($method) {
  $args = func_get_args();
  array_shift($args); // Lose the method.
  $client = openruth_client();
  if (!$client) {
    return NULL;
  }

  try {
    $result = call_user_func_array(array($client, $method), $args);
  }
  catch (Exception $e) {
    watchdog('openruth', '@method error: “@message”', array('@method' => $method, '@message' => $e->getMessage()), WATCHDOG_ERROR);
    return NULL;
  }

  return $result;
}

/**
 * Implements provider availability, holdings.
 */
function openruth_availability_holdings($provider_ids) {
  $holdings = openruth_client_invoke('get_holdings', $provider_ids);
  if (is_string($holdings)) {
    watchdog('openruth', '@method error: “@message”', array('@method' => 'get_holdings', '@message' => $holdings), WATCHDOG_ERROR);
    return array();
  }
  return $holdings;
}

/**
 * Implements provider user, authenticate.
 */
function openruth_user_authenticate($name, $pass) {
  $return = array(
    'success' => FALSE,
  );
  $res = openruth_client_invoke('user_check', $name, $pass);

  if (is_string($res)) {
    watchdog('openruth', 'Error in user_check: @error', array('@error' => $res), WATCHDOG_ERROR);
    return $return;
  }
  elseif (!$res || !$res->userFound || !$res->userPinCodeOk) {
    // No reply or not found.
    return $return;
  }

  if ($res->userBlocked) {
    // @todo Tell the user...
  }

  $return['success'] = TRUE;
  $return['creds'] = array(
    'name' => $name,
    'pass' => $pass,
  );

  $userStatus = _openruth_user_status($return['creds'], TRUE);
  if ($userStatus && isset($userStatus->userInfo)) {
    $userInfo = $userStatus->userInfo;
    $return['user'] = array(
      'data' => array(
        'display_name' => $userInfo->userFirstName . ' ' . $userInfo->userLastName,
      ),
    );

    if (isset($userInfo->agencyCounter)) {
      $return['user']['data']['preferred_branch'] = $userInfo->agencyCounter;
    }

    if (isset($userInfo->userEmail)) {
      $return['user']['mail'] = $userInfo->userEmail;
    }
  }

  return $return;
}

/**
 *
 */
function openruth_reservation_create($account, $id) {
  if ($creds = ding_user_get_creds($account)) {
    // @todo pickup branch?

  }
  else {
    throw new DingProviderAuthException;
  }
}

/**
 * Get user status.
 *
 * Session cached for efficiency.
 */
function _openruth_user_status($creds = NULL, $reset = FALSE) {
  // Flush cache if creds is not specified.
  if ($reset || !is_array($_SESSION['openruth_user_status']) || !$creds) {
    $_SESSION['openruth_user_status'] = array();
  }
  if (!$creds) {
    return;
  }

  $id = hash('sha512', $creds['name'] . $creds['pass']);

  if (!isset($_SESSION['openruth_user_status'][$id]) ||
    $_SESSION['openruth_user_status'][$id]['time'] < ($_SERVER['REQUEST_TIME'] - 300)) {
    $status = openruth_client_invoke('user_status', $creds['name'], $creds['pass']);
    if ($status && !is_string($status)) {
      if (isset($status->userInfo) && isset($status->userInfo->userPinCode)) {
        // Don't cache user pass.
        unset($status->userInfo->userPinCode);
      }
      $_SESSION['openruth_user_status'][$id] = array(
        'time' => $_SERVER['REQUEST_TIME'],
        'data' => $status,
      );
    }
    elseif (is_string($status)) {
      watchdog('openruth', 'Error fetching user status @error', array('@error' => $status), WATCHDOG_ERROR);
      return;
    }
  }
  if ($_SESSION['openruth_user_status'][$id]) {
    return $_SESSION['openruth_user_status'][$id]['data'];
  }
}
