<?php

/**
 * @file openruth.module
 * Drupal implementation of ZRuth's openruth SOAP API
 */

include_once('openruth.features.inc');

/**
 * Implement hook_ding_provider().
 */
function openruth_ding_provider() {
  return array(
    'title' => 'Openruth',
    'settings' => 'openruth_settings_form',
    'provides' => array(
      'availability' => array(
        'prefix' => 'availability',
        'file' => drupal_get_path('module', 'openruth') . '/openruth.availability.inc',
      ),
      'user' => array(
        'prefix' => 'user',
        'file' => drupal_get_path('module', 'openruth') . '/openruth.user.inc',
      ),
      'reservation' => array(
        'prefix' => 'reservation',
        'file' => drupal_get_path('module', 'openruth') . '/openruth.reservation.inc',
      ),
      'loan' => array(
        'prefix' => 'loan',
        'file' => drupal_get_path('module', 'openruth') . '/openruth.loan.inc',
      ),
      'debt' => array(
        'prefix' => 'debt',
        'file' => drupal_get_path('module', 'openruth') . '/openruth.debt.inc',
      ),
    ),
  );
}

/**
 * Implements hook_ding_devel_timers().
 */
function openruth_ding_devel_timers() {
  return array(
    'openruth' => array(
      'title' => 'Openruth total request time was @time ms.',
    ),
    'openruth_net' => array(
      'title' => 'Openruth net time was @time ms.',
      'include in total' => FALSE,
    ));
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Add in pincode validation.
 * Attach profile2 form
 */
function openruth_form_user_profile_form_alter(&$form, &$form_state) {
  // Ensure that we're dealing with a provider user.
  if (!ding_user_is_provider_user($form_state['user'])) {
    return;
  }

  // only show pincode fields once (on the general account)
  if( $form['#user_category'] != 'account' ){
    unset($form['account']['pincode']);
  }

  // get profile2
  global $user;
  $profile2 = profile2_load_by_user($user, 'provider_openruth');

  // attach profile2 form to user_profile_form.
  // profile2 form could be shown by editing people->permissions->profile2, but profile2 adds a tab and we don't want that.
  if( ding_user_is_provider_user( $user ) && $profile2 ) { 
    $form_state['profiles'] = array( 'provider_openruth'=>$profile2 );
    profile2_attach_form( $form, $form_state );
  }
  // custom validator 
  $form['#validate'][] = 'openruth_profile_form_validate';
}


/**
 * Validate that new pincode is 4 numbers.
 */
function openruth_profile_form_validate(&$form, &$form_state) {
  if (!empty($form_state['values']['pincode'])) {
    if (!preg_match('/^\d{4}$/', $form_state['values']['pincode'])) {
      form_error($form['account']['pincode'], t('Pincode must be four numbers.'));
    }
  }
}

/**
 * Form callback for provider module settings.
 *
 * This is a regular form callback.
 */
function openruth_settings_form() {
  $form['openruth'] = array(
    '#type' => 'fieldset',
    '#title' => t('OpenRuth service settings'),
    '#tree' => FALSE,
  );

  $form['openruth']['openruth_wsdl_url'] = array(
    '#type' => 'textfield',
    '#title' => t('OpenRuth WSDL URL'),
    '#description' => t('The WSDL URL for OpenRuth SOAP service, usually something like http://openruth.addi.dk/0.2/openruth.wsdl'),
    '#required' => TRUE,
    '#default_value' => variable_get('openruth_wsdl_url', ''),
  );

  $form['openruth']['openruth_agency_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Agency Id'),
    '#default_value' => variable_get('openruth_agency_id', ''),
    '#description' => t('The OpenRuth agency id of the library.'),
  );

  $form['openruth']['openruth_enable_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable logging'),
    '#default_value' => variable_get('openruth_enable_logging', FALSE),
    '#description' => t('Logs requests to the OpenRuth webservice. Sensitive information such as CPR number and PIN code is stripped from the requests.'),
  );

  return system_settings_form($form);
}

/**
 * Submit function. Trim values.
 */
function openruth_settings_form_submit($form, &$form_state) {
  foreach ($form_state['values'] as $name => $value) {
    $form_state['values'][$name] = trim($value);
  }
  system_settings_form_submit($form, $form_state);
}

/**
 * Return an OpenruthClient instance.
 */
function openruth_client() {
  // This is basically a singleton. We also wait until right before
  // instantiating to include our required classes. That seems like a
  // decent performance tradeoff instead of loading everything on every
  // page load.
  static $client;
  if (!isset($client)) {
    $path = drupal_get_path('module', 'openruth');
    require_once($path . '/lib/OpenruthClient/OpenruthClient.class.php');
    $wsdl = variable_get('openruth_wsdl_url', '');
    $agency_id = variable_get('openruth_agency_id', '');
    if (!empty($wsdl) && !empty($agency_id)) {
      try {
        $client = new OpenruthClient($wsdl, $agency_id);
      }
      catch (Exception $e) {
        watchdog('openruth', 'Constructor error: “@message”', array('@message' => $e->getMessage(), WATCHDOG_ERROR));
        $client = NULL;
      }
    }
    else {
      $client = NULL;
    }
  }
  return $client;
}

/**
 * Calls the Openruth backend.
 *
 * @param $method
 *   The desired method.
 * @param ...
 *   Arguments to the method.
 *
 * @return mixed
 *   NULL on error, or the result of the method call.
 */
function openruth_client_invoke($method) {
  $args = func_get_args();
  array_shift($args); // Lose the method.
  $client = openruth_client();
  if (!$client) {
    return NULL;
  }
  try {
    timer_start('openruth');
    $result = call_user_func_array(array($client, $method), $args);
    timer_stop('openruth');
  }
  catch (Exception $e) {
    timer_stop('openruth');
    watchdog('openruth', '@method error: “@message”', array('@method' => $method, '@message' => $e->getMessage()), WATCHDOG_ERROR);
    return NULL;
  }
  return $result;
}

/**
 * Allowed values callback for field.
 */
function openruth_allowed_branches() {
  $branches = openruth_client_invoke('get_agencycounters');
  return $branches;
}

/**
 * Update profile2 with values from Openruth userInfo.
 */
function openruth_profile_update($profile, $userinfo) {
  $langs = field_language('profile2', $profile);
  $profile->openruth_preferred_branch[$langs['openruth_preferred_branch']][0]['value'] = $userinfo->agencyCounter;
}

/**
 * Implements hook_profile2_presave().
 *
 * Sends changes to Openruth and updates profile with real values.
 * sofar only preferred_branch is updateable
 * period of interest is saved locally
 * @todo; is period of interest in zruth
 */
function openruth_profile2_presave($profile) {
  if ($profile->type == 'provider_openruth' &&
      !isset($profile->openruth_init) &&
      !empty($profile->original->openruth_preferred_branch) &&
      $profile->openruth_preferred_branch != $profile->original->openruth_preferred_branch) {
    $langs = field_language('profile2', $profile);
    $changes['preferred_branch'] = $profile->openruth_preferred_branch[$langs['openruth_preferred_branch']][0]['value'];

    $creds = ding_user_get_creds($profile);
    $res = openruth_client_invoke('update_userinfo', $creds['name'], $creds['pass'], $changes);
    if ($res !== TRUE) {
      // Call failed, throw exception.
      if (is_string($res)) {
        $exception_message = t('Update userinfo failed, message: @message', array('@message' => $res));
      }
      else {
        $exception_message = t('Update userinfo failed.');
      }
      throw new Exception($exception_message);
    }

    // Update the profile with whatever Openruth says.
    $creds = ding_user_get_creds($profile);
    if (($userStatus = _openruth_user_status($creds, TRUE)) && isset($userStatus->userInfo)) {
      openruth_profile_update($profile, $userStatus->userInfo);
    };
  }
}

/**
 * Implements hook_profile2_view(),
 */
function openruth_profile2_view($profile, $view_mode, $langcode) {
  try{ $creds = ding_user_get_creds($profile);}
  catch(DingProviderAuthException $e){
    $creds = null;
  }

  if (($userStatus = _openruth_user_status($creds, TRUE)) && isset($userStatus->userInfo)) {
    $userinfo = $userStatus->userInfo;
    $props = array(
      'userFirstName',
      'userLastName',
      'userEmail',
      'userAddress',
      'userPostCode',
      'userCity',
      'userVillage',
      'userTelephone',
      'userMobilePhone',
    );
    foreach ($props as $prop) {
      $data[$prop] = isset($userinfo->$prop) ? $userinfo->$prop : '';
    }

    $profile->content['name'] = array(
      '#type' => 'item',
      '#title' => t('Name'),
      '#markup' => join(' ', array_filter(array($data['userFirstName'], $data['userLastName']))),
    );

    $address_parts = array($data['userAddress']);
    if (!empty($data['userVillage']) && $data['userVillage'] != $data['userCity']) {
      $address_parts[] = $data['userVillage'];
    }
    if (!empty($data['userPostCode']) || !empty($data['userCity'])) {
      $address_parts[] = join(' ', array_filter(array($data['userPostCode'], $data['userCity'])));
    }

    // @todo: really, there should be a template for this.
    $profile->content['address'] = array(
      '#type' => 'item',
      '#title' => t('Address'),
      '#markup' => '<p>' . join('</p><p>', $address_parts) . '</p>',
    );
  };
}



/**
 * Impelements hook_user_view
 * add provider-specific fields to user->content
 */
function openruth_user_view($account, $view_mode = 'full', $langcode = NULL) {
  // get profile2
  $profile2 = profile2_load_by_user($account, 'provider_openruth');
  if( empty($profile2) ) {
    return;
  }  
  // get field languages
  $langs = field_language('profile2', $profile2);

  // show preferred branch
  $pref_branch = $profile2->openruth_preferred_branch[$langs['openruth_preferred_branch']][0]['value'];
  $branches = openruth_allowed_branches();
  $pref = isset($branches[$pref_branch]) ? $branches[$pref_branch] : FALSE;
 
  if( $pref ) {
  $account->content['preferred_branch'] = array(
      '#type' => 'item',
      '#title' => t('Pickup branch'),
      '#markup' => '<span>'.$pref.'</span>',
    );
  }

  // show interest period
  $field_info = field_info_field('field_openruth_interest_period');  
  $int_values = isset( $field_info['settings']['allowed_values'] ) ?  $field_info['settings']['allowed_values']: FALSE;
  if( !empty($field_info) && $int_values  ) {
    $int_period = $profile2->field_openruth_interest_period[$langs['field_openruth_interest_period']][0]['value'];
    $interest_period = isset($int_values[$int_period]) ? $int_values[$int_period] : FALSE;
  }

  if( $interest_period ) {
    $account->content['interest_period'] = array(
      '#type' => 'item',
      '#title' => t('Interest period'),
      '#markup' => '<span>'.$interest_period.'</span>',
    );
  }  
}

/**
 * Get user status.
 *
 * Session cached for efficiency.
 */
function _openruth_user_status($creds = NULL, $reset = FALSE) {
  // Flush cache if creds is not specified.
  if ($reset || !is_array($_SESSION['openruth_user_status']) || !$creds) {
    $_SESSION['openruth_user_status'] = array();
  }
  if (!$creds) {
    return;
  }

  $id = hash('sha512', $creds['name'] . $creds['pass']);

  if (!isset($_SESSION['openruth_user_status'][$id]) ||
    $_SESSION['openruth_user_status'][$id]['time'] < (REQUEST_TIME - 300)) {
    $status = openruth_client_invoke('user_status', $creds['name'], $creds['pass']);
    if ($status && !is_string($status)) {
      if (isset($status->userInfo) && isset($status->userInfo->userPinCode)) {
        // Don't cache user pass.
        unset($status->userInfo->userPinCode);
      }
      $_SESSION['openruth_user_status'][$id] = array(
        'time' => REQUEST_TIME,
        'data' => $status,
      );
    }
    elseif (is_string($status)) {
      watchdog('openruth', 'Error fetching user status @error', array('@error' => $status), WATCHDOG_ERROR);
      return;
    }
  }
  if ($_SESSION['openruth_user_status'][$id]) {
    return $_SESSION['openruth_user_status'][$id]['data'];
  }
}
