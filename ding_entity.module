<?php

/**
 * @file
 * Interface module for talking with the materials backend.
 */

/**
 *
 */
function ding_entity_info($ding_entity_type = NULL) {
  $types = &drupal_static(__FUNCTION__);
  $entity_types = entity_get_info();
  foreach ($entity_types as $entity_type => $entity_info) {
    if (isset($entity_info['ding_entity_type'])) {
      $type = $entity_info['ding_entity_type'];
      $types[$type] = array(
        'entity_type' => $entity_type,
        'menu' => isset($entity_info['ding_entity_menu']) ? $entity_info['ding_entity_menu'] : NULL,
      );
    }
  }

  if (empty($ding_entity_type)) {
    return $types;
  }
  elseif (isset($types[$ding_entity_type])) {
    return $types[$ding_entity_type];
  }
}

/**
 *
 */
function ding_entity_load($id) {
  if ($type = ding_entity_info('ding_entity')){
    return reset(entity_load($type['entity_type'], FALSE, array('ding_entity_id' => array($id))));
  }
  return FALSE;
}

function ding_entity_collection_load($id) {
  if ($type = ding_entity_info('ding_entity_collection')){
    return reset(entity_load($type['entity_type'], FALSE, array('ding_entity_collection_id' => array($id))));
  }
  return FALSE;
}

/**
 * Base class for Ding entity types.
 *
 * Do not extend this class, use one of the subclasses in this file.
 */
class DingEntityBase {
  protected $properties = array('id' => FALSE);

  public function __get($prop) {
    if (isset($this->properties[$prop])) {
      // Use property_exists() to support NULL values.
      if (property_exists($this, $prop)) {
        return $this->$prop;
      } elseif (($method = 'get' . strtoupper($prop[0]) .  substr($prop, 1)) &&
        method_exists($this, $method)) {
        return call_user_func(array($this, $method));
      }
    }

    $trace = debug_backtrace();
    trigger_error('Undefined property via __get(): ' . $prop .
      ' in ' . $trace[0]['file'] .
      ' on line ' . $trace[0]['line'],
      E_USER_NOTICE);

    return NULL;
  }

  public function getId() {
    return $this->id = $this->ding_entity_id;
  }

  /**
   * Return whether an object is of a given pseudo-class.
   *
   * Modules can add their own pseudo-classes by implementing
   * hook_ding_entity_is(). This function will call all
   * implementations and return the overall result.
   *
   * Modules may return TRUE, FALSE or NULL from the hook. If any modules
   * returned FALSE, the result is FALSE, else the result is TRUE if anyone
   * returned TRUE, FALSE otherwise.
   */
  public function is($class) {
    $result = module_invoke_all('ding_entity_is', $this, $class);
    // Return true if anyone returned true, and nobody returned false.
    if (!in_array(FALSE, $result) && in_array(TRUE, $result)) {
      return TRUE;
    }
    return FALSE;
  }
}

abstract class DingEntity extends DingEntityBase {
  function __construct() {
    $this->properties += array('title' => FALSE, 'creator' => FALSE, 'abstract' => FALSE);
  }
}

abstract class DingEntityCollection extends DingEntityBase {
  function __construct() {
    $this->properties += array('entities' => FALSE);
  }
}
