<?php

/**
 * Delimiter for extracting a part of a field.
 */
define('DING_WAYF_FIELD_DELIMITER', ':');

/**
 * Implements hook_permission().
 */
function ding_wayf_permission() {
  return array(
    'configure wayf' => array(
      'title' => t('Configure WAYF'),
      'description' => t('Allow role to configure WAYF settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ding_wayf_menu() {
  $items = array();
  $items['admin/config/ding/wayf'] = array(
    'title' => t('WAYF'),
    'description' => t('Configure WAYF'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_wayf_admin_settings_form'),
    'access arguments' => array('configure wayf'),
    'file' => 'includes/ding_wayf.admin.inc',
  );
  $items['wayf/login'] = array(
    'title' => t('Logon to the site'),
    'description' => t('Provides WAYF login.'),
    'page callback' => 'ding_wayf_redirect_login',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Helper function that handles the login procedure. If the user is not yet
 * authenticated by WAYF - the user will be redirected to WAYF login. If the
 * user is authenticated the user will be logged into the drupal site as a
 * library user.
 *
 * The library system may block the user and he/she will automaticly be logged
 * out of WAYF.
 *
 * If the user is logged into both system, the user will be redirecte to a
 * preconfigured URL.
 */
function ding_wayf_redirect_login() {
  global $user;

  $simplesaml = variable_get('ding_wayf', NULL);

  if (!$simplesaml) {
    drupal_set_message(t('The WAYF login module is not configured yet, plase contact the site administrator.'), 'error', FALSE);
    ding_wayf_redirect_user('<front>');
  }

  ding_wayf_get_provider_attributes($simplesaml);

  if ($user->uid == 0) {
    require_once $simplesaml['installdir'] . '/lib/_autoload.php';
    $saml = ding_wayf_get_saml_connection($simplesaml['sp']);

    if ($saml->isAuthenticated()) {
      $wayf_data = $saml->getAttributes();
      $authentication_attributes = ding_wayf_get_required_attributes($wayf_data, $simplesaml['attributes']);
      ding_wayf_login($authentication_attributes);
    }
    else {
      // Redirect the user to the WAYF login page.
      $saml->requireAuth();
    }
  }
  else {
    // Send the user back to her context or use the fallback URL.
    ding_wayf_redirect_user($simplesaml['redirect']);
  }
}

/**
 * Login a wayf user, as thay where logged in by the library system.
 */
function ding_wayf_login($authentication_attributes) {
  $simplesaml = variable_get('ding_wayf', NULL);

  if (!empty($authentication_attributes)) {
    $auth_res = ding_provider_invoke('wayf', 'authenticate', $authentication_attributes);

    if ($auth_res['success']) {
      ding_wayf_redirect_user($simplesaml['redirect']);
    }
    else {
      drupal_set_message(t('You could not be logged into the library system, so you have been logged out of WAYF.'), 'warning');
      watchdog('ding_wayf', 'Provider returned invalid result: @res', array('@res' => print_r($auth_res, TRUE)), WATCHDOG_DEBUG);
    }
  }
  else {
      drupal_set_message(t('WAYF did not return required authentication attributes. Please notify administrator if problem persistes.'), 'warning');
      watchdog('ding_wayf', 'WAYF provided insufficient attributes: @res', array('@res' => print_r(ding_provider_invoke('wayf', 'ding_wayf_attributes'), TRUE)), WATCHDOG_DEBUG);
  }

  ding_wayf_user_logout();
  ding_wayf_redirect_user('<front>');
}

/**
 * Helper function that redirectes the user to previous context or the fallback
 * URL given as parameter.
 *
 * @param string $url
 */
function ding_wayf_redirect_user($url) {
  if (!empty($_REQUEST['destination'])) {
    $url = $_REQUEST['destination'];
  }
  else {
    global $user;
    $url = str_replace('%uid', $user->uid, $url);
  }

  drupal_goto($url);
}

/**
 * Implementation of hook_user_logout().
 *
 * Ensures that the WAYF logout function is called on user logout.
 *
 * @param $account
 *   account of logged in user.
 */
function ding_wayf_user_logout($account = NULL) {
  $simplesaml = variable_get('ding_wayf', array());

  if (!empty($simplesaml)) {
    require_once $simplesaml['installdir'] . '/lib/_autoload.php';

    $saml = ding_wayf_get_saml_connection($simplesaml['sp']);

    if ($saml->isAuthenticated()) {
      $saml->logout();
    }
  }
}

/**
 * Helper function that extracts a field from a saml attribute string.
 *
 * @param string $data
 * @param string $field
 * @return string
 */
function ding_wayf_extract_data($data, $field = FALSE) {
  if (empty($field)) {
    return $data[0];
  }
  else {
    $field .= DING_WAYF_FIELD_DELIMITER;

    if (($pos = strpos($data[0], $field)) !== FALSE) {
      return substr($data[0], $pos + strlen($field));
    }
    else {
      return '';
    }
  }
}

/**
 * Gets a connection to simple saml php.
 *
 * @param string $sp
 * @return SimpleSAML_Auth_Simple
 */
function ding_wayf_get_saml_connection($sp) {
  return new SimpleSAML_Auth_Simple($sp);
}

/**
 * Check that simpleSAMLphp is installed at the location given.
 */
function ding_wayf_check_simplesamlphp($path) {
  return file_exists($path . '/lib/_autoload.php');
}

/**
 * Implements hook_block_info().
 *
 * @return array
 */
function ding_wayf_block_info() {
  return array(
    'login' => array(
      'info' => t('WAYF login'),
    ),
  );
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 * @return array
 */
function ding_wayf_block_view($delta) {
  $block = array();
  if ($delta == 'login') {
    global $user;
    // Only show login link for anon. users.
    if ($user->uid == 0) {
      $block['content'] = l(t('Login using WAYF'), 'wayf/login', array('query' => drupal_get_destination()));
    }
  }

  return $block;
}

/**
 * Sets attributes if specified by Ding provider.
 */
function ding_wayf_get_provider_attributes(&$simplesaml) {
  $wayf_attributes = module_invoke_all('ding_wayf_attributes');

  if ($wayf_attributes) {
    $simplesaml['attributes'] = $wayf_attributes;
  }
}

/**
 * Extract required attributes from available WAYF attributes.
 *
 * @param $wayf_attributes
 *   array of WAYF attributes
 * @param $required_attributes
 *   array of required attributes
 * @return
 *   array of attributes which will be empty if not all required attributes is
 *   present.
 */
function ding_wayf_get_required_attributes($wayf_attributes, $required_attributes) {
  $attribute_list = array();

  if (isset($wayf_attributes) && is_array($required_attributes)) {
    foreach($required_attributes as $attribute => $value) {
      if (!isset($wayf_attributes[$attribute])) {
        return array();
      }

      $attribute_list[$attribute] = $wayf_attributes[$attribute];
    }

    return $attribute_list;
  }
  else {
    return array();
  }
}
