<?php

/**
 * Delimiter for extracting a part of a field.
 */
define('DING_WAYF_FIELD_DELIMITER', ':');

/**
 * Implements hook_permission().
 */
function ding_wayf_permission() {
  return array(
    'configure wayf' => array(
      'title' => t('Configure WAYF'),
      'description' => t('Allow role to configure WAYF settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ding_wayf_menu() {
  $items = array();
// config page
  $items['admin/config/ding/wayf'] = array(
    'title' => t('WAYF'),
    'description' => t('Configure WAYF'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_wayf_admin_settings_form'),
    'access arguments' => array('configure wayf'),
    'file' => 'includes/ding_wayf.admin.inc',
  );
// login page
  $items['wayf/login'] = array(
    'title' => t('Logon to the site'),
    'description' => t('Provides WAYF login.'),
    'page callback' => 'ding_wayf_redirect_login',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
// error page
  $items['wayf/accept'] = array(
    'title' => t('WAYF_ACCEPT'),
    'description' => t('Provides WAYF login.'),
    'page callback' => 'ding_wayf_accept',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/** \brief error page callback
 * 
 */
function ding_wayf_accept() {
  // clear messages - this one comes via login-form,
  // so at least 'unrecognized user or password' is set
  // drupal_get_messages();

  return drupal_render(drupal_get_form('ding_wayf_accept_form'));
}

function ding_wayf_accept_form() {
  $form['container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('element-section', drupal_html_class('wayf_accept_form')),
    ),
  );
  $form['container']['accept_form'] = array(
    'messages' => array(
      'message' => array(
        '#markup' => t('You have been authenticated by wayf, but you have no account with bibliotek.dk etc...'),
      ),
      'accept' => array(
        '#type' => 'checkbox',
        '#default_value' => FALSE,
        '#title' => t('accept_wayf_binding', array(), array('context' => 'ding_wayf')),
      ),
    ),
  );
  $form['container']['actions'] = array(
    'abort' => array(
      '#name' => 'abort',
      '#type' => 'submit',
      '#value' => t('abort', array(), array('context' => 'ding_wayf')),
    ),
    'submit' => array(
      '#name' => 'continue',
      '#type' => 'submit',
      '#value' => t('continue', array(), array('context' => 'ding_wayf')),
    ),
  );
  return $form;
}

/** Implements hook_init
 *
 * special case; user was authenticated with wayf, but for some reason
 * not with drupal - maybe user aborted while loggin in.
 * make sure SESSION variables are removed, and user is logged out of wayf
 * 
 * @global type $user 
 */
function ding_wayf_init() {
  global $user;
  if (arg(0) != 'wayf') {
    if ($user->uid == 0) {
      if (isset($_SESSION['accept_wayf'])) {
        unset($_SESSION['accept_wayf']);        
        ding_wayf_user_logout();
      }
    }
  }
}

/** \brief validation handler for accept_form
 * 
 * 
 *
 * @param type $form
 * @param type $form_state 
 */
function ding_wayf_accept_form_validate($form, &$form_state) {
// continue button clicked
  if ($form_state['clicked_button']['#name'] == 'continue') {
    if ($form_state['values']['accept']) {

// get name and pass from session; create a user if accept is set
// @TODO check if session is set
      $name = $_SESSION['accept_wayf']['name'];
      $pass = $_SESSION['accept_wayf']['pass'];
      $status = $_SESSION['accept_wayf']['status'];
      // we don't need the session variables anymore
      unset($_SESSION['accept_wayf']);

// prepare an array for ding_wayf_login
      $authentication_attributes['mail'][0] = $name;
      $authentication_attributes['eduPersonTargetedID'][0] = $pass;

      switch ($status) {
        // first use case - no account with bibliotek.dk
        case 'no_user':
          if (ding_provider_implements('user', 'create_account')) {
            if (ding_provider_invoke('user', 'create_account', $name, $pass)) {
              // user has been created with mail, wayfid.
              if (ding_provider_implements('wayf', 'bind')) {
                ding_provider_invoke('wayf', 'bind', $name, $pass);
              }
              // pass key for email to login method
              $notify_by_mail->key = 'wayf_new_user';
              // if user wishes to change password later on he can do so
              ding_wayf_login($authentication_attributes, 'wayf', $notify_by_mail);
            }
          }
          break;
        // next use case - user has an bibdk account, but no wayfid
        case 'bibdk_user':
          if (ding_provider_implements('wayf', 'bind')) {
            if (ding_provider_invoke('wayf', 'bind', $name, $pass)) {
              ding_wayf_login($authentication_attributes, 'wayf');
            }
          }
          break;
        default:
          drupal_set_message(t('wayf_could_not_login', array(), array('context' => 'ding_wayf')));
          drupal_goto('user');
          break;
      }
    }
    else {
// user clicked continue, but did not check accept. maybe user forgot to check the box
// tell him to either check the box or press abort
      form_set_error('accept', t('either check accept or press abort', array(), array('context' => 'ding_wayf')));
    }
  }
}

/** \brief ding_wayf_accept_form submit handler 
 *
 * redirect to user page if abort is clicked
 * 
 * @param type $form
 * @param type $form_state 
 */
function ding_wayf_accept_form_submit($form, $form_state) {
  if ($form_state['clicked_button']['#name'] == 'abort') {
    ding_wayf_user_logout(NULL, 'user');
  }
}

/** \brief Login a wayf user, as thay where logged in by the library system.
 * easy solution; fake form_state and submit user_login form. In that way
 * ding_user handles user-login as always.
 * 
 * pre; user is authenticated via wayf or we wouldn't be here
 */
function ding_wayf_login($authentication_attributes, $provider = 'wayf', $notify_by_mail = NULL) {
  global $user;
  if ($user->uid == 0) {
    $form_state = array();
// set authentication provider for ding_user (@see ding_user_user_login_validate)
    $form_state['values']['authentication_provider'] = $provider;
// set name and password for login
    $form_state['values']['name'] = $authentication_attributes['mail'][0];
    $form_state['values']['mail'] = $authentication_attributes['mail'][0];
    $form_state['values']['pass'] = $authentication_attributes['eduPersonTargetedID'][0];
    if (isset($notify_by_mail)) {
      $form_state['mail_me'] = $notify_by_mail;
    }
    //clear messages
    drupal_get_messages();
// submit login form
    drupal_form_submit('user_login_block', $form_state);
  }
  else {
    ding_wayf_redirect('user/%uid/edit');
  }
}

/** Implements hook_form_FORM_ID_alter (user_login)
 * 
 * add wayf login block to form['actions']
 */
function ding_wayf_form_user_login_alter(&$form, &$form_state) {
  $form['actions']['wayf_login'] = array(
    '#markup' => ding_wayf_render_login_block(),
  );
}

/** \brief Custom render function for ding_wayf_login block
 * 
 * @return html; the rendered block 
 */
function ding_wayf_render_login_block() {
  $block = block_load('ding_wayf', 'login');
  return drupal_render(_block_get_renderable_array(_block_render_blocks(array($block))));
}

/**
 * Implements hook_form_alter() (user_login, user_login_block). 
 * add hidden field to set authentication provider
 * add validate handler for wayf login
 */
function ding_wayf_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
// option to set authentication provider for ding user (@see ding_user_user_login_validate)
      $form['authentication_provider'] = array(
        '#type' => 'hidden',
      );
// add a validation handler (if provider implements it)
      $provider = ding_provider_get_provider_module_name('wayf');
      if (isset($provider)) {
        $function = $provider . '_wayf_validate';
        if (function_exists($function)) {
          $form['#validate'][] = $function;
        }
      }
      break;
    default:
      break;
  }
}

/**
 * Helper function that handles the login procedure. If the user is not yet
 * authenticated by WAYF - the user will be redirected to WAYF login. If the
 * user is authenticated the user will be logged into the drupal site as a
 * library user.
 *
 * The library system may block the user and he/she will automaticly be logged
 * out of WAYF.
 *
 * If the user is logged into both system, the user will be redirecte to a
 * preconfigured URL.
 */
function ding_wayf_redirect_login() {
  global $user;
// Load configuration.
  $config = variable_get('ding_wayf', NULL);
  if (!$config) {
// The configuration have not be created yet, so send user to the front page
// with an error message.
    drupal_set_message(t('The WAYF login module is not configured yet, plase contact the site administrator.', array(), array('context' => 'ding_wayf')), 'error', FALSE);
    ding_wayf_redirect_user('<front>');
  }

  $simplesaml = variable_get('ding_wayf', NULL);

  if (!$simplesaml) {
    drupal_set_message(t('The WAYF login module is not configured yet, plase contact the site administrator.'), 'error', FALSE);
    ding_wayf_redirect_user('<front>');
  }

  ding_wayf_get_provider_attributes($simplesaml);

  if ($user->uid == 0) {
    require_once $simplesaml['installdir'] . '/lib/_autoload.php';
    $saml = ding_wayf_get_saml_connection($simplesaml['sp']);

    if ($saml->isAuthenticated()) {
      $wayf_data = $saml->getAttributes();
      $authentication_attributes = ding_wayf_get_required_attributes($wayf_data, $simplesaml['attributes']);
// log user in
      ding_wayf_login($authentication_attributes);
    }
    else {
// Redirect the user to the WAYF login page.
      $saml->requireAuth();
    }
  }
  else {
// Send the user back to her context or use the fallback URL.
    ding_wayf_redirect_user($simplesaml['redirect']);
  }
}

/**
 * Helper function that redirectes the user to previous context or the fallback
 * URL given as parameter.
 *
 * @param string $url
 */
function ding_wayf_redirect_user($url) {
  if (!empty($_REQUEST['destination'])) {
    $url = $_REQUEST['destination'];
  }
  else {
    global $user;
    $url = str_replace('%uid', $user->uid, $url);
  }

  drupal_goto($url);
}

/** Implements hook_user_delete
 *  log user out of simplesaml
 */
function ding_wayf_user_delete($account) {
  ding_wayf_user_logout($account);
}

/**
 * Implementation of hook_user_logout().
 *
 * Ensures that the WAYF logout function is called on user logout.
 *
 * @param $account
 *   account of logged in user.
 */
function ding_wayf_user_logout($account = NULL, $origin = NULL) {
  global $base_url;
  $simplesaml = variable_get('ding_wayf', array());
  $url = NULL;

  if (isset($_SESSION['accept_wayf'])) {
    // unset _SESSION variables
    unset($_SESSION['accept_wayf']);
  }

  if (!empty($simplesaml)) {
    require_once $simplesaml['installdir'] . '/lib/_autoload.php';

    $saml = ding_wayf_get_saml_connection($simplesaml['sp']);

    if ($saml->isAuthenticated()) {
      if (isset($origin)) {
        $url = $base_url . '/' . $origin;
      }
// we pass simplesaml the url to return to -
// you can pass simplesaml::logout an array of values ['ReturnTo', 'ReturnCallback'] etc.
// if only a string is passed it will be handled as 'ReturnTo'
      $saml->logout($url);
    }
  }
}

/**
 * Helper function that extracts a field from a saml attribute string.
 *
 * @param string $data
 * @param string $field
 * @return string
 */
function ding_wayf_extract_data($data, $field = FALSE) {
  if (empty($field)) {
    return $data[0];
  }
  else {
    $field .= DING_WAYF_FIELD_DELIMITER;

    if (($pos = strpos($data[0], $field)) !== FALSE) {
      return substr($data[0], $pos + strlen($field));
    }
    else {
      return '';
    }
  }
}

/**
 * Gets a connection to simple saml php.
 *
 * @param string $sp
 * @return SimpleSAML_Auth_Simple
 */
function ding_wayf_get_saml_connection($sp) {
  return new SimpleSAML_Auth_Simple($sp);
}

/**
 * Check that simpleSAMLphp is installed at the location given.
 */
function ding_wayf_check_simplesamlphp($path) {
  return file_exists($path . '/lib/_autoload.php');
}

/**
 * Implements hook_block_info().
 *
 * @return array
 */
function ding_wayf_block_info() {
  return array(
    'login' => array(
      'info' => t('WAYF login'),
    ),
  );
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 * @return array
 */
function ding_wayf_block_view($delta) {
  $block = array();
  if ($delta == 'login') {
    global $user;
// Only show login link for anon. users.
    if ($user->uid == 0) {
      $block['content'] = l(t('Login using WAYF'), 'wayf/login', array('query' => drupal_get_destination()));
    }
  }

  return $block;
}

/**
 * Sets attributes if specified by Ding provider.
 */
function ding_wayf_get_provider_attributes(&$simplesaml) {
  $wayf_attributes = module_invoke_all('ding_wayf_attributes');

  if ($wayf_attributes) {
    $simplesaml['attributes'] = $wayf_attributes;
  }
}

/**
 * Extract required attributes from available WAYF attributes.
 *
 * @param $wayf_attributes
 *   array of WAYF attributes
 * @param $required_attributes
 *   array of required attributes
 * @return
 *   array of attributes which will be empty if not all required attributes is
 *   present.
 */
function ding_wayf_get_required_attributes($wayf_attributes, $required_attributes) {
  $attribute_list = array();

  if (isset($wayf_attributes) && is_array($required_attributes)) {
    foreach ($required_attributes as $attribute => $value) {
      if (!isset($wayf_attributes[$attribute])) {
        return array();
      }

      $attribute_list[$attribute] = $wayf_attributes[$attribute];
    }

    return $attribute_list;
  }
  else {
    return array();
  }
}

