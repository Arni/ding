<?php

/**
 * @file
 *
 * Module file for Ting field search.
 */

/**
 * Implements hook_menu().
 */
function ting_field_search_menu() {
  $items = array();

  // Menu items for administering profiles.
  $items['admin/config/ting/settings/ting-field-search-profiles/create'] = array(
    'title' => 'Create profile',
    'description' => 'Create a new Ting field search profile.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_field_search_profile_form_add'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting_field_search.admin.inc',
  );
  $items['admin/config/ting/settings/ting-field-search-profiles/%ting_field_search_profiles/edit'] = array(
    'title' => 'Edit profile',
    'description' => 'Edit or delete an existing profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_field_search_profile_form_edit', 5),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting_field_search.admin.inc',
  );
  $items['admin/config/ting/settings/ting-field-search-profiles/%ting_field_search_profiles/delete'] = array(
    'title' => 'Delete profile',
    'description' => 'Deletes an existing profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_field_search_profile_form_delete_confirm_form', 5),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting_field_search.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/ting/settings/ting-field-search-profiles/%ting_field_search_profiles/delete/%ting_field_search_facets'] = array(
    'title' => 'Delete facet',
    'description' => 'Deletes a facet setting.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_field_search_profile_form_delete_confirm_form', 5, 7),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting_field_search.admin.inc',
    'type' => MENU_CALLBACK,
  );

  // Give administrators a chance to install a compatible cache backend, if
  // hook_enable() for some reason failed. This is critical for the module to
  // function proberly.
  $items['admin/config/ting-field-search/install'] = array(
    'title' => 'Install backend',
    'description' => 'Install the cache_ting backend proberly',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_field_search_install_confirm_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting_field_search.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_hook_info().
 */
function ting_field_search_hook_info() {
  $hooks['form_ding_facetbrowser_form_alter'] = array(
    'group' => 'facets',
  );
  return $hooks;
}

/**
 * Implements hook_forms().
 */
function ting_field_search_forms() {
  $forms = array();
  $forms['ting_field_search_profile_form_add'] = array(
    'callback' => 'ting_field_search_profile_form',
  );
  $forms['ting_field_search_profile_form_edit'] = array(
    'callback' => 'ting_field_search_profile_form',
  );
  return $forms;
}

/**
 * Implements hook_theme().
 */
function ting_field_search_theme() {
  return array(
    'ting_field_search_profile_form' => array(
      'render element' => 'form',
      'file' => 'ting_field_search.admin.inc',
    ),
  );
}

/**
 * Implements hook_modules_enabled().
 *
 * If the Memcache module is enabled, we'll check if we can upgrade to the much
 * faster MemCache backend. We also rely on this to set the backend when this
 * module is enabled.
 * We could use hook_enable() for this, but we're implementing this hook anyway
 * and this actually also covers the rare case, when this module is installed
 * together with Memcache.
 */
function ting_field_search_modules_enabled($modules) {
  $enable = in_array('ting_field_search', $modules);

  // If the system if using the MemCache backend itself, we'll take that as a
  // sign that the memcached service is in fact running. The fact that the
  // Memcache module is enabled alone, doesn't guarentee that.
  if (module_exists('memcache') && variable_get('cache_default_class') === 'MemCacheDrupal') {
    variable_set('cache_class_cache_ting', 'TingFieldSearchMemCache');

    if ($enable) {
      watchdog('ting_field_search', 'Ting field search was enabled and is using MemCache backend.');
    }
    else {
      watchdog('ting_field_search', 'Memcache was enabled and Ting field search upgraded to using MemCache backend.');
    }
  }
  elseif (!ting_field_search_get_status()) {
    variable_set('cache_class_cache_ting', 'TingFieldSearchDatabaseCache');

    if ($enable) {
      watchdog('ting_field_search', 'Ting field search was enabled and is using Database cache backend.');
    }
  }
}

/**
 * Implements hook_modules_disabled()
 *
 * If Memcache is disabled the class MemCache, which we extend, wont be
 * available anymore, and we need to downgrade to database cache.
 */
function ting_field_search_modules_disabled($modules) {
  if (in_array('memcache', $modules)) {
    variable_set('cache_class_cache_ting', 'TingFieldSearchDatabaseCache');
    watchdog('ting_field_search', 'Memcache was disabled and Ting field search downgraded to using database cache.');
  }
}

/**
 * Implements hook_cron().
 *
 * Check if we can upgrade to MemCache.
 */
function ting_field_search_cron() {
  if (!ting_field_search_get_status()) {
    watchdog('ting_field_search',
      'Ting field search is NOT installed correctly and will not work properly. Please go to <a href="@install">Installation</a> to correct this.',
        array(
          '@install' => url('admin/config/ting-field-search/install', array(
            'query' => array('destination' => 'admin/reports/event/9139'),
        ))
      ),
      WATCHDOG_WARNING
    );
  }

  if (module_exists('memcache') && variable_get('cache_default_class') === 'MemCacheDrupal') {
    variable_set('cache_class_cache_ting', 'TingFieldSearchMemCache');
  }
}

/**
 * Checks to see if the module is installed correctly with one of our special
 * cache backends.
 */
function ting_field_search_get_status() {
  $backend = variable_get('cache_class_cache_ting', FALSE);
  return $backend === 'TingFieldSearchMemCache' || $backend === 'TingFieldSearchDatabaseCache';
}

/**
 * Implements hook_ting_pre_execute().
 */
function ting_field_search_ting_pre_execute($request) {
  if ($profile = ting_field_search_profile_is_active()) {
    $config = $profile->config;
    $search_well_profile = $config['search_request']['search_well_profile'];
    $result_well_profile = $config['search_request']['result_well_profile'];

    // Using get_class() to ensure we target the correct classes.
    switch (get_class($request)) {
      case 'TingClientCollectionRequest':
        // Fall through.
      case 'TingClientObjectRequest':
        // Use an alternative well profile for results if set. Hopefully the
        // administrator knows what they are doing.
        if ($result_well_profile) {
          $request->setProfile($result_well_profile);
        }
        // Otherwise remeber to use the search well profile to ensure results
        // can be shown.
        else if ($search_well_profile) {
          $request->setProfile($search_well_profile);
        }
        break;
      case 'TingClientSearchRequest':
        // Always use the search well profile on search requests if set.
        // Otherwise this profile wants to use the default from ting module.
        if ($search_well_profile) {
          $request->setProfile($search_well_profile);
        }

        // Additional CQL setting.
        if ($cql = $config['search_request']['query']) {
          _ting_field_search_append_cql($request, $cql);
        }

        // Default sort.
        if ($sort = _ting_field_search_detect_sort($profile)) {
          $request->setSort($sort);
        }

        // Default size (results per page).
        if ($size = $config['search_result']['results_per_page']) {
          if (empty($_REQUEST['size'])) {
            // Override the start posision set by Ting search.
            $page = pager_find_page();
            $request->setStart(($size * $page) + 1);
            $request->setNumResults($size);
          }
        }

        // New materials.
        if ($days = $config['search_request']['new_materials']) {
          $expression = _ting_field_search_new_materials_cql($days);
          _ting_field_search_append_cql($request, $expression);
        }

        // Handle facets.
        if ($config['facets']['use_facets']) {
          // Ensure that the profile's facets is returned from the well.
          $profile_facets = ting_field_search_facets_load($profile->pid);
          $request_facets = array_flip($request->getFacets()) + $profile_facets;
          // Need the keys as values for the request object.
          $request_facets = array_keys($request_facets);
          $request->setFacets($request_facets);

          $request->setNumFacets($config['facets']['number_of_facets']);
        }

        break;
    }
  }
}

/**
 * Helper function to append cql to a request.
 */
function _ting_field_search_append_cql($request, $cql) {
  $query = '(' . $request->getQuery() . ') and (' . $cql . ')';
  $request->setQuery($query);
}

/**
 * Helper function user in hook_ting_pre_request(), to determine if the current
 * request sort should be overriden. This has gotten quite complex, and is
 * thereofore moved to seperate helper function.
 * Implements a special modifier which bypasses the broken sort behavior in the
 * Ting search module.
 */
function _ting_field_search_detect_sort($profile) {
  $sort = FALSE;

  if (!empty($_REQUEST['sort'])) {
    $input_sort = $_REQUEST['sort'];

    // Look for the modifier in the sort query parameter.
    $modifier = ':' . $profile->name;
    if (substr($input_sort, -drupal_strlen($modifier)) === $modifier) {
      $sort = explode(':', $input_sort)[0];
    }
  }
  else {
    $sort = $profile->config['search_result']['default_sort'];
  }

  // Empty string is a special case indicating the best_match sort.
  // Regardless of how the sort was determined, use the profile's ranking.
  // This should only be called in the context of an active profile.
  if ($sort === '') {
    $sort = $profile->config['search_result']['ranking'];
  }

  return $sort;
}

/**
 * Helper function to create new materials CQL.
 */
function _ting_field_search_new_materials_cql($days) {
  // Get the current date and year.
  $current_date = new DateTime();
  $current_year = $current_date->format('Y');

  // Get the target date and year.
  $target_date = $current_date->sub(new DateInterval('P' . $days . 'D'));
  $target_year = $target_date->format('Y');
  $expression = 'term.acquisitionDate>=' . $target_date->format('Ymd');

  // Add a 'år=YYYY' condition for every year between target and current
  // to filter out newly acquired, but older published materials.
  $year_conditions = ' and (år=' . $target_year++;
  for (;$target_year <= $current_year; $target_year++) {
    $year_conditions .= ' or år=' . $target_year;
  }
  $year_conditions .= ')';
  $expression .= $year_conditions;
}

/**
 * Detects if a profile is active. Functions that perform modifications based
 * on the active profile, should use this to verify and/or get the profile.
 *
 * @return mixed $result
 *   The active profile object.
 *   FALSE if no profile was active.
 */
function ting_field_search_profile_is_active() {
  // This has the potential to be called many times on a request.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['result'] = &drupal_static(__FUNCTION__);
  }
  $result = &$drupal_static_fast['result'];

  if (!isset($result)) {
    $result = FALSE;

    // If there's a profile parameter present and we're on a supported path;
    // attempt to active the profile requested in the parameter.
    if (!empty($_GET['profile']) && ting_field_search_path_is_supported()) {
      $profile_name = $_GET['profile'];

      // Without the correct cache backend, modifying the ting request can give
      // unexpected behavior. For example, if the profile is used on a cold
      // cache search, the response with the modifications will be locked and
      // the "profil response" will be served on a every subsequent search -
      // with or without that profile parameter.
      // We therefore block any attempt to activate a profile when this is the
      // case. This will in turn disable all profile related activity.
      if (ting_field_search_get_status()) {
        // Now we load the profile since this is the most expensive.
        $profile = ting_field_search_profiles_load($_GET['profile']);

        // If the profile exists, store it in the static variable for fast
        // retrieval later in the request.
        if ($profile = array_shift($profile)) {
          $result = $profile;
        }
      }
    }
  }

  return $result;
}

/**
 * Checks to see if a profile is applicable on the current path.
 */
function ting_field_search_path_is_supported() {
  $result = &drupal_static(__FUNCTION__);

  if (!isset($result)) {
    $result = drupal_match_path(current_path(), implode(PHP_EOL, array(
      'search/ting/*',
      'ting/object/*',
      'ting/collection/*',
    )));
  }

  return $result;
}

/**
 * Adds the profile's query parameters.
 */
function ting_field_search_append_query(&$query, $profile) {
  $query['profile'] = $profile->name;

  $webtrends = $profile->config['webtrends'];
  // Onsite adds tracking.
  if ($webtrends['onsite_ad']) {
    // Default to profile title.
    $ad_id = empty($webtrends['onsite_ad_id']) ? $profile->title : $webtrends['onsite_ad_id'];
    $query['WT.ac'] = $ad_id;
  }
}

/**
 * Stores the current outbund profile parameter.
 *
 * NOTE: This is currently used in our goto_alter implementation, as a fast way
 * to detect if a profile parameter should be appended to the redirect URI.
 *
 * @param string $profile
 *   The name of the profile.
 */
function ting_field_search_set_selected_profile($profile) {
  $static = &drupal_static(__FUNCTION__);
  $static = $profile;
}

/**
 * Get the current outbound profile if any.
 *
 * @return string $profile
 *   The name of the profile.
 */
function ting_field_search_get_selected_profile() {
  return drupal_static('ting_field_search_set_selected_profile', NULL);
}

/**
 * Implements hook_entity_info_alter().
 *
 * By extending the entity_uri callback for ting objects and collections, we
 * can add a profile parameters to search result links to support the setting
 * profile_display.
 * Note: Unfortunately the availability links doesn't use entity_uri(), we
 * therefore implement the preprocess function for the availability links theme
 * to fully support the setting.
 *
 * @see ting_field_search_preprocess_ding_availability_type()
 */
function ting_field_search_entity_info_alter(&$entity_info) {
  $entity_info['ting_object']['uri callback'] = 'ting_field_search_ting_object_uri';
  $entity_info['ting_collection']['uri callback'] = 'ting_field_search_ting_collection_uri';
}

/**
 * Ting object URI callback (wrapper for ting_object_uri()).
 */
function ting_field_search_ting_object_uri($object) {
  return _ting_field_search_alter_entity_uri(ting_object_uri($object));
}

/**
 * Ting collection URI callback (wrapper for ting_object_uri()).
 */
function ting_field_search_ting_collection_uri($collection) {
  return _ting_field_search_alter_entity_uri(ting_collection_uri($collection));
}

/**
 * Private helper function to alter entity uri of ting collectons and objects.
 */
function _ting_field_search_alter_entity_uri($path) {
  if ($profile = ting_field_search_profile_is_active()) {
    ting_field_search_append_query($path['options']['query'], $profile);
  }
  return $path;
}

/**
 * Implements hook_drupal_goto_alter().
 */
function ting_field_search_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  if ($profile = ting_field_search_get_selected_profile()) {
    // The search form is submitted and the user has selected a profile; Add
    // the profile parameter when the submit callback redirects.
    if (preg_match('/^search\/ting/', $path)) {
      // It is unclear at this point whether webtrends parametets should be
      // added here, so just add the profile directly for now.
      $options['query']['profile'] = $profile;
    }
  }

  // NOTE: Unfortunately this is the only work around the hard-coded redirect
  // from ting_collection to ting_object, when there's only one object in the
  // collection.
  // See: ting_collection_page_view()
  if ($profile = ting_field_search_profile_is_active()) {
    if (drupal_match_path(current_path(), 'ting/collection/*') && preg_match('/^ting\/object/', $path)) {
      ting_field_search_append_query($options['query'], $profile);
    }
  }
}

/**
 * Implements hook_url_outbund_alter().
 *
 * Alter outbound links based on active profile settings.
 */
function ting_field_search_url_outbound_alter(&$path, &$options, $original_path) {
  if ($profile = ting_field_search_profile_is_active()) {
    // Alter search links.
    if ($profile->config['user_interaction']['alter_links'] && preg_match('/^search\/ting/', $path)) {
      // Possibly add the Webtrends parameter here too, so use the helper.
      ting_field_search_append_query($options['query'], $profile);
    }
  }
}

/**
 * Implements hook_preprocess_ding_availability_types().
 *
 * Ensure that the availability links gets the profile parameter appended.
 *
 * @see ding_availability_field_formatter_view()
 * @see ting_field_search_entity_info_alter()
 */
function ting_field_search_preprocess_ding_availability_types(&$variables) {
  $profile = ting_field_search_profile_is_active();
  // Nothing to do if a profile isn't active.
  if (!$profile) {
    return;
  }

  $types = &$variables['types'];

  // The pending type uses a render array, so it's straight forward.
  if (isset($types['pending'])) {
    $links = &$types['pending']['#links'];

    foreach ($links as $key => $link) {
      $options = &$links[$key]['link']['#options'];

      // Ensure that we only modify internal links.
      if (!url_is_external($link['link']['#path'])) {
        ting_field_search_append_query($options['query'], $profile);
      }
    }

  }

  // The online type is a bit tricky, since the link is hardcoded.
  if (isset($types['online'])) {
    $links = &$types['online']['#links'];

    foreach ($links as $key => $link) {
      $link = $link['link']['#markup'];

      // If we can extract the path from the hardcoded link, go ahead and
      // replace that path with one with our profile parameter.
      $pattern = '/href="(\/ting\/object\/.+)"/';
      if (preg_match('/href="(\/ting\/object\/.+)"/', $link)) {
        // We'll cheat a bit here and pass an empty array through the helper.
        $query = array();
        ting_field_search_append_query($query, $profile);
        $replace = 'href="$1?profile=' . $profile->name;
        if (isset($query['WT.ac'])) {
          $replace .= '&WT.ac=' . $query['WT.ac'] . '"';
        }
        $replace .= '"';
        $links[$key]['link']['#markup'] = preg_replace($pattern, $replace, $link);
      }
    }

  }
}

/**
 * Implements hook_preprocess_html().
 */
function ting_field_search_preprocess_html(&$variables) {
  if ($profile = ting_field_search_profile_is_active()) {
    // Add the Webtrends WT.ad meta tag. This is the onsite ad view query
    // paranmeter and it works together with the WT.ac click parameter which
    // we add to some of the links.
    if ($profile->config['webtrends']['onsite_ad']) {
      $ad_id = $profile->config['webtrends']['onsite_ad_id'];
      drupal_add_html_head(array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'WT.ad',
          'content' => empty($ad_id) ? check_plain($profile->title) : $ad_id,
        ),
      ), 'ting_field_search_onsite_ad');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ting_field_search_form_ting_admin_ting_settings_alter(&$form, &$form_state) {
  // Show a message to the administrator if the module isn't installed
  // correctly. We provide a callback to correct this.
  if (!ting_field_search_get_status()) {
    drupal_set_message(t('Ting field search is NOT installed correctly and will
      not work proberly. Please go to <a href="@install">Installation</a> to
      correct this.', array(
        '@install' => url('admin/config/ting-field-search/install', array(
          'query' => drupal_get_destination()
        )),
      )
    ), 'error');
  }

  // Change the title of default profile textfield and insert it a new fieldset.
  $standard = $form['ting']['ting_search_profile'];
  $standard['#title'] = t('Standard search profile');
  unset($form['ting']['ting_search_profile']);
  $form['ting']['search_profile'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search profile'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
  );
  $form['ting']['search_profile']['ting_search_profile'] = $standard;

  // Attach the Ting field search settings.
  $form['ting']['search_profile']['ting_field_search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ting field search'),
    // There's a bug that will show icon anyway.
    // See: https://www.drupal.org/node/1361810 for more info (Fixed with CSS).
    '#collapsible' => FALSE,
    '#prefix' => '<div id="ting-field-search-wrapper">',
    '#suffix' => '</div>',
  );

  // A simple table of existing special search profiles.
  // TODO: Add table sort?
  $profiles = ting_field_search_profiles_load();
  $profile_header = t('Search well profile (!link)', array(
    '!link' => l('VIP', 'http://vip.dbc.dk/', array(
      'attributes' => array('target'=>'_blank')
      )),
  ));
  $header = array(
    t('Title'),
    t('Name'),
    $profile_header,
    t('Query'),
    t('Exposed'),
    t('Alter links'),
    t('Weight'),
  );
  $rows = array();
  foreach ($profiles as $profile) {
    $query = check_plain($profile->config['search_request']['query']);
    $path = 'admin/config/ting/settings/ting-field-search-profiles/' . $profile->name .'/edit';
    $rows[] = array(
      l($profile->title, $path),
      $profile->name,
      check_plain($profile->config['search_request']['search_well_profile']),
      empty($query) ? t('- None -') : $query,
      $profile->config['user_interaction']['exposed'] ? t('Yes') : t('No'),
      $profile->config['user_interaction']['alter_links'] ? t('Yes') : t('No'),
      $profile->weight,
    );
  }

  // If the current administrator has persmission, insert a link to profile
  // creation (emulating a local action link).
  $item = menu_get_item('admin/config/ting/settings/ting-field-search-profiles/create');
  if ($item['access']) {
    $form['ting']['search_profile']['ting_field_search']['add'] = array(
      '#prefix' => '<ul class="action-links">',
      '#theme' => 'menu_local_action',
      '#link' => $item,
      '#suffix' => '</ul>',
    );
  }
  $form['ting']['search_profile']['ting_field_search']['profiles'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No profiles found'),
    '#attributes' => array(
      'id' => 'ting-field-search-profiles',
    ),
  );

  // Add some correcting CSS.
  $path = drupal_get_path('module', 'ting_field_search');
  $form['#attached']['css'][] = $path . '/css/ting_field_search.admin.css';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ting_field_search_form_search_block_form_alter(&$form, &$form_state) {
  // Dont't alter the form if the module isn't installed correctly or if this
  // is the node search page.
  if (!ting_field_search_get_status() || strpos(current_path(), 'search/node') === 0) {
    return;
  }

  $profiles = array();
  foreach (ting_field_search_profiles_load() as $name => $profile) {
    // Only exposed profiles will be shown to the user.
    if ($profile->config['user_interaction']['exposed']) {
      $profiles[$name] = t('Search in @profile', array(
       '@profile'  => check_plain($profile->title),
      ));
    }
  }

  // Don't render select if there's no profiles in the system.
  if (empty($profiles)) {
    return;
  }

  // If there's an active profile and it is stick; set it as default value.
  if ($profile = ting_field_search_profile_is_active()) {
    $profile = $profile->config['user_interaction']['sticky'] ? $profile->name : '';
  }
  $form['ting_field_search'] = array(
    '#type' => 'select',
    '#options' => $profiles,
    '#empty_option' => t('Search in standard'),
    '#default_value' => $profile ? $profile : '',
  );

  // Store the name of the name of the profile that was active when rendering
  // the form. This can be usefull information in form submission.
  $form['ting_field_search_profile'] = array(
    '#type' => 'hidden',
    '#default_value' => $profile ? $profile : '',
  );

  // Use a validate handler for its timing before ting_search_submit() which is
  // a submit handler. This makes us independent of a specific module weight.
  $form['#validate'][] = 'ting_field_search_search_block_validate';

  // Note: We don't use the info-file for the following CSS and JS, because it
  // shouldn't be added if there's no exposed profiles. Still using every_page
  // flag though, since when it is added on every page when enabled.

  // Add our base styling of the profile input select.
  $path = drupal_get_path('module', 'ting_field_search');
  $form['#attached']['css'][] = array(
    'data' => $path . '/css/ting_field_search.base.css',
    'every_page' => TRUE,
  );

  // This is a convenient place to add the Webtrends Javascript tracking for
  // now. May have to be moved to a more general place.
  $form['#attached']['js'][] = array(
    'data' => $path . '/js/ting_field_search.webtrends.js',
    'every_page' => TRUE,
  );

}

/**
 * Validate handler for the search block form.
 */
function ting_field_search_search_block_validate($form, &$form_state) {
  $previous_profile = $form_state['values']['ting_field_search_profile'];
  $selected_profile = $form_state['values']['ting_field_search'];

  // Reset the sort if the user is changing profile. This is the most intuitive
  // and fixes several issues when the different profiles is using different
  // default sort settings.
  if ($previous_profile != $selected_profile) {
    $form_state['values']['sort'] = '';
  }

  // Flag that a profile was selected for later in the redirect.
  // See: ting_field_search_goto_alter().
  if ($selected_profile) {
    ting_field_search_set_selected_profile($selected_profile);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Insert the default sort for the active profile on the sort form.
 */
function ting_field_search_form_ting_search_sort_form_alter(&$form, &$form_state) {
  if ($profile = ting_field_search_profile_is_active()) {
    $ting_search_default_sort = variable_get('ting_search_default_sort', '');
    $profile_default_sort = $profile->config['search_result']['default_sort'];

    $options = &$form['sort']['#options'];

    // If the profile is using any other default sort than 'best_match', we
    // need to bypass ting_search with our modifier.
    // See: _ting_field_search_detect_sort().
    if (!empty($profile_default_sort)) {
      $options[':'. $profile->name] = $options[''];
      unset($options['']);
    }

    // If this profile has another default sort setting than ting_search we
    // also need to bypass ting_search with the modifier. No need to do
    // anything if ting_searh is using best_match, because we just added a fix
    // for that above.
    if ($ting_search_default_sort !== $profile_default_sort && !empty($ting_search_default_sort)) {
      $bypass_key = $ting_search_default_sort . ':' . $profile->name;
      $options[$bypass_key] = $options[$ting_search_default_sort];
      unset($options[$ting_search_default_sort]);
    }

    if (empty($_GET['sort'])) {
      $form['sort']['#default_value'] = $profile->config['search_result']['default_sort'];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the results per page dropdown based on the active profile.
 * There's also an alternative list based per page selection and this hook will
 * not modify that since it uses 'item_list' theme and not a form. Consider
 * supporting that as well.
 */
function ting_field_search_form_ting_search_per_page_form_alter(&$form, &$form_state) {
  if ($profile = ting_field_search_profile_is_active()) {
    $def_size = $profile->config['search_result']['results_per_page'];
    if (!empty($form['size']['#options']) && $def_size) {
      $sizes = &$form['size']['#options'];

      // Base the sizes options on the active profile's setting instead.
      $sizes = array();
      $sizes[$def_size] = t('Number of search result per page: !num', array('!num' => $def_size));
      // Increment the base size by 2.5 and 5 like Ting search.
      $size = round($def_size * 2.5);
      $sizes[$size] = t('Number of search result per page: !num', array('!num' => $size));
      $size = round($def_size * 5);
      $sizes[$size] = t('Number of search result per page: !num', array('!num' => $size));

      $def_value = $def_size;
      // If there's input and it's a supported value; set as default.
      if (!empty($_GET['size']) && isset($sizes[$_GET['size']])) {
        $def_value = $_GET['size'];
      }
      $form['size']['#default_value'] = $def_value;
    }
  }
}

/**
 * Loads a single profile or all profiles from the database.
 *
 * @param string $name (optional)
 *   Load a single profile by machine-name.
 *
 * @return array $profiles
 *   An array of profile objects keyed by profile machine name.
 */
function ting_field_search_profiles_load($name = NULL) {
  $query = db_select('ting_field_search_profile', 'tp')
    ->fields('tp');

  if (isset($name)) {
    $query->condition('tp.name', $name);
  }
  // If all profiles was requested, order by weight.
  else {
    $query->orderBy('weight');
  }

  $results = $query->execute();

  $profiles = array();
  foreach ($results as $profile) {
    // Prepare the config data.
    $profile->config = unserialize($profile->config);

    // Apply defaults for any missing config values.
    foreach (ting_field_search_config_default() as $key => $config_defaults) {
      $config = isset($profile->config[$key]) ? $profile->config[$key] : array();
      $profile->config[$key] = array_merge($config_defaults, $config);
    }

    $profiles[$profile->name] = $profile;
  }

  return $profiles;
}

/**
 * Saves a profile in the database.
 *
 * @param mixed $profile
 *   An array representing a new or existing profile.
 *   If 'facets' is set all associated facet settings is updated too.
 *
 * @return mixed $result
 *   FALSE, if something went wrong.
 *   1 or 2 if an insert or update was performed.
 */
function ting_field_search_profile_save(array $profile) {
  $transaction = db_transaction();

  try {
    // If facets is passed; handle them first.
    // NOTE: isset($profile['pid']) should be replaces by a solution that saves
    // the profile first and loads the newly generated id afterwards. The
    // current solution prevents the creation of facets when creating a new
    // profile.
    if (isset($profile['facets']) && isset($profile['pid'])) {
      // Ensure that only the facets passed with the profile remains.
      ting_field_search_facets_delete($profile['pid']);

      $query = db_insert('ting_field_search_facet')
        ->fields(array(
          'name',
          'pid',
          'title',
          'sorting',
          'weight',
        ));

      foreach ($profile['facets'] as $key => $facet) {
        // Ensure an array is passed to query.
        $facet = is_object($facet) ? (array) $facet : $facet;
        // Link facet to profile.
        $facet['pid'] = $profile['pid'];
        $query->values($facet);
      }

      $query->execute();

      // Remove it so it doesn't screw up the merge query.
      unset($profile['facets']);
    }

    // Tell drupal_write_record whether this is a new record or an existing.
    $pid = empty($profile['pid']) ? array() : 'pid';

    // drupal_write_record uses shcema API to determine if a field should be
    // serialized, so we need not bother with serializing the config array.
    return drupal_write_record('ting_field_search_profile', $profile, $pid);
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('ting_field_search', $e);
    return FALSE;
  }
}

/**
 * Creates a new profile object with defaults.
 *
 * @return object $profile
 *   The profile object.
 */
function ting_field_search_profile_create() {
  $profile = new stdClass();

  $profile->pid = '';
  $profile->name = '';
  $profile->title = '';
  $profile->weight = 0;
  $profile->config = ting_field_search_config_default();

  return $profile;
}

/**
 * Deletes a profile.
 *
 * @param string $name
 *   The macinhe-name of the profile to delete.
 */
function ting_field_search_profile_delete($name) {
  $transaction = db_transaction();

  try {
    // Ensure that associated facet settings is deleted too.
    ting_field_search_facets_delete($name);

    return db_delete('ting_field_search_profile')
      ->condition('name', $name)
      ->execute();
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('ting_field_search', $e);
    return FALSE;
  }
}

/**
 * Delete facet settings associated with a profile.
 */
function ting_field_search_facets_delete($pid, $facet = NULL) {
  try {
    $query = db_delete('ting_field_search_facet')
      ->condition('pid', $pid);

    if (isset($facet)) {
      $query->condition('name', $facet);
    }

    return $query->execute();
  }
  catch (Exception $e) {
    watchdog_exception('ting_field_search', $e);
    return FALSE;
  }
}

/**
 * Loads all facets accociated with the specified profile.
 */
function ting_field_search_facets_load($pid) {
  return db_select('ting_field_search_facet', 'tf')
    ->fields('tf')
    ->condition('pid', $pid)
    ->orderBy('weight')
    ->execute()->fetchAllAssoc('name');
}

/**
 * Defines the defaults for profile config array. The defaults are based on the
 * default settings from the Ting search related modules.
 */
function ting_field_search_config_default() {
  return array(
    'user_interaction' => array(
      'exposed' => 1,
      'sticky' => 1,
      'alter_links' => 1,
    ),
    'search_request' => array(
      'search_well_profile' => '',
      'result_well_profile' => '',
      'query' => '',
      'new_materials' => '',
    ),
    'search_result' => array(
      'results_per_page' => 10,
      'default_sort' => '',
      'ranking' => 'rank_frequency',
    ),
    'facets' => array(
      'use_facets' => 0,
      'number_of_facets' => 25,
      'facet_count' => 5,
      'term_count' => 5,
    ),
    'webtrends' => array(
      'onsite_ad' => 0,
      'onsite_ad_id' => '',
    ),
  );
}

function ting_field_search_ting_search_settings() {
  variable_get('ting_search_results_per_page', 10);
  variable_get('ting_search_default_sort', ''); // ting_search.admin.inc
  variable_get('ting_sort_default', 'rank_frequency'); // ting.admin.inc
  variable_get('ting_search_number_of_facets', 25);
}
