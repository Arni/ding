<?php

/**
 * @file
 *
 * Module file for Ting field search.
 */

/**
 * Implements hook_ting_pre_execute().
 *
 * This is where the magic happens. We alter the request based on the special
 * profile used (if any), before it's send to the datawell.
 */
function ting_field_search_ting_pre_execute($request) {
  if ($profile = _ting_field_search_use_special_profile()) {
    // Ensure that this is a Ting client, object or search request since a
    // profile is only used in these classes.
    if ($request instanceof TingClientSearchRequest || $request instanceof TingClientObjectRequest) {
      $request->setProfile($profile);
      return array('profile' => $profile);
    }
  }
}

/**
 * Implements hook_menu().
 */
function ting_field_search_menu() {
  $items = array();

  $items['admin/config/ting/settings/ting-field-search-profiles/create'] = array(
    'title' => 'Create profile',
    'description' => 'Create a new Ting field search profile.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_field_search_profile_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting_field_search.admin.inc',
  );

  return $items;
}

/**
 * Internal helper function to determine if a special profile should be used.
 * This is used in hook_ting_pre_execute implementation when inserting the
 * profile in the request and in the cache backends when generating CID's.
 *
 * For now the module uses a profile if an installed profile is detected in the
 * URI and if one of following pages is being viewed:
 *   1. The search page
 *   2. Ting collection page
 *   3. Ting object page
 *
 * @return mixed $result
 *   The name of the profile if it's profile search.
 *   FALSE otherwise.
 *
 * @see _ting_field_search_detect_profile().
 */
function _ting_field_search_use_special_profile() {
  // Use a static cache. This will be called often on a search request.
  $result = &drupal_static(__FUNCTION__);

  if (!isset($result)) {
    $result = FALSE;
    if ($profile = _ting_field_search_detect_profile()) {
      // Search page
      if (arg(0) == 'search' && arg(1) == 'ting' && count(arg()) > 2) {
        $result = $profile;
      }
      // Ting collection or object
      else if (arg(0) == 'ting' && (arg(1) == 'object' || arg(1) == 'collection')) {
        $result = $profile;
      }
    }
  }

  return $result;
}

/**
 * Internal helper function to detect search profiles in the URI.
 *
 * @return mixed
 *   The name of the profile if present.
 *   FALSE otherwise.
 */
function _ting_field_search_detect_profile() {
  // Use the advanced drupal_static() pattern. This will be called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['profile'] = &drupal_static(__FUNCTION__);
  }
  $profile = &$drupal_static_fast['profile'];

  if (!isset($profile)) {
    $parameters = drupal_get_query_parameters();
    $profile = isset($parameters['profile']) ? $parameters['profile'] : FALSE;

    // In most cases our profile parameter wont be present. To keep a minimum
    // footprint, we only load the profiles to verify it exists in the system,
    // in the case that a profile was found the URI.
    if ($profile) {
      $system_profiles = ting_field_search_profiles_load();
      if (!array_key_exists($profile, $system_profiles)) {
        $profile = FALSE;
      }
    }
  }

  return $profile;
}

/**
 * Implements hook_entity_info_alter().
 */
function ting_field_search_entity_info_alter(&$entity_info) {
  $entity_info['ting_object']['uri callback'] = 'ting_field_search_ting_object_uri';
  $entity_info['ting_collection']['uri callback'] = 'ting_field_search_ting_collection_uri';
}

/**
 * Ting object URI callback (wrapper for ting_object_uri()).
 */
function ting_field_search_ting_object_uri($object) {
  return _ting_field_search_alter_entity_uri(ting_object_uri($object));
}

/**
 * Ting collection URI callback (wrapper for ting_object_uri()).
 */
function ting_field_search_ting_collection_uri($collection) {
  return _ting_field_search_alter_entity_uri(ting_collection_uri($collection));
}

/**
 * Private helper function to alter entity uri of ting collectons and objects.
 */
function _ting_field_search_alter_entity_uri($path) {
  if ($profile = _ting_field_search_use_special_profile()) {
    $path['options']['query'] = array('profile' => $profile);
  }
  return $path;
}

/**
 * Implements hook_drupal_goto_alter().
 *
 * Add the current search profile to the redicrect URI when redirecting from
 * a Ting collection to a Ting object. Ting does this when a collection only
 * contains one object - and, since it's not using entity_uri(), our wrappers
 * doesn't work in this case.
 *
 * Note: Implementing this hook is not very effective and should be removed if
 * ting get updated to use entity_uri().
 */
function ting_field_search_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  if ($profile = _ting_field_search_detect_profile()) {
    if (arg(0) == 'ting' && arg(1) == 'collection' && preg_match('/^ting\/object/', $path)) {
      $options['query']['profile'] = $profile;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ting_field_search_form_ting_admin_ting_settings_alter(&$form, &$form_state) {
  // Change the title of default profile textfield and insert it a new fieldset.
  $standard = $form['ting']['ting_search_profile'];
  $standard['#title'] = t('Standard search profile');
  unset($form['ting']['ting_search_profile']);
  $form['ting']['search_profile'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search profile'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
  );
  $form['ting']['search_profile']['ting_search_profile'] = $standard;

  // Add special search profile configuration.
  $form['ting']['search_profile']['ting_field_search'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Special search profiles'),
    // There's a bug that will show icon anyway.
    // See: https://www.drupal.org/node/1361810 for more info (Fixed with CSS).
    '#collapsible' => FALSE,
    // Wrapper for AJAX replacment
    '#prefix' => '<div id="ting-field-search-wrapper">',
    '#suffix' => '</div>',
  );

  // A simple table of existing special search profiles.
  // TODO: Add table sort?
  $profiles = ting_field_search_profiles_load();
  $header = array('Title', 'Name', 'Profile', 'Query');
  $rows = array();
  foreach ($profiles as $profile) {
    $rows[] = array(
      $profile->title,
      $profile->name,
      $profile->profile,
      empty($profile->query) ? t('None') : $profile->query,
    );
  }

  // If the current administrator has persmission, insert a link to profile
  // creation (emulating a local action link).
  $item = menu_get_item('admin/config/ting/settings/ting-field-search-profiles/create');
  if ($item['access']) {
    $form['ting']['search_profile']['ting_field_search']['add'] = array(
      '#prefix' => '<ul class="action-links">',
      '#theme' => 'menu_local_action',
      '#link' => $item,
      '#suffix' => '</ul>',
    );
  }
  $form['ting']['search_profile']['ting_field_search']['profiles'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array(
      'id' => 'ting-field-search-profiles',
    ),
  );

  // Add some correcting CSS.
  $path = drupal_get_path('module', 'ting_field_search');
  $form['#attached']['css'][] = $path . '/css/ting_field_search.admin.css';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ting_field_search_form_search_block_form_alter(&$form, &$form_state) {
  $profiles = array();
  foreach (ting_field_search_profiles_load() as $name => $profile) {
    $profiles[$name] = $profile->title;
  }

  // This need to work on every page, so we just detect the profile.
  $profile = _ting_field_search_detect_profile();
  $form['ting_field_search'] = array(
    '#type' => 'select',
    '#options' => $profiles,
    '#empty_option' => t('Standard'),
    '#default_value' => $profile ? $profile : '',
  );

  // Use a validate handler for its timing before ting_search_submit().
  $form['#validate'][] = 'ting_field_search_search_block_validate';
}

function ting_field_search_search_block_validate($form, &$form_state) {
  if (!empty($form_state['values']['ting_field_search'])) {
    ting_field_search_use_profile($form_state['values']['ting_field_search']);
  }
}

/**
 * Submit handler for the add profile button.
 */
function ting_field_search_profile_add_submit($form, &$form_state) {
  // Add another profile
  $form_state['ting_field_search_profile_count']++;

  $form_state['rebuild'] = TRUE;
}

/**
 * Ajax callback for the add profile button.
 */
function ting_field_search_profile_add_callback($form, &$form_state) {
  // Return the form element to insert.
  return $form['ting']['search_profile']['ting_field_search'];
}

/**
 * Implements hook_element_info().
 */
function ting_field_search_element_info() {
  return array(
    'ting_field_search_profile' => array(
      '#input' => TRUE,
      // Ensure a hierarchical structure in form_state['values'], since this
      // elements has child elements.
      '#tree' => TRUE,
      '#process' => array('ting_field_search_profile_element_process'),
      '#element_validate' => array('ting_field_search_element_validate'),
      '#autocomplete_path' => FALSE,
      '#theme_wrappers' => array('form_element'),
      '#title_display' => 'invisible',
      // Some custom properties.
      '#show_description' => FALSE,
      '#add_remove' => FALSE,
    ),
  );
}

/**
 * Process callback for our custom profile element.
 *
 * The element consists of several child form elements which are provided here.
 */
function ting_field_search_profile_element_process($element, $form_state) {
  $title_display = $element['#title_display'];
  $show_description = $element['#show_description'];
  $add_remove = $element['#add_remove'];

  // Define our compound elements using core FAPI declarations.
  $element['profile'] = array(
    '#type' => 'textfield',
    '#title' => t('Search profile'),
    '#title_display' => $title_display,
    '#required' => $element['#required'],
    '#size' => 30,
    '#default_value' => isset($element['#value']['profile']) ? $element['#value']['profile'] : '',
  );
  if ($show_description) {
    $element['profile']['#description'] = t('Name of the profile (http://vip.dbc.dk/)');
  }

  $element['page'] = array(
    '#type' => 'select',
    '#title' => t('Search page'),
    '#title_display' => $title_display,
    '#options' => array(
      'example_page_1' => t('Example page 1'),
      'example_page_2' => t('Example page 2'),
      'example_page_3' => t('Example page 3'),
    ),
    '#empty_option' => t('- None -'),
    '#empty_value' => 'none',
    '#default_value' => isset($element['#value']['page']) ? $element['#value']['page'] : '',
  );
  if ($show_description) {
    $element['page']['#description'] = t('Associate a search page');
  }

  $element['query'] = array(
    '#type' => 'textfield',
    '#title' => t('Search query'),
    '#title_display' => $title_display,
    '#size' => 30,
    '#default_value' => isset($element['#value']['query']) ? $element['#value']['query'] : '',
  );
  if ($show_description) {
    $element['query']['#description'] = t('Search code appended query when using this profile');
  }

  $path = drupal_get_path('module', 'ting_field_search');

  if ($add_remove) {
    // Remove marker
    $element['removed'] = array(
      '#type' => 'hidden',
      '#default_value'  => 0,
      '#attributes' => array('class' => array('removed')),
    );
    // Remove button
    $element['remove'] = array(
      '#type' => 'button',
      '#value' => t('Remove'),
      '#attributes' => array('class' => array('remove')),
    );
    // Include JS to handle remove button.
    $element['#attached']['js'][] = $path . '/js/ting_field_search.element.js';
  }

  // Include CSS needed for our element to display proberly.
  $element['#attached']['css'][] = $path . '/css/ting_field_search.element.css';

  return $element;
}

/**
 * Validation callback for our custom profile element.
 */
function ting_field_search_element_validate($element, &$form_state) {
  $value = $element['#value'];
  if (empty($value['profile']) && ($value['page'] != 'none' || !empty($value['query'])) && !$value['removed']) {
    form_error($element['profile'], t('Name of profile is required'));
  }
  return $element;
}
