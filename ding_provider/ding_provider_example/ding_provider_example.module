<?php
// $Id$

// General functions.

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function ding_provider_example_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ding_provider') {
    return "plugins/$plugin";
  }
}

/**
 * Implementation of hook_theme().
 */
/*
 TODO: need a theme function?
function ding_provider_example_theme($existing, $type, $theme, $path) {
  return array(
    'ding_library_user_personal_info' => array(
      'arguments' => array(
        'account' => NULL,
        'alma_data' => NULL,
      ),
      'template' => 'ding_library_user_personal_info',
    ),
  );
}
*/

/**
 * Implementation of hook_form_alter().
 *
 * Alter the login form to disable the standard Drupal username/password
 * combination and provide our own fields instead.
 */
function ding_provider_example_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      // Add our own validation handler, before the default Drupal login
      // validator.
      array_splice($form['#validate'], array_search('user_login_authenticate_validate', $form['#validate']), 0, 'ding_provider_example_login_validate');
      break;
    case 'user_profile_form':
      // When we have credentials available, make library patron
      // information available for altering.
      //  TODO: Demonstrate extra profile data.
      // if (isset($form['ding_library_user_info'])) {
      //   $form['account']['alma_user_phone'] = array(
      //     '#type' => 'textfield',
      //     '#title' => t('Phone number'),
      //     '#description' => t('Phone number where the library can contact you. Is not published on the web site.'),
      //     '#default_value' => $form['ding_library_user_info']['#value']['phones'][0]['phone'],
      //   );

      //   // Add our own validation and submit handling.
      //   array_unshift($form['#validate'], 'alma_user_profile_validate');
      //   $form['#submit'][] = 'alma_user_profile_submit';

      // }
       break;
       // TODO: needed?
    // case 'ding_library_user_authenticate_form':
    // 	$form['#validate'][] = 'ding_library_user_authenticate_form_validate';
    // 	break;
  }
}

/**
 * Get credentials for user.
 */
function _ding_provider_example_get_credentials($account) {
  // See if we have credentials for the given user in the session.
  if ($_SESSION['ding_provider_example_creds'][$account->uid]) {
    return $_SESSION['ding_provider_example_creds'][$account->uid];
  }
  return DING_PROVIDER_AUTH_REQUIRED;
}

// User related functions.

/**
 * Implementation of hook_user().
 */
function ding_provider_example_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'login':
      if ($account->ding_provider_example_creds) {
        $_SESSION['ding_provider_example_creds'][$account->uid] = $account->ding_provider_example_creds;
        unset($account->ding_provider_example_creds);
      }
      break;
    case 'load':
      // Possibly add more properties to the user object.
      break;
      /*
       * There's no 'logout' case that delete credentials here, as
       * user_logout calls session_destroy, which deletes the session
       * and its data. The session is already gone by the time
       * hook_user('logout') is called.
       */
  }
}

/**
 * Implementation of hook_init().
 */
function ding_provider_example_init() {
  global $user;
  $edit = array();

  // Fire our own hook_user to have the extra data available on the
  // global $user object.
  if ($user->uid > 1) {
    ding_provider_example_user('load', $edit, $user);
  }
}

/**
 * Implementation of hook_cron().
 *
 * Delete credentials after a while.
 */
function ding_provider_example_cron() {
  $expire_time = $_SERVER['REQUEST_TIME'] - variable_get('ding_provider_example_credential_cache_duration', 1800);
  $res = db_query("SELECT sid, session, timestamp FROM {session} WHERE timestamp < %d", $expire_time);
  // As the only PHP functions that reads and writes the
  // almost-but-not-quite-serialized-data format of sessions does it to/from
  // the current session, we're using our own session as a scratchpad.
  $old_session = $_SESSION;
  while ($row = db_fetch_object($res)) {
    $_SESSION = array();
    session_decode($ros->session);
    if (isset($_SESSION['ding_provider_example_creds'])) {
      unset($_SESSION['ding_provider_example_creds']);
      $new_session = session_encode();
      db_query("UPDATE {session} SET session = '%s' WHERE sid = %d AND timestamp = %d", $new_session, $row->sid, $row->timestamp);
    }
  }
  $_SESSION = $old_session;
}


/**
 * Validation for the login form.
 */
function ding_provider_example_login_validate($form, &$form_state) {
  // If it looks like a CPR number, try logging in.
  if (preg_match('/^dpe_.*$/', $form_state['values']['name'])) {
    ding_provider_example_authenticate($form_state['values']);
  }
}

/**
 * Try to authenticate the user.
 */
function ding_provider_example_authenticate(&$form_values) {
  // ding_provider_example_login_validate has already ensured that the
  // username is one we pretend to be provider for.
  if (!preg_match('/' . preg_quote($form_values['pass']) . '$/', $form_values['name'])) {
    // Not found.
    return;
  }
  // Now we know we have a valid user from the external system. Now tell
  // Drupal about it.

  $auth_name = md5(drupal_get_private_key() . $form_values['name']) . '@ding_provider_example';
  user_external_login_register($auth_name, 'ding_provider_example');

  global $user;
  // Save credentials for later use. This is the recommended way to deal with
  // caching credentials. See ding_provider_example_user and
  // ding_provider_example_cron for more information.
  $user->ding_provider_example_creds = array(
    'user_id' => $form_values['name'],
    'password' => $form_values['pass'],
  );

  // Set display_name. If the external username is sensitive data, we need to
  // set a display_name. But we're not that picky.
  $user->display_name = 'Fake user ' . $form_values['name'];

  // Finalize login.
  user_authenticate_finalize($form_values);
}

// Loan related functions.


// Reservation related functions.

function ding_provider_example_form_ding_reservation_list_form_alter(&$form, $form_state) {
  $form['options']['new_expiry'] = array(
    '#type' => 'date_popup',
    '#title' => t('Valid to'),
    '#date_format' => DATE_FORMAT_DATE,
    '#date_year_range' => '-0:+2',
  );

  $form['options']['new_pickup_branch'] = array(
    '#type' => 'select',
    '#title' => t('New pickup branch'),
    '#options' => array(
      1 => 'Somewhere',
      2 => 'Somewhere else',
    ),
  );

  $form['buttons']['update'] = array(
    '#type' => 'submit',
    '#value' => t('Save changes for selected reservations'),
    '#attributes' => array('class' => 'update-button'),
    '#validate' => array('ding_provider_example_ding_reservation_list_form_validate'),
    '#submit' => array('ding_provider_example_ding_reservation_list_form_update'),
  );

  $form['buttons']['remove'] = array(
    '#type' => 'submit',
    '#value' => t('Delete selected reservations'),
    '#attributes' => array('class' => 'cancel-button'),
    '#submit' => array('ding_provider_example_ding_reservation_list_form_remove'),
  );

}

function ding_provider_example_ding_reservation_list_form_validate($form, $form_state) {
  $reservations = $form_state['values']['reservations'];
  foreach (array_filter($form_state['values']['selected']) as $id) {
    // Detect fetable reservations...
    if (($reservations[$id]['status'] == 'fetchable')) {
      if (!empty($form_state['values']['new_expiry'])) {
        form_error($form['selected'][$id], t('You can not change expiry on reservations which are ready for pick up'));
      }
    }
    // Something like it to check that pickup_branch is not changed either.
  }

  if (!empty($form_state['values']['new_expiry'])) {
    list($year, $month, $day) = explode('-', trim($form_state['values']['new_expiry']));
    if (!checkdate($month, $day, $year)) {
      form_error($form['options']['new_expiry'], t('Invalid date'));
    }

    $timestamp = strtotime($form_state['values']['new_expiry']);

    if ($timestamp <= $_SERVER['REQUEST_TIME']) {
      form_error($form['options']['new_expiry'], t('Date must be later than today.'));
    }
    else {
      form_set_value($form['options']['new_expiry'], format_date($timestamp, 'custom', 'Y-m-d'), $form_state);
    }
  }
}

/**
 * Submit function.
 *
 * Updates selected reservations.
 */
function ding_provider_example_ding_reservation_list_form_update($form, $form_state) {
  $reservations_ids = array_filter($form_state['values']['selected']);
  // Here you would do something like:
  //ding_provider_example_reservation_update($reservations_ids, $form_state['values']['options']);
  dpm($reservations_ids);
}

// Cart reservation support.

/**
 * Implements hook_form_alter
 */
function ding_provider_example_form_ding_cart_list_form_alter(&$form, &$form_state) {

  $interest_period = (isset($account->interest_period) && $account->interest_period > 10) ? $account->interest_period : DING_LIBRARY_USER_DEFAULT_INTEREST_PERIOD;

  $form['options']['expiry'] = array(
    '#type' => 'date_popup',
    '#title' => t('Not interested after'),
    '#date_format' => DATE_FORMAT_DATE,
    '#date_year_range' => '-0:+2',
    '#default_value' => date('Y-m-d', $_SERVER['REQUEST_TIME'] + $interest_period * 86400),
  );

  $form['options']['pickup_branch'] = array(
    '#type' => 'select',
    '#title' => t('Pickup branch'),
    '#options' => array(
      1 => 'Somewhere',
      2 => 'Somewhere else',
    ),
  );

  $form['reserve'] = array(
    '#type' => 'submit',
    '#value' => t('Reserve selected'),
    '#attributes' => array('class' => 'reserve-button'),
    '#op' => 'reserve',
    '#submit' => array('ding_provider_example_ding_cart_list_form_submit'),
  );
}

/**
 * Custom submit handler
 */
function ding_provider_example_ding_cart_list_form_submit($form, &$form_state) {
  foreach ($form_state['values']['selected'] as $local_id) {
    $reservation = ding_provider_invoke('reservation', 'create', $form_state['values']['account'], $local_id, array('valid_to' => $form_state['values']['expiry'], 'pickup_branch' => $form_state['values']['pickup_branch']));

    // If reservation was successful, remove the item from the cart.
    if ($reservation and $reservation != DING_PROVIDER_AUTH_REQUIRED) {
      db_query("DELETE FROM {ding_cart} WHERE uid = %d AND local_id = '%s';", $form_state['values']['account']->uid, $local_id);
    }
    else {
      drupal_set_message(t('Reservation of “@title” failed. It may be on your reservation list already.', array('@title' => $form['cart']['#value'][$local_id]['title'])), 'error');
    }
  }
}
