// =============================================================================
// Mixins
// =============================================================================
//


// -----------------------------------------------------------------------------
// Mixins for media queries and breakpoints
// -----------------------------------------------------------------------------
//
@mixin respond-to($media) {
	// Sizes
	@if $media == small {
		@media only screen and (max-width: $breakpoint-small) { @content; }
	}

	@else if $media == small-medium {
		@media only screen and (max-width: $breakpoint-medium) { @content; }
	}

  @if $media == small-medium-low {
    @media only screen and (max-height: $breakpoint-low) and (max-width: $breakpoint-medium) { @content; }
  }

	@else if $media == medium {
		@media only screen and (min-width: $breakpoint-small + 1) and (max-width: $breakpoint-medium) { @content; }
	}

	@else if $media == medium-large {
		@media only screen and (min-width: $breakpoint-small + 1) and (max-width: $breakpoint-large) { @content; }
	}

	@else if $media == large {
		@media only screen and (min-width: $breakpoint-medium + 1) and (max-width: $breakpoint-large) { @content; }
	}

	@else if $media == x-large {
		@media only screen and (min-width: $breakpoint-x-large + 1) { @content; }
	}

  @else if $media == large-x-large {
    @media only screen and (min-width: $breakpoint-medium + 1) { @content; }
  }
}


@mixin small {
  @include respond-to(small) { @content; }
}

@mixin small-medium {
  @include respond-to(small-medium) { @content; }
}

@mixin small-medium-low {
  @include respond-to(small-medium-low) { @content; }
}

@mixin medium {
  @include respond-to(medium) { @content; }
}

@mixin medium-large {
  @include respond-to(medium-large) { @content; }
}

@mixin large {
  @include respond-to(large) { @content; }
}

@mixin x-large {
  @include respond-to(x-large) { @content; }
}

@mixin large-x-large {
  @include respond-to(large-x-large) { @content; }
}


// -----------------------------------------------------------------------------
// Availability
// -----------------------------------------------------------------------------
//
@mixin availability($bg-color) {
  background-color: $bg-color;
  color: #fff;
  padding-top: 5px;
  padding-right: 10px;
  padding-bottom: 5px;
  padding-left: 10px;

  a {
    color: #fff;
    display: block;

    &:hover {
      text-decoration: none;
    }
  }
}


// -----------------------------------------------------------------------------
// Typography
// -----------------------------------------------------------------------------
//
@mixin font-bold() {
  font-family: $font-bold;
  font-weight: $base-font-weight-bold;
}

@mixin font-italic() {
  font-family: $font-light-italic;
  font-weight: $base-font-weight-normal;
}


// -----------------------------------------------------------------------------
// Pseudo arrow
// -----------------------------------------------------------------------------
// Usage example: pseudo-arrow(10px, #000, top, center, $offset: 20px)
@mixin pseudo-arrow($size, $color, $direction, $alignment, $offset: 20px) {

  border: $size solid transparent;
  content: "";
  height: 0;
  position: absolute;
  width: 0;

  // Place the arrow based on $direction
  #{$direction}: -$size * 2;

  // Set the border-color based on $direction
  border-#{opposite-position($direction)}-color: $color;

  // Place the arrow based on alignment (center/middle or $offset)
  @if ($alignment == "center") {

    margin-left: -$size;
    left: 50%;

  } @else if $alignment == "middle" {

    margin-top: -$size;
    top: 50%;

  } @else {

    #{$alignment}: $offset;

  }
}


// -----------------------------------------------------------------------------
// Mixin that converts pixel values to rem values
// -----------------------------------------------------------------------------
//
// https://github.com/ry5n/rem
//
// Returns two lines of code â€” one of the regular pixel values (for older
// browsers), and another with the converted rem values (for everything else).
//
// Basic usage: @include rem('padding',10px 0 2px 5px);
//              @include rem('font-size',10px);
//
@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $base-font-size / 1rem;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value);
      }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}
