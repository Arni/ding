<?php

/**
 * Implements hook_block_info()
 */
function ding_facetbrowser_block_info() {
  $blocks['facetbrowser'] = array(
    'info'  => t('Facet browser'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_theme()
 */
function ding_facetbrowser_theme() {
  return array(
   'facetbrowser' => array(
      'variables' => array('facets' => NULL),
    ),
  );
}
function ding_facetbrowser_form($form, &$form_state, $facets = FALSE) {
  $checkboxes = array();
  if (count($facets) > 1 == TRUE) {
    foreach ($facets as $facet) {
      if (count($facet) == TRUE)
        $form[$facet->name] = array(
          '#type'        => 'fieldset',
          '#title'       => $facet->name,
          '#collapsible' => TRUE,
        );
      if ($facet instanceof TingClientFacetResult && count($facet->terms) == TRUE) {
        foreach ($facet->terms as $term_name => $term_count) {
          $checkboxes[$term_name] = $term_name . ' (' . $term_count . ')';
        }
        $form[$facet->name][$facet->name] = array(
          '#type'    => 'checkboxes',
          '#options' => $checkboxes,
        );
      }
      unset($checkboxes);
    }
    $form['submit'] = array(
      '#type'  => 'submit',
      '#value' => 'Submit',
    );
  }
  return $form;
}

/**
 * facetbrowser theme function
 */
function theme_facetbrowser($all_facets = FALSE) {
  $output   = ' ';
  $elements = array();

  if (is_array($all_facets)) {
        $elements[] = drupal_render(drupal_get_form('ding_facetbrowser_form', $all_facets));
  }
  return implode('', $elements);
}


/**
 * Implements hook_block_view()
 *
 * @return Array
 */
function ding_facetbrowser_block_view($delta = FALSE) {
  $block = array();
  $block_content = FALSE;
  drupal_add_js(drupal_get_path('module', 'ding_facetbrowser') . '/js/jquery-bbq/jquery.ba-bbq.js');
  drupal_add_js(drupal_get_path('module', 'ding_facetbrowser') . '/js/facetbrowser.js');
  drupal_add_css(drupal_get_path('module', 'ding_facetbrowser') . '/css/facetbrowser.css');

  # TODO: Fix so only the correct module is invoked
  foreach (module_implements('ding_facetbrowser') as $module) {
    $result = module_invoke($module, 'ding_facetbrowser');
    if (count($result->facets) == TRUE || $result->show_empty == TRUE) {
      $block_content = theme('facetbrowser', $result->facets);
      break;
    }
  }

  switch ($delta) {
    case 'facetbrowser':
      $block['subject'] = t('Facet browser');
      $block['content'] = $block_content;
    break;
  }

  return $block;
}


/**
 * Implements hook_ding_facetbrowser() from the apachesolr_search module
 * to prevent from hacking in contrib module.
 */
function apachesolr_search_ding_facetbrowser() {
  $return_object = new stdClass();
  $facets = $facet_terms = array();
  $fields = array(
    1 => 'tags',
    2 => 'category',
  );

  if (apachesolr_has_searched()) {
    $results = _apachesolr_static_result();
    foreach ($results as $result) {
      $node = node_load($result->nid);
      if ($node instanceof stdClass) {
        foreach ($fields as $vocab_id => $vocab_name) {
          $field_name = 'field_' . $vocab_name;
          if (is_array($node->$field_name) && count($node->$field_name) == TRUE) {
            foreach ($node->$field_name as $taxonomy) {
              if (is_array($taxonomy)) {
                foreach ($taxonomy as $term) {
                  $term_data = taxonomy_term_load_multiple(array($term['tid']));
                  $facet_terms[$vocab_name][$term_data[$term['tid']]->name] = $term_data[$term['tid']]->name;
                }
                $facets[$vocab_name] = (object)array(
                  'name'  => $field_name,
                  'terms' => $facet_terms[$vocab_name],
                );
              }
            }
          }
        }
      }
    }
  }
  $return_object->facets = $facets;
  $return_object->show_empty = FALSE;
  return $return_object;
}

/**
 * Implements hook_apachesolr_search_result_alter().
 *
 * Save the search result in a static variable to be able to use it in blocks and so on.
 */
function ding_facetbrowser_apachesolr_search_result_alter(&$doc) {
  _apachesolr_static_result($doc);
}

/*
 * Save the search result as in static variable
 */
function _apachesolr_static_result($result = FALSE) {
  static $search_result = array();
  if ($result instanceof stdClass) {
    $search_result[] = $result;
  }
  return $search_result;
}
