<?php

/**
 * Implements hook_block_info()
 *
 * @return array
 */
function ding_facetbrowser_block_info() {
  $blocks['facetbrowser'] = array(
    'info'  => t('Facet browser'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_theme()
 *
 * @return array
 */
function ding_facetbrowser_theme() {
  return array(
   'facetbrowser' => array(
     'variables' => array(
       'facets'    => NULL,
       'searchkey' => NULL,
     ),
    ),
  );
}

/**
 * Create a custom form with checkbox elements for facets and ajax callback
 *
 * @param array $form
 * @param array $form_state
 * @param array $facets
 * @return array $form
 */
function ding_facetbrowser_form($form, &$form_state, $facets = FALSE, $search = FALSE) {
  $checkboxes         = array();
  $default_values     = array();
  $form['search_key'] = array(
    '#type'  => 'hidden',
    '#value' => $search,
  );

  if (count($facets) == TRUE) {
    foreach ($facets as $facet) {
      if (count($facet) == TRUE) {
        $form[$facet->name] = array(
          '#type'        => 'fieldset',
          '#title'       => t($facet->name),
          '#attributes'  => array('id' => str_replace('.', '-', $facet->name), 'data' => array($facet->name)),
        );
      }
      if (is_object($facet) && count($facet->terms) == TRUE) {
        foreach ($facet->terms as $term_name => $term_count) {
          $facet_name             = explode('.', $facet->name);
          $element_name           = end($facet_name);
          $checkboxes[$term_name] = $term_name . ($term_name !== $term_count ? ' <span class="term_count">(' . $term_count . ')</span>' : FALSE);

          $form[$facet->name][$element_name][urlencode($term_name)] = array(
            '#type'             => 'checkbox',
            '#title'            => $checkboxes[$term_name],
            '#return_value'     => array($element_name => $term_name) ,
            '#attributes'       => array('class' => array($term_name)),
            '#ajax'             => array(
              'callback' => '_ajax_search',
              'wrapper'  => 'block-ding-facetbrowser-facetbrowser',
              'method'   => 'replace',
            ),
          );
        }
      }
      // Dont show empty facet categories
      elseif (!empty($facet->name) && array_key_exists($facet->name, $form)) {
        unset($form[$facet->name]);
      }

      // Reset previous set variables
      $checkboxes     = array();
      $default_values = array();
    }

    if (count($form) == TRUE && $_COOKIE['has_js'] == FALSE) {
      $form['submit'] = array(
        '#type'  => 'submit',
        '#value' => 'Submit',
      );
    }
  }

  return $form;
}

/**
 * AJAX Callback function for ding_facetbrowser_form.
 * Parse searchresults to various page containers
 *
 * @param array $form
 * @param array $form_state
 * @return array
 */
function _ajax_search($form, $form_state) {
  $commands          = array();
  $search_key        = $form['search_key']['#value'];
  $results           = ting_search_search_execute($search_key, array('facets' => _facetString($form_state)));
  $facets            = _ting_search_static_result();
  $facets_formatted  = drupal_render(drupal_build_form('ding_facetbrowser_form', $form_state));
  $results_formatted = theme('ting_search_results', array('results' => $results));

  $commands[] = ajax_command_replace('#block-ding-facetbrowser-facetbrowser', $facets_formatted);
  $commands[] = ajax_command_html('.search-results',$results_formatted);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Parse the selected facets from the $form_state to a readable string for the ting_search
 *
 * @param array $form_state
 * @return string
 */
function _facetString($form_state = NULL) {
  $facets = array();
  if (!empty($form_state['values']) && is_array($form_state['values'])) {
    foreach ($form_state['values'] as $data) {
      if (is_array($data)) {
        foreach ($data as $key => $value) {
          $facets[] = 'facet.' . $key. ':' . $value;
        }
      }
    }
  }
  return implode(';', $facets);
}

/**
 * Implements a validate handler for ding_facetbrowser_form().
 *
 * @param array $form
 * @param array $form_state
 * @return void
 */
function ding_facetbrowser_form_validate($form, &$form_state) { }

/**
 * Implements a submit handler for ding_facetbrowser_form()
 *
 * @param array $form
 * @param array $form_state
 * @return void
 */
function ding_facetbrowser_form_submit($form, &$form_state) {
  $string = _facetString($form_state);
  drupal_goto(implode('/', arg()), array('query' => array('facets' => $string)));
}


/**
 * facetbrowser theme function
 *
 * @param array $all_facets
 * @return string
 */
function theme_facetbrowser($search_result = FALSE) {
  $all_facets = array_shift($search_result);
  $searchkey = array_shift($search_result);
  $elements = array();
  if (is_array($all_facets)) {
    $elements[] = drupal_render(drupal_get_form('ding_facetbrowser_form', $all_facets, $searchkey));
  }
  return implode('', $elements);
}


/**
 * Implements hook_block_view()
 *
 * @return Array
 */
function ding_facetbrowser_block_view($delta = FALSE) {
  $block                  = array();
  $block_content          = FALSE;
  $content_in_facet       = FALSE;
  $executed_search_module = FALSE;

  drupal_add_js('misc/jquery.ba-bbq.js');
  drupal_add_js(drupal_get_path('module', 'ding_facetbrowser') . '/js/facetbrowser.js');
  drupal_add_css(drupal_get_path('module', 'ding_facetbrowser') . '/css/facetbrowser.css');
  // TODO: Get the facetbrowser dom id automatic
  drupal_add_js(
    array('dingFacetBrowser' => array(
      'mainElement' => '#block-ding-facetbrowser-facetbrowser',
      'showCount' => 5)
    ), 'setting');


  // Invoke ding_facetbrowser() from executed search module
  $executed_search                = menu_get_item();
  if (!empty($executed_search['page_arguments'])) {
    list($executed_search_module, ) = $executed_search['page_arguments'];
  }

  if (is_string($executed_search_module)) {
    $results = module_invoke($executed_search_module, 'ding_facetbrowser');
    if (is_object($results)) {
      foreach ($results->facets as $result) {
        if (count($result->terms) == TRUE) {
          $content_in_facet = TRUE;
          break;
        }
      }
      if ($content_in_facet === TRUE || $results->show_empty == TRUE) {
        $block_content = theme('facetbrowser', array($results->facets, (!empty($results->searchkey) ? $results->searchkey : NULL)));
      }
    }
    switch ($delta) {
    case 'facetbrowser':
      $block['subject'] = t('Facet browser');
      $block['content'] = $block_content;
      break;
    }
  }

  return $block;
}

/**
 * Implements hook_ding_facetbrowser() from the apachesolr_search module
 * to prevent from hacking in contrib module.
 *
 * @return object
 */
function apachesolr_search_ding_facetbrowser() {
  $return_object = new stdClass();
  $facets = $facet_terms = array();
  $fields = array(
    1 => 'tags',
    2 => 'category',
  );

  if (apachesolr_has_searched()) {
    $results = _apachesolr_static_result();
    foreach ($results as $result) {
      $node = node_load($result->nid);
      if ($node instanceof stdClass) {
        foreach ($fields as $vocab_id => $vocab_name) {
          $field_name = 'field_' . $vocab_name;
          if (is_array($node->$field_name) && count($node->$field_name) == TRUE) {
            foreach ($node->$field_name as $taxonomy) {
              if (is_array($taxonomy)) {
                foreach ($taxonomy as $term) {
                  $term_data = taxonomy_term_load_multiple(array($term['tid']));
                  $facet_terms[$vocab_name][$term_data[$term['tid']]->name] = $term_data[$term['tid']]->name;
                }
                $facets[$vocab_name] = (object)array(
                  'name'  => $field_name,
                  'terms' => $facet_terms[$vocab_name],
                );
              }
            }
          }
        }
      }
    }
  }
  $return_object->facets = $facets;
  $return_object->show_empty = FALSE;
  return $return_object;
}

/**
 * Implements hook_apachesolr_search_result_alter().
 * Save the search result in a static variable to be able to use it in blocks and so on.
 *
 * @param object $doc
 * @return void
 */
function ding_facetbrowser_apachesolr_search_result_alter(&$doc) {
  _apachesolr_static_result($doc);
}

/*
 * Save the search result as in static variable
 *
 * @param object $result
 * @return array
 */
function _apachesolr_static_result($result = FALSE) {
  static $search_result = array();
  if ($result instanceof stdClass) {
    $search_result[] = $result;
  }
  return $search_result;
}
