<?php
/**
 * @file
 * Handles sfx-fields for ting entities.
 */


/**
 * Implements hook_field_info()
 *
 * description of field
 */
function ting_sfx_field_info() {
  $ret = array(
    'ting_sfx' => array(
      'label' => t('A link to openurl (SFX)'),
      'description' => t('This field links SFX'),
      'default_formatter' => 'ting_sfx_default',
      'settings' => array('max_length' => 255,),
      'default_widget' => 'hidden',
      'no_ui' => TRUE,
    ),
  );
  return $ret;
}

/**
 * Implements hook_form_FROM_ID_alter()
 * Adding SFX url form field to Ting configurating form
 */
function ting_sfx_form_ting_admin_ting_settings_alter(&$form, &$form_state) {
  $form['ting']['ting_sfx_url'] = array(
    '#type' => 'textfield',
    '#title' => t('SFX link resolver URL'),
    '#description' => t('URL to SFX link resolver, e.g. http://sfx.dbc.dk:3410/dbc_test-ph_metropol'),
    '#required' => TRUE,
    '#default_value' => variable_get('ting_sfx_url', ''),
  );
}

/**
 * Implements hook_field_formatter_info
 */
function ting_sfx_field_formatter_info() {
  return array(
    'ting_sfx_default' => array(
      'label' => t('Default'),
      'field types' => array('ting_sfx', ),
    )
  );
}

function ting_sfx_inline() {
  static $types;
  if (!$types) {
    $types = 
      array(
	    'dbcaddi:hasOpenUrl' => t('SFX'),	    
	    );
  }
  return $types;  
}

function ting_sfx_anchor_info() {
  return ting_sfx_inline();
}

/**
 * Implements hook_field_formatter_view
 *
 * only one formatter is supported
 * - ting_sfx
 */
function ting_sfx_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $relation_types = ting_sfx_inline();
  switch ($display['type']) {
    case 'ting_sfx_default':
      foreach ($items as $delta => $items) {
        foreach ($entity->relations as $relation) {	 
          if ( (isset($relation_types[$relation->type])) && ($sfx_url = ting_sfx_get_open_url($relation->uri)) ) {
	    $element[$delta] = 
	      array(
		    '#markup' => l(ting_sfx_get_logo() . '<span>' . $relation_types[$relation->type] . '</span>',
				   $sfx_url, array(
						   'attributes' => array('class' => array('ting_sfx_group',),
									 'target' => '_new',
									 'name' => $relation->type),
						   'html' => TRUE,
						   )),
		    );
          }
        }
      }
      break;
    default:
  }

  return $element;
}

function ting_sfx_get_open_url($uri) {
  $baseurl = variable_get('ting_sfx_url', FALSE);
  
  if ($baseurl) {
    $baseurl .= '?';
    $ret = str_replace('_BASEURL_', $baseurl, $uri);
  }
  else {
    $ret = FALSE;
  }

  $parts = parse_url($ret);
  $query = ting_sfx_encode_dk($parts['query']);
  $port = isset($parts['port']) ? ':'.$parts['port'] : '';
  $ret = $parts['scheme'].'://'.$parts['host'].$port.$parts['path'].'?'.$query;

  return $ret;	
}

/**
 * Urlencode values of parameters 
 */
function ting_sfx_encode_dk( $query ) {
  $params = explode('&',$query);
  $ret = '';
  foreach($params as $param) {
    $keyval = explode('=',$param);

    if( strlen($ret) > 1 )
      $ret.='&';

    $ret .= $keyval[0].'='.urlencode($keyval[1]);
  }

  return $ret;

  /*$dk = array('æ','ø','å','Æ','Ø','Å');
  $utf=array();
  $hest = array();
  foreach($dk as $ch) {
    $url_enc[] = urlencode($ch);
  }  
  $ret = str_replace($dk,$url_enc,$query);

  return $ret; */
}

function ting_sfx_get_logo() {
  $logo_file = 'sfx_logo.png';
  $ret = sprintf('<img src="%s/%s/%s"/>', substr(base_path(), 0, -1), drupal_get_path('module','ting_sfx'), $logo_file);
  return $ret;
}

/**
 * Implements hook_field_validate
 * TODO is some kind of validation needed?
 */
function ting_sfx_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // do nothing
}

/**
 * Implements hook_field_is_empty
 *
 */
function ting_sfx_is_empty($item, $field) {
  // TODO; check
  return false;
}

/**
 * Implements hook_field_load().
 */
function ting_sfx_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    $items[$id][0] = array(
      'id' => $id,
    );
  }
}

function ting_sfx_preprocess_html(&$variables, $hook) {
  drupal_add_css(drupal_get_path('module', 'ting_sfx') . '/ting_sfx.css');
}
